// This file is auto-generated by @hey-api/openapi-ts

import { type Client, formDataBodySerializer, type Options as Options2, type TDataShape } from './client';
import { client } from './client.gen';
import type { AddBehaviorToMetricMetricsMetricIdBehaviorsBehaviorIdPostData, AddBehaviorToMetricMetricsMetricIdBehaviorsBehaviorIdPostErrors, AddBehaviorToMetricMetricsMetricIdBehaviorsBehaviorIdPostResponses, AddEmojiReactionCommentsCommentIdEmojiEmojiPostData, AddEmojiReactionCommentsCommentIdEmojiEmojiPostErrors, AddEmojiReactionCommentsCommentIdEmojiEmojiPostResponses, AddMetricToBehaviorBehaviorsBehaviorIdMetricsMetricIdPostData, AddMetricToBehaviorBehaviorsBehaviorIdMetricsMetricIdPostErrors, AddMetricToBehaviorBehaviorsBehaviorIdMetricsMetricIdPostResponses, AssignTagToEntityTagsEntityTypeEntityIdPostData, AssignTagToEntityTagsEntityTypeEntityIdPostErrors, AssignTagToEntityTagsEntityTypeEntityIdPostResponses, AssociateTestsWithTestSetTestSetsTestSetIdAssociatePostData, AssociateTestsWithTestSetTestSetsTestSetIdAssociatePostErrors, AssociateTestsWithTestSetTestSetsTestSetIdAssociatePostResponses, AuthCallbackAuthCallbackGetData, AuthCallbackAuthCallbackGetErrors, BulkRestoreFromRecycleBinRecycleBulkRestoreModelNamePostData, BulkRestoreFromRecycleBinRecycleBulkRestoreModelNamePostErrors, BulkRestoreFromRecycleBinRecycleBulkRestoreModelNamePostResponses, CreateBehaviorBehaviorsPostData, CreateBehaviorBehaviorsPostErrors, CreateBehaviorBehaviorsPostResponses, CreateCategoryCategoriesPostData, CreateCategoryCategoriesPostErrors, CreateCategoryCategoriesPostResponses, CreateChatCompletionEndpointServicesChatCompletionsPostData, CreateChatCompletionEndpointServicesChatCompletionsPostErrors, CreateChatCompletionEndpointServicesChatCompletionsPostResponses, CreateCommentCommentsPostData, CreateCommentCommentsPostErrors, CreateCommentCommentsPostResponses, CreateDemographicDemographicsPostData, CreateDemographicDemographicsPostErrors, CreateDemographicDemographicsPostResponses, CreateDimensionDimensionsPostData, CreateDimensionDimensionsPostErrors, CreateDimensionDimensionsPostResponses, CreateEndpointEndpointsPostData, CreateEndpointEndpointsPostErrors, CreateEndpointEndpointsPostResponses, CreateMetricMetricsPostData, CreateMetricMetricsPostErrors, CreateMetricMetricsPostResponses, CreateModelModelsPostData, CreateModelModelsPostErrors, CreateModelModelsPostResponses, CreateOrganizationOrganizationsPostData, CreateOrganizationOrganizationsPostErrors, CreateOrganizationOrganizationsPostResponses, CreateProjectProjectsPostData, CreateProjectProjectsPostErrors, CreateProjectProjectsPostResponses, CreatePromptPromptsPostData, CreatePromptPromptsPostErrors, CreatePromptPromptsPostResponses, CreatePromptTemplatePromptTemplatesPostData, CreatePromptTemplatePromptTemplatesPostErrors, CreatePromptTemplatePromptTemplatesPostResponses, CreateResponsePatternResponsePatternsPostData, CreateResponsePatternResponsePatternsPostErrors, CreateResponsePatternResponsePatternsPostResponses, CreateRiskRisksPostData, CreateRiskRisksPostErrors, CreateRiskRisksPostResponses, CreateSourceSourcesPostData, CreateSourceSourcesPostErrors, CreateSourceSourcesPostResponses, CreateStatusStatusesPostData, CreateStatusStatusesPostErrors, CreateStatusStatusesPostResponses, CreateTagTagsPostData, CreateTagTagsPostErrors, CreateTagTagsPostResponses, CreateTaskTasksPostData, CreateTaskTasksPostErrors, CreateTaskTasksPostResponses, CreateTestConfigurationTestConfigurationsPostData, CreateTestConfigurationTestConfigurationsPostErrors, CreateTestConfigurationTestConfigurationsPostResponses, CreateTestContextTestContextsPostData, CreateTestContextTestContextsPostErrors, CreateTestContextTestContextsPostResponses, CreateTestResultTestResultsPostData, CreateTestResultTestResultsPostErrors, CreateTestResultTestResultsPostResponses, CreateTestRunTestRunsPostData, CreateTestRunTestRunsPostErrors, CreateTestRunTestRunsPostResponses, CreateTestsBulkTestsBulkPostData, CreateTestsBulkTestsBulkPostErrors, CreateTestsBulkTestsBulkPostResponses, CreateTestSetBulkTestSetsBulkPostData, CreateTestSetBulkTestSetsBulkPostErrors, CreateTestSetBulkTestSetsBulkPostResponses, CreateTestSetTestSetsPostData, CreateTestSetTestSetsPostErrors, CreateTestSetTestSetsPostResponses, CreateTestTestsPostData, CreateTestTestsPostErrors, CreateTestTestsPostResponses, CreateTokenTokensPostData, CreateTokenTokensPostErrors, CreateTokenTokensPostResponses, CreateTopicTopicsPostData, CreateTopicTopicsPostErrors, CreateTopicTopicsPostResponses, CreateTypeLookupTypeLookupsPostData, CreateTypeLookupTypeLookupsPostErrors, CreateTypeLookupTypeLookupsPostResponses, CreateUseCaseUseCasesPostData, CreateUseCaseUseCasesPostErrors, CreateUseCaseUseCasesPostResponses, CreateUserUsersPostData, CreateUserUsersPostErrors, CreateUserUsersPostResponses, DeleteBehaviorBehaviorsBehaviorIdDeleteData, DeleteBehaviorBehaviorsBehaviorIdDeleteErrors, DeleteBehaviorBehaviorsBehaviorIdDeleteResponses, DeleteCategoryCategoriesCategoryIdDeleteData, DeleteCategoryCategoriesCategoryIdDeleteErrors, DeleteCategoryCategoriesCategoryIdDeleteResponses, DeleteCommentCommentsCommentIdDeleteData, DeleteCommentCommentsCommentIdDeleteErrors, DeleteCommentCommentsCommentIdDeleteResponses, DeleteDemographicDemographicsDemographicIdDeleteData, DeleteDemographicDemographicsDemographicIdDeleteErrors, DeleteDemographicDemographicsDemographicIdDeleteResponses, DeleteDimensionDimensionsDimensionIdDeleteData, DeleteDimensionDimensionsDimensionIdDeleteErrors, DeleteDimensionDimensionsDimensionIdDeleteResponses, DeleteEndpointEndpointsEndpointIdDeleteData, DeleteEndpointEndpointsEndpointIdDeleteErrors, DeleteEndpointEndpointsEndpointIdDeleteResponses, DeleteMetricMetricsMetricIdDeleteData, DeleteMetricMetricsMetricIdDeleteErrors, DeleteMetricMetricsMetricIdDeleteResponses, DeleteModelModelsModelIdDeleteData, DeleteModelModelsModelIdDeleteErrors, DeleteModelModelsModelIdDeleteResponses, DeleteOrganizationOrganizationsOrganizationIdDeleteData, DeleteOrganizationOrganizationsOrganizationIdDeleteErrors, DeleteOrganizationOrganizationsOrganizationIdDeleteResponses, DeleteProjectProjectsProjectIdDeleteData, DeleteProjectProjectsProjectIdDeleteErrors, DeleteProjectProjectsProjectIdDeleteResponses, DeletePromptPromptsPromptIdDeleteData, DeletePromptPromptsPromptIdDeleteErrors, DeletePromptPromptsPromptIdDeleteResponses, DeletePromptTemplatePromptTemplatesPromptTemplateIdDeleteData, DeletePromptTemplatePromptTemplatesPromptTemplateIdDeleteErrors, DeletePromptTemplatePromptTemplatesPromptTemplateIdDeleteResponses, DeleteResponsePatternResponsePatternsResponsePatternIdDeleteData, DeleteResponsePatternResponsePatternsResponsePatternIdDeleteErrors, DeleteResponsePatternResponsePatternsResponsePatternIdDeleteResponses, DeleteRiskRisksRiskIdDeleteData, DeleteRiskRisksRiskIdDeleteErrors, DeleteRiskRisksRiskIdDeleteResponses, DeleteSourceSourcesSourceIdDeleteData, DeleteSourceSourcesSourceIdDeleteErrors, DeleteSourceSourcesSourceIdDeleteResponses, DeleteStatusStatusesStatusIdDeleteData, DeleteStatusStatusesStatusIdDeleteErrors, DeleteStatusStatusesStatusIdDeleteResponses, DeleteTagTagsTagIdDeleteData, DeleteTagTagsTagIdDeleteErrors, DeleteTagTagsTagIdDeleteResponses, DeleteTaskTasksTaskIdDeleteData, DeleteTaskTasksTaskIdDeleteErrors, DeleteTaskTasksTaskIdDeleteResponses, DeleteTestConfigurationTestConfigurationsTestConfigurationIdDeleteData, DeleteTestConfigurationTestConfigurationsTestConfigurationIdDeleteErrors, DeleteTestConfigurationTestConfigurationsTestConfigurationIdDeleteResponses, DeleteTestContextTestContextsTestContextIdDeleteData, DeleteTestContextTestContextsTestContextIdDeleteErrors, DeleteTestContextTestContextsTestContextIdDeleteResponses, DeleteTestResultTestResultsTestResultIdDeleteData, DeleteTestResultTestResultsTestResultIdDeleteErrors, DeleteTestResultTestResultsTestResultIdDeleteResponses, DeleteTestRunTestRunsTestRunIdDeleteData, DeleteTestRunTestRunsTestRunIdDeleteErrors, DeleteTestRunTestRunsTestRunIdDeleteResponses, DeleteTestSetTestSetsTestSetIdDeleteData, DeleteTestSetTestSetsTestSetIdDeleteErrors, DeleteTestSetTestSetsTestSetIdDeleteResponses, DeleteTestTestsTestIdDeleteData, DeleteTestTestsTestIdDeleteErrors, DeleteTestTestsTestIdDeleteResponses, DeleteTokenTokensTokenIdDeleteData, DeleteTokenTokensTokenIdDeleteErrors, DeleteTokenTokensTokenIdDeleteResponses, DeleteTopicTopicsTopicIdDeleteData, DeleteTopicTopicsTopicIdDeleteErrors, DeleteTopicTopicsTopicIdDeleteResponses, DeleteTypeLookupTypeLookupsTypeLookupIdDeleteData, DeleteTypeLookupTypeLookupsTypeLookupIdDeleteErrors, DeleteTypeLookupTypeLookupsTypeLookupIdDeleteResponses, DeleteUseCaseUseCasesUseCaseIdDeleteData, DeleteUseCaseUseCasesUseCaseIdDeleteErrors, DeleteUseCaseUseCasesUseCaseIdDeleteResponses, DeleteUserUsersUserIdDeleteData, DeleteUserUsersUserIdDeleteErrors, DeleteUserUsersUserIdDeleteResponses, DemoRedirectAuthDemoGetData, DemoRedirectAuthDemoGetErrors, DisassociateTestsFromTestSetTestSetsTestSetIdDisassociatePostData, DisassociateTestsFromTestSetTestSetsTestSetIdDisassociatePostErrors, DisassociateTestsFromTestSetTestSetsTestSetIdDisassociatePostResponses, DownloadTestRunResultsTestRunsTestRunIdDownloadGetData, DownloadTestRunResultsTestRunsTestRunIdDownloadGetErrors, DownloadTestRunResultsTestRunsTestRunIdDownloadGetResponses, DownloadTestSetPromptsCsvTestSetsTestSetIdentifierPromptsDownloadGetData, DownloadTestSetPromptsCsvTestSetsTestSetIdentifierPromptsDownloadGetErrors, DownloadTestSetPromptsCsvTestSetsTestSetIdentifierPromptsDownloadGetResponses, DownloadTestSetPromptsTestSetsTestSetIdentifierDownloadGetData, DownloadTestSetPromptsTestSetsTestSetIdentifierDownloadGetErrors, DownloadTestSetPromptsTestSetsTestSetIdentifierDownloadGetResponses, EmptyRecycleBinForModelRecycleEmptyModelNameDeleteData, EmptyRecycleBinForModelRecycleEmptyModelNameDeleteErrors, EmptyRecycleBinForModelRecycleEmptyModelNameDeleteResponses, ExecuteTestConfigurationEndpointTestConfigurationsTestConfigurationIdExecutePostData, ExecuteTestConfigurationEndpointTestConfigurationsTestConfigurationIdExecutePostErrors, ExecuteTestConfigurationEndpointTestConfigurationsTestConfigurationIdExecutePostResponses, ExecuteTestSetTestSetsTestSetIdentifierExecuteEndpointIdPostData, ExecuteTestSetTestSetsTestSetIdentifierExecuteEndpointIdPostErrors, ExecuteTestSetTestSetsTestSetIdentifierExecuteEndpointIdPostResponses, ExtractDocumentContentServicesDocumentsExtractPostData, ExtractDocumentContentServicesDocumentsExtractPostErrors, ExtractDocumentContentServicesDocumentsExtractPostResponses, GenerateContentEndpointServicesGenerateContentPostData, GenerateContentEndpointServicesGenerateContentPostErrors, GenerateContentEndpointServicesGenerateContentPostResponses, GenerateTestConfigServicesGenerateTestConfigPostData, GenerateTestConfigServicesGenerateTestConfigPostErrors, GenerateTestConfigServicesGenerateTestConfigPostResponses, GenerateTestResultStatsTestResultsStatsGetData, GenerateTestResultStatsTestResultsStatsGetErrors, GenerateTestResultStatsTestResultsStatsGetResponses, GenerateTestRunStatsTestRunsStatsGetData, GenerateTestRunStatsTestRunsStatsGetErrors, GenerateTestRunStatsTestRunsStatsGetResponses, GenerateTestsEndpointServicesGenerateTestsPostData, GenerateTestsEndpointServicesGenerateTestsPostErrors, GenerateTestsEndpointServicesGenerateTestsPostResponses, GenerateTestSetStatsTestSetsStatsGetData, GenerateTestSetStatsTestSetsStatsGetErrors, GenerateTestSetStatsTestSetsStatsGetResponses, GenerateTestSetTestSetsGeneratePostData, GenerateTestSetTestSetsGeneratePostErrors, GenerateTestSetTestSetsGeneratePostResponses, GenerateTestSetTestStatsTestSetsTestSetIdentifierStatsGetData, GenerateTestSetTestStatsTestSetsTestSetIdentifierStatsGetErrors, GenerateTestSetTestStatsTestSetsTestSetIdentifierStatsGetResponses, GenerateTestStatsTestsStatsGetData, GenerateTestStatsTestsStatsGetErrors, GenerateTestStatsTestsStatsGetResponses, GenerateTextServicesGenerateTextPostData, GenerateTextServicesGenerateTextPostErrors, GenerateTextServicesGenerateTextPostResponses, GetAiChatResponseServicesOpenaiChatPostData, GetAiChatResponseServicesOpenaiChatPostErrors, GetAiChatResponseServicesOpenaiChatPostResponses, GetAiJsonResponseServicesOpenaiJsonPostData, GetAiJsonResponseServicesOpenaiJsonPostErrors, GetAiJsonResponseServicesOpenaiJsonPostResponses, GetEndpointSchemaEndpointsSchemaGetData, GetEndpointSchemaEndpointsSchemaGetErrors, GetEndpointSchemaEndpointsSchemaGetResponses, GetGithubContentsServicesGithubContentsGetData, GetGithubContentsServicesGithubContentsGetErrors, GetGithubContentsServicesGithubContentsGetResponses, GetIndividualTestStatisticsTestsTestIdStatsGetData, GetIndividualTestStatisticsTestsTestIdStatsGetErrors, GetIndividualTestStatisticsTestsTestIdStatsGetResponses, GetRecycleBinCountsRecycleStatsCountsGetData, GetRecycleBinCountsRecycleStatsCountsGetErrors, GetRecycleBinCountsRecycleStatsCountsGetResponses, GetRecycledRecordsRecycleModelNameGetData, GetRecycledRecordsRecycleModelNameGetErrors, GetRecycledRecordsRecycleModelNameGetResponses, GetTasksByEntityTasksEntityTypeEntityIdGetData, GetTasksByEntityTasksEntityTypeEntityIdGetErrors, GetTasksByEntityTasksEntityTypeEntityIdGetResponses, GetTaskTasksTaskIdGetData, GetTaskTasksTaskIdGetErrors, GetTaskTasksTaskIdGetResponses, GetTestRunBehaviorsTestRunsTestRunIdBehaviorsGetData, GetTestRunBehaviorsTestRunsTestRunIdBehaviorsGetErrors, GetTestRunBehaviorsTestRunsTestRunIdBehaviorsGetResponses, GetTestSetPromptsTestSetsTestSetIdentifierPromptsGetData, GetTestSetPromptsTestSetsTestSetIdentifierPromptsGetErrors, GetTestSetPromptsTestSetsTestSetIdentifierPromptsGetResponses, GetTestSetTestsTestSetsTestSetIdentifierTestsGetData, GetTestSetTestsTestSetsTestSetIdentifierTestsGetErrors, GetTestSetTestsTestSetsTestSetIdentifierTestsGetResponses, HomeHomeGetData, HomeHomeGetResponses, InitializeOrganizationDataOrganizationsOrganizationIdLoadInitialDataPostData, InitializeOrganizationDataOrganizationsOrganizationIdLoadInitialDataPostErrors, InitializeOrganizationDataOrganizationsOrganizationIdLoadInitialDataPostResponses, InvokeEndpointEndpointsEndpointIdInvokePostData, InvokeEndpointEndpointsEndpointIdInvokePostErrors, InvokeEndpointEndpointsEndpointIdInvokePostResponses, LeaveOrganizationUsersLeaveOrganizationPatchData, LeaveOrganizationUsersLeaveOrganizationPatchErrors, LeaveOrganizationUsersLeaveOrganizationPatchResponses, ListAvailableModelsRecycleModelsGetData, ListAvailableModelsRecycleModelsGetResponses, ListTasksTasksGetData, ListTasksTasksGetErrors, ListTasksTasksGetResponses, LoginAuthLoginGetData, LoginAuthLoginGetErrors, LogoutAuthLogoutGetData, LogoutAuthLogoutGetErrors, LogoutAuthLogoutGetResponses, PermanentlyDeleteRecordRecycleModelNameItemIdDeleteData, PermanentlyDeleteRecordRecycleModelNameItemIdDeleteErrors, PermanentlyDeleteRecordRecycleModelNameItemIdDeleteResponses, ProtectedHomeProtectedGetData, ProtectedHomeProtectedGetResponses, ReadBehaviorBehaviorsBehaviorIdGetData, ReadBehaviorBehaviorsBehaviorIdGetErrors, ReadBehaviorBehaviorsBehaviorIdGetResponses, ReadBehaviorMetricsBehaviorsBehaviorIdMetricsGetData, ReadBehaviorMetricsBehaviorsBehaviorIdMetricsGetErrors, ReadBehaviorMetricsBehaviorsBehaviorIdMetricsGetResponses, ReadBehaviorsBehaviorsGetData, ReadBehaviorsBehaviorsGetErrors, ReadBehaviorsBehaviorsGetResponses, ReadCategoriesCategoriesGetData, ReadCategoriesCategoriesGetErrors, ReadCategoriesCategoriesGetResponses, ReadCategoryCategoriesCategoryIdGetData, ReadCategoryCategoriesCategoryIdGetErrors, ReadCategoryCategoriesCategoryIdGetResponses, ReadCommentCommentsCommentIdGetData, ReadCommentCommentsCommentIdGetErrors, ReadCommentCommentsCommentIdGetResponses, ReadCommentsByEntityCommentsEntityEntityTypeEntityIdGetData, ReadCommentsByEntityCommentsEntityEntityTypeEntityIdGetErrors, ReadCommentsByEntityCommentsEntityEntityTypeEntityIdGetResponses, ReadCommentsCommentsGetData, ReadCommentsCommentsGetErrors, ReadCommentsCommentsGetResponses, ReadDemographicDemographicsDemographicIdGetData, ReadDemographicDemographicsDemographicIdGetErrors, ReadDemographicDemographicsDemographicIdGetResponses, ReadDemographicsDemographicsGetData, ReadDemographicsDemographicsGetErrors, ReadDemographicsDemographicsGetResponses, ReadDimensionDimensionsDimensionIdGetData, ReadDimensionDimensionsDimensionIdGetErrors, ReadDimensionDimensionsDimensionIdGetResponses, ReadDimensionsDimensionsGetData, ReadDimensionsDimensionsGetErrors, ReadDimensionsDimensionsGetResponses, ReadEndpointEndpointsEndpointIdGetData, ReadEndpointEndpointsEndpointIdGetErrors, ReadEndpointEndpointsEndpointIdGetResponses, ReadEndpointsEndpointsGetData, ReadEndpointsEndpointsGetErrors, ReadEndpointsEndpointsGetResponses, ReadMetricBehaviorsMetricsMetricIdBehaviorsGetData, ReadMetricBehaviorsMetricsMetricIdBehaviorsGetErrors, ReadMetricBehaviorsMetricsMetricIdBehaviorsGetResponses, ReadMetricMetricsMetricIdGetData, ReadMetricMetricsMetricIdGetErrors, ReadMetricMetricsMetricIdGetResponses, ReadMetricsMetricsGetData, ReadMetricsMetricsGetErrors, ReadMetricsMetricsGetResponses, ReadModelModelsModelIdGetData, ReadModelModelsModelIdGetErrors, ReadModelModelsModelIdGetResponses, ReadModelsModelsGetData, ReadModelsModelsGetErrors, ReadModelsModelsGetResponses, ReadOrganizationOrganizationsOrganizationIdGetData, ReadOrganizationOrganizationsOrganizationIdGetErrors, ReadOrganizationOrganizationsOrganizationIdGetResponses, ReadOrganizationsOrganizationsGetData, ReadOrganizationsOrganizationsGetErrors, ReadOrganizationsOrganizationsGetResponses, ReadProjectProjectsProjectIdGetData, ReadProjectProjectsProjectIdGetErrors, ReadProjectProjectsProjectIdGetResponses, ReadProjectsProjectsGetData, ReadProjectsProjectsGetErrors, ReadProjectsProjectsGetResponses, ReadPromptPromptsPromptIdGetData, ReadPromptPromptsPromptIdGetErrors, ReadPromptPromptsPromptIdGetResponses, ReadPromptsPromptsGetData, ReadPromptsPromptsGetErrors, ReadPromptsPromptsGetResponses, ReadPromptTemplatePromptTemplatesPromptTemplateIdGetData, ReadPromptTemplatePromptTemplatesPromptTemplateIdGetErrors, ReadPromptTemplatePromptTemplatesPromptTemplateIdGetResponses, ReadPromptTemplatesPromptTemplatesGetData, ReadPromptTemplatesPromptTemplatesGetErrors, ReadPromptTemplatesPromptTemplatesGetResponses, ReadResponsePatternResponsePatternsResponsePatternIdGetData, ReadResponsePatternResponsePatternsResponsePatternIdGetErrors, ReadResponsePatternResponsePatternsResponsePatternIdGetResponses, ReadResponsePatternsResponsePatternsGetData, ReadResponsePatternsResponsePatternsGetErrors, ReadResponsePatternsResponsePatternsGetResponses, ReadRiskRisksRiskIdGetData, ReadRiskRisksRiskIdGetErrors, ReadRiskRisksRiskIdGetResponses, ReadRisksRisksGetData, ReadRisksRisksGetErrors, ReadRisksRisksGetResponses, ReadSourceSourcesSourceIdGetData, ReadSourceSourcesSourceIdGetErrors, ReadSourceSourcesSourceIdGetResponses, ReadSourcesSourcesGetData, ReadSourcesSourcesGetErrors, ReadSourcesSourcesGetResponses, ReadStatusesStatusesGetData, ReadStatusesStatusesGetErrors, ReadStatusesStatusesGetResponses, ReadStatusStatusesStatusIdGetData, ReadStatusStatusesStatusIdGetErrors, ReadStatusStatusesStatusIdGetResponses, ReadTagsTagsGetData, ReadTagsTagsGetErrors, ReadTagsTagsGetResponses, ReadTagTagsTagIdGetData, ReadTagTagsTagIdGetErrors, ReadTagTagsTagIdGetResponses, ReadTestConfigurationsTestConfigurationsGetData, ReadTestConfigurationsTestConfigurationsGetErrors, ReadTestConfigurationsTestConfigurationsGetResponses, ReadTestConfigurationTestConfigurationsTestConfigurationIdGetData, ReadTestConfigurationTestConfigurationsTestConfigurationIdGetErrors, ReadTestConfigurationTestConfigurationsTestConfigurationIdGetResponses, ReadTestContextsTestContextsGetData, ReadTestContextsTestContextsGetErrors, ReadTestContextsTestContextsGetResponses, ReadTestContextTestContextsTestContextIdGetData, ReadTestContextTestContextsTestContextIdGetErrors, ReadTestContextTestContextsTestContextIdGetResponses, ReadTestResultsTestResultsGetData, ReadTestResultsTestResultsGetErrors, ReadTestResultsTestResultsGetResponses, ReadTestResultTestResultsTestResultIdGetData, ReadTestResultTestResultsTestResultIdGetErrors, ReadTestResultTestResultsTestResultIdGetResponses, ReadTestRunsTestRunsGetData, ReadTestRunsTestRunsGetErrors, ReadTestRunsTestRunsGetResponses, ReadTestRunTestRunsTestRunIdGetData, ReadTestRunTestRunsTestRunIdGetErrors, ReadTestRunTestRunsTestRunIdGetResponses, ReadTestSetsTestSetsGetData, ReadTestSetsTestSetsGetErrors, ReadTestSetsTestSetsGetResponses, ReadTestSetTestSetsTestSetIdentifierGetData, ReadTestSetTestSetsTestSetIdentifierGetErrors, ReadTestSetTestSetsTestSetIdentifierGetResponses, ReadTestsTestsGetData, ReadTestsTestsGetErrors, ReadTestsTestsGetResponses, ReadTestTestsTestIdGetData, ReadTestTestsTestIdGetErrors, ReadTestTestsTestIdGetResponses, ReadTokensTokensGetData, ReadTokensTokensGetErrors, ReadTokensTokensGetResponses, ReadTokenTokensTokenIdGetData, ReadTokenTokensTokenIdGetErrors, ReadTokenTokensTokenIdGetResponses, ReadTopicsTopicsGetData, ReadTopicsTopicsGetErrors, ReadTopicsTopicsGetResponses, ReadTopicTopicsTopicIdGetData, ReadTopicTopicsTopicIdGetErrors, ReadTopicTopicsTopicIdGetResponses, ReadTypeLookupsTypeLookupsGetData, ReadTypeLookupsTypeLookupsGetErrors, ReadTypeLookupsTypeLookupsGetResponses, ReadTypeLookupTypeLookupsTypeLookupIdGetData, ReadTypeLookupTypeLookupsTypeLookupIdGetErrors, ReadTypeLookupTypeLookupsTypeLookupIdGetResponses, ReadUseCasesUseCasesGetData, ReadUseCasesUseCasesGetErrors, ReadUseCasesUseCasesGetResponses, ReadUseCaseUseCasesUseCaseIdGetData, ReadUseCaseUseCasesUseCaseIdGetErrors, ReadUseCaseUseCasesUseCaseIdGetResponses, ReadUsersUsersGetData, ReadUsersUsersGetErrors, ReadUsersUsersGetResponses, ReadUserUsersUserIdGetData, ReadUserUsersUserIdGetErrors, ReadUserUsersUserIdGetResponses, RefreshTokenTokensTokenIdRefreshPostData, RefreshTokenTokensTokenIdRefreshPostErrors, RefreshTokenTokensTokenIdRefreshPostResponses, RemoveBehaviorFromMetricMetricsMetricIdBehaviorsBehaviorIdDeleteData, RemoveBehaviorFromMetricMetricsMetricIdBehaviorsBehaviorIdDeleteErrors, RemoveBehaviorFromMetricMetricsMetricIdBehaviorsBehaviorIdDeleteResponses, RemoveEmojiReactionCommentsCommentIdEmojiEmojiDeleteData, RemoveEmojiReactionCommentsCommentIdEmojiEmojiDeleteErrors, RemoveEmojiReactionCommentsCommentIdEmojiEmojiDeleteResponses, RemoveMetricFromBehaviorBehaviorsBehaviorIdMetricsMetricIdDeleteData, RemoveMetricFromBehaviorBehaviorsBehaviorIdMetricsMetricIdDeleteErrors, RemoveMetricFromBehaviorBehaviorsBehaviorIdMetricsMetricIdDeleteResponses, RemoveTagFromEntityTagsEntityTypeEntityIdTagIdDeleteData, RemoveTagFromEntityTagsEntityTypeEntityIdTagIdDeleteErrors, RemoveTagFromEntityTagsEntityTypeEntityIdTagIdDeleteResponses, RestoreFromRecycleBinRecycleModelNameItemIdRestorePostData, RestoreFromRecycleBinRecycleModelNameItemIdRestorePostErrors, RestoreFromRecycleBinRecycleModelNameItemIdRestorePostResponses, RollbackOrganizationDataOrganizationsOrganizationIdRollbackInitialDataPostData, RollbackOrganizationDataOrganizationsOrganizationIdRollbackInitialDataPostErrors, RollbackOrganizationDataOrganizationsOrganizationIdRollbackInitialDataPostResponses, RootGetData, RootGetResponses, TestModelConnectionModelsModelIdTestPostData, TestModelConnectionModelsModelIdTestPostErrors, TestModelConnectionModelsModelIdTestPostResponses, UpdateBehaviorBehaviorsBehaviorIdPutData, UpdateBehaviorBehaviorsBehaviorIdPutErrors, UpdateBehaviorBehaviorsBehaviorIdPutResponses, UpdateCategoryCategoriesCategoryIdPutData, UpdateCategoryCategoriesCategoryIdPutErrors, UpdateCategoryCategoriesCategoryIdPutResponses, UpdateCommentCommentsCommentIdPutData, UpdateCommentCommentsCommentIdPutErrors, UpdateCommentCommentsCommentIdPutResponses, UpdateDemographicDemographicsDemographicIdPutData, UpdateDemographicDemographicsDemographicIdPutErrors, UpdateDemographicDemographicsDemographicIdPutResponses, UpdateDimensionDimensionsDimensionIdPutData, UpdateDimensionDimensionsDimensionIdPutErrors, UpdateDimensionDimensionsDimensionIdPutResponses, UpdateEndpointEndpointsEndpointIdPutData, UpdateEndpointEndpointsEndpointIdPutErrors, UpdateEndpointEndpointsEndpointIdPutResponses, UpdateMetricMetricsMetricIdPutData, UpdateMetricMetricsMetricIdPutErrors, UpdateMetricMetricsMetricIdPutResponses, UpdateModelModelsModelIdPutData, UpdateModelModelsModelIdPutErrors, UpdateModelModelsModelIdPutResponses, UpdateOrganizationOrganizationsOrganizationIdPutData, UpdateOrganizationOrganizationsOrganizationIdPutErrors, UpdateOrganizationOrganizationsOrganizationIdPutResponses, UpdateProjectProjectsProjectIdPutData, UpdateProjectProjectsProjectIdPutErrors, UpdateProjectProjectsProjectIdPutResponses, UpdatePromptPromptsPromptIdPutData, UpdatePromptPromptsPromptIdPutErrors, UpdatePromptPromptsPromptIdPutResponses, UpdatePromptTemplatePromptTemplatesPromptTemplateIdPutData, UpdatePromptTemplatePromptTemplatesPromptTemplateIdPutErrors, UpdatePromptTemplatePromptTemplatesPromptTemplateIdPutResponses, UpdateResponsePatternResponsePatternsResponsePatternIdPutData, UpdateResponsePatternResponsePatternsResponsePatternIdPutErrors, UpdateResponsePatternResponsePatternsResponsePatternIdPutResponses, UpdateRiskRisksRiskIdPutData, UpdateRiskRisksRiskIdPutErrors, UpdateRiskRisksRiskIdPutResponses, UpdateSourceSourcesSourceIdPutData, UpdateSourceSourcesSourceIdPutErrors, UpdateSourceSourcesSourceIdPutResponses, UpdateStatusStatusesStatusIdPutData, UpdateStatusStatusesStatusIdPutErrors, UpdateStatusStatusesStatusIdPutResponses, UpdateTagTagsTagIdPutData, UpdateTagTagsTagIdPutErrors, UpdateTagTagsTagIdPutResponses, UpdateTaskTasksTaskIdPatchData, UpdateTaskTasksTaskIdPatchErrors, UpdateTaskTasksTaskIdPatchResponses, UpdateTestConfigurationTestConfigurationsTestConfigurationIdPutData, UpdateTestConfigurationTestConfigurationsTestConfigurationIdPutErrors, UpdateTestConfigurationTestConfigurationsTestConfigurationIdPutResponses, UpdateTestContextTestContextsTestContextIdPutData, UpdateTestContextTestContextsTestContextIdPutErrors, UpdateTestContextTestContextsTestContextIdPutResponses, UpdateTestResultTestResultsTestResultIdPutData, UpdateTestResultTestResultsTestResultIdPutErrors, UpdateTestResultTestResultsTestResultIdPutResponses, UpdateTestRunTestRunsTestRunIdPutData, UpdateTestRunTestRunsTestRunIdPutErrors, UpdateTestRunTestRunsTestRunIdPutResponses, UpdateTestSetTestSetsTestSetIdPutData, UpdateTestSetTestSetsTestSetIdPutErrors, UpdateTestSetTestSetsTestSetIdPutResponses, UpdateTestTestsTestIdPutData, UpdateTestTestsTestIdPutErrors, UpdateTestTestsTestIdPutResponses, UpdateTokenTokensTokenIdPutData, UpdateTokenTokensTokenIdPutErrors, UpdateTokenTokensTokenIdPutResponses, UpdateTopicTopicsTopicIdPutData, UpdateTopicTopicsTopicIdPutErrors, UpdateTopicTopicsTopicIdPutResponses, UpdateTypeLookupTypeLookupsTypeLookupIdPutData, UpdateTypeLookupTypeLookupsTypeLookupIdPutErrors, UpdateTypeLookupTypeLookupsTypeLookupIdPutResponses, UpdateUseCaseUseCasesUseCaseIdPutData, UpdateUseCaseUseCasesUseCaseIdPutErrors, UpdateUseCaseUseCasesUseCaseIdPutResponses, UpdateUserUsersUserIdPutData, UpdateUserUsersUserIdPutErrors, UpdateUserUsersUserIdPutResponses, UploadDocumentServicesDocumentsUploadPostData, UploadDocumentServicesDocumentsUploadPostErrors, UploadDocumentServicesDocumentsUploadPostResponses, VerifyAuthAuthVerifyGetData, VerifyAuthAuthVerifyGetErrors, VerifyAuthAuthVerifyGetResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Login
 * Redirect users to Auth0 login page
 */
export const loginAuthLoginGet = <ThrowOnError extends boolean = false>(options?: Options<LoginAuthLoginGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, LoginAuthLoginGetErrors, ThrowOnError>({
        url: '/auth/login',
        ...options
    });
};

/**
 * Auth Callback
 * Handle the Auth0 callback after successful authentication
 */
export const authCallbackAuthCallbackGet = <ThrowOnError extends boolean = false>(options?: Options<AuthCallbackAuthCallbackGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, AuthCallbackAuthCallbackGetErrors, ThrowOnError>({
        url: '/auth/callback',
        ...options
    });
};

/**
 * Logout
 * Log out the user and clear their session
 */
export const logoutAuthLogoutGet = <ThrowOnError extends boolean = false>(options?: Options<LogoutAuthLogoutGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<LogoutAuthLogoutGetResponses, LogoutAuthLogoutGetErrors, ThrowOnError>({
        url: '/auth/logout',
        ...options
    });
};

/**
 * Verify Auth
 * Verify JWT session token and return user info
 */
export const verifyAuthAuthVerifyGet = <ThrowOnError extends boolean = false>(options: Options<VerifyAuthAuthVerifyGetData, ThrowOnError>) => {
    return (options.client ?? client).get<VerifyAuthAuthVerifyGetResponses, VerifyAuthAuthVerifyGetErrors, ThrowOnError>({
        url: '/auth/verify',
        ...options
    });
};

/**
 * Demo Redirect
 * Redirect to Auth0 login with demo user pre-filled
 */
export const demoRedirectAuthDemoGet = <ThrowOnError extends boolean = false>(options?: Options<DemoRedirectAuthDemoGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, DemoRedirectAuthDemoGetErrors, ThrowOnError>({
        url: '/auth/demo',
        ...options
    });
};

/**
 * Read Behaviors
 * Get all behaviors with automatic session variables for RLS.
 */
export const readBehaviorsBehaviorsGet = <ThrowOnError extends boolean = false>(options?: Options<ReadBehaviorsBehaviorsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadBehaviorsBehaviorsGetResponses, ReadBehaviorsBehaviorsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/behaviors/',
        ...options
    });
};

/**
 * Create Behavior
 * Create behavior with automatic session variables for RLS.
 */
export const createBehaviorBehaviorsPost = <ThrowOnError extends boolean = false>(options: Options<CreateBehaviorBehaviorsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateBehaviorBehaviorsPostResponses, CreateBehaviorBehaviorsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/behaviors/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Behavior
 * Delete behavior with automatic session variables for RLS.
 */
export const deleteBehaviorBehaviorsBehaviorIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteBehaviorBehaviorsBehaviorIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteBehaviorBehaviorsBehaviorIdDeleteResponses, DeleteBehaviorBehaviorsBehaviorIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/behaviors/{behavior_id}',
        ...options
    });
};

/**
 * Read Behavior
 * Get behavior by ID with automatic session variables for RLS.
 */
export const readBehaviorBehaviorsBehaviorIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadBehaviorBehaviorsBehaviorIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadBehaviorBehaviorsBehaviorIdGetResponses, ReadBehaviorBehaviorsBehaviorIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/behaviors/{behavior_id}',
        ...options
    });
};

/**
 * Update Behavior
 * Update behavior with automatic session variables for RLS.
 */
export const updateBehaviorBehaviorsBehaviorIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateBehaviorBehaviorsBehaviorIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateBehaviorBehaviorsBehaviorIdPutResponses, UpdateBehaviorBehaviorsBehaviorIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/behaviors/{behavior_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Read Behavior Metrics
 * Get all metrics associated with a behavior
 */
export const readBehaviorMetricsBehaviorsBehaviorIdMetricsGet = <ThrowOnError extends boolean = false>(options: Options<ReadBehaviorMetricsBehaviorsBehaviorIdMetricsGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadBehaviorMetricsBehaviorsBehaviorIdMetricsGetResponses, ReadBehaviorMetricsBehaviorsBehaviorIdMetricsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/behaviors/{behavior_id}/metrics/',
        ...options
    });
};

/**
 * Remove Metric From Behavior
 * Remove a metric from a behavior
 */
export const removeMetricFromBehaviorBehaviorsBehaviorIdMetricsMetricIdDelete = <ThrowOnError extends boolean = false>(options: Options<RemoveMetricFromBehaviorBehaviorsBehaviorIdMetricsMetricIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<RemoveMetricFromBehaviorBehaviorsBehaviorIdMetricsMetricIdDeleteResponses, RemoveMetricFromBehaviorBehaviorsBehaviorIdMetricsMetricIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/behaviors/{behavior_id}/metrics/{metric_id}',
        ...options
    });
};

/**
 * Add Metric To Behavior
 * Add a metric to a behavior
 */
export const addMetricToBehaviorBehaviorsBehaviorIdMetricsMetricIdPost = <ThrowOnError extends boolean = false>(options: Options<AddMetricToBehaviorBehaviorsBehaviorIdMetricsMetricIdPostData, ThrowOnError>) => {
    return (options.client ?? client).post<AddMetricToBehaviorBehaviorsBehaviorIdMetricsMetricIdPostResponses, AddMetricToBehaviorBehaviorsBehaviorIdMetricsMetricIdPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/behaviors/{behavior_id}/metrics/{metric_id}',
        ...options
    });
};

/**
 * Read Categories
 * Get all categories with their related objects
 */
export const readCategoriesCategoriesGet = <ThrowOnError extends boolean = false>(options?: Options<ReadCategoriesCategoriesGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadCategoriesCategoriesGetResponses, ReadCategoriesCategoriesGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/categories/',
        ...options
    });
};

/**
 * Create Category
 * Create category with optimized approach supporting both RLS and explicit parameters.
 *
 * Performance improvements:
 * - Automatically sets PostgreSQL session variables for RLS policies
 * - Maintains explicit parameter passing for maximum compatibility
 * - Single database connection with optimized session variable caching
 * - Drop-in replacement requiring minimal code changes
 */
export const createCategoryCategoriesPost = <ThrowOnError extends boolean = false>(options: Options<CreateCategoryCategoriesPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateCategoryCategoriesPostResponses, CreateCategoryCategoriesPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/categories/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Category
 * Delete category with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during deletion
 * - Direct tenant context injection
 */
export const deleteCategoryCategoriesCategoryIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteCategoryCategoriesCategoryIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteCategoryCategoriesCategoryIdDeleteResponses, DeleteCategoryCategoriesCategoryIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/categories/{category_id}',
        ...options
    });
};

/**
 * Read Category
 * Get category with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during retrieval
 * - Direct tenant context injection
 */
export const readCategoryCategoriesCategoryIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadCategoryCategoriesCategoryIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadCategoryCategoriesCategoryIdGetResponses, ReadCategoryCategoriesCategoryIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/categories/{category_id}',
        ...options
    });
};

/**
 * Update Category
 * Update category with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during update
 * - Direct tenant context injection
 */
export const updateCategoryCategoriesCategoryIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateCategoryCategoriesCategoryIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateCategoryCategoriesCategoryIdPutResponses, UpdateCategoryCategoriesCategoryIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/categories/{category_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Read Comments
 * Get all comments with filtering and pagination - optimized approach.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - Direct tenant context injection
 */
export const readCommentsCommentsGet = <ThrowOnError extends boolean = false>(options?: Options<ReadCommentsCommentsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadCommentsCommentsGetResponses, ReadCommentsCommentsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/comments/',
        ...options
    });
};

/**
 * Create Comment
 * Create comment with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during entity creation
 * - Direct tenant context injection
 */
export const createCommentCommentsPost = <ThrowOnError extends boolean = false>(options: Options<CreateCommentCommentsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateCommentCommentsPostResponses, CreateCommentCommentsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/comments/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Comment
 * Delete comment with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during deletion
 * - Direct tenant context injection
 */
export const deleteCommentCommentsCommentIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteCommentCommentsCommentIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteCommentCommentsCommentIdDeleteResponses, DeleteCommentCommentsCommentIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/comments/{comment_id}',
        ...options
    });
};

/**
 * Read Comment
 * Get comment with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during retrieval
 * - Direct tenant context injection
 */
export const readCommentCommentsCommentIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadCommentCommentsCommentIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadCommentCommentsCommentIdGetResponses, ReadCommentCommentsCommentIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/comments/{comment_id}',
        ...options
    });
};

/**
 * Update Comment
 * Update comment with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during update
 * - Direct tenant context injection
 */
export const updateCommentCommentsCommentIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateCommentCommentsCommentIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateCommentCommentsCommentIdPutResponses, UpdateCommentCommentsCommentIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/comments/{comment_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Read Comments By Entity
 * Get all comments for a specific entity - optimized approach.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - Direct tenant context injection
 *
 * Supported entities: Test, TestSet, TestRun, TestResult, PromptTemplate,
 * Metric, Model, Prompt, Behavior, Category, Source
 */
export const readCommentsByEntityCommentsEntityEntityTypeEntityIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadCommentsByEntityCommentsEntityEntityTypeEntityIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadCommentsByEntityCommentsEntityEntityTypeEntityIdGetResponses, ReadCommentsByEntityCommentsEntityEntityTypeEntityIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/comments/entity/{entity_type}/{entity_id}',
        ...options
    });
};

/**
 * Remove Emoji Reaction
 * Remove an emoji reaction from a comment - optimized approach.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - Direct tenant context injection
 */
export const removeEmojiReactionCommentsCommentIdEmojiEmojiDelete = <ThrowOnError extends boolean = false>(options: Options<RemoveEmojiReactionCommentsCommentIdEmojiEmojiDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<RemoveEmojiReactionCommentsCommentIdEmojiEmojiDeleteResponses, RemoveEmojiReactionCommentsCommentIdEmojiEmojiDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/comments/{comment_id}/emoji/{emoji}',
        ...options
    });
};

/**
 * Add Emoji Reaction
 * ## Emoji Reactions Structure
 *
 * Emoji reactions are stored as JSON in the `emojis` field of each comment.
 * The structure is: {emoji_character: [list_of_user_reactions]}
 *
 * ### Example Comment Response:
 * ```json
 * {
 * "id": "uuid",
 * "content": "Great work on this test!",
 * "emojis": {
 * "🚀": [
 * {"user_id": "user-uuid-1", "user_name": "John Doe"},
 * {"user_id": "user-uuid-2", "user_name": "Jane Smith"}
 * ],
 * "👍": [
 * {"user_id": "user-uuid-3", "user_name": "Bob Wilson"}
 * ]
 * },
 * "entity_id": "test-uuid",
 * "entity_type": "Test",
 * "user_id": "author-uuid",
 * "organization_id": "org-uuid",
 * "created_at": "2024-01-01T12:00:00Z",
 * "updated_at": "2024-01-01T12:00:00Z"
 * }
 * ```
 *
 * ### Key Points:
 * - **Emoji Character**: The emoji itself (🚀, 👍, ❤️) is the dictionary key
 * - **User Reactions**: Each emoji maps to a list of users who reacted
 * - **User Data**: Each reaction includes `user_id` and `user_name`
 * - **No Duplicates**: A user can only react once per emoji per comment
 */
export const addEmojiReactionCommentsCommentIdEmojiEmojiPost = <ThrowOnError extends boolean = false>(options: Options<AddEmojiReactionCommentsCommentIdEmojiEmojiPostData, ThrowOnError>) => {
    return (options.client ?? client).post<AddEmojiReactionCommentsCommentIdEmojiEmojiPostResponses, AddEmojiReactionCommentsCommentIdEmojiEmojiPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/comments/{comment_id}/emoji/{emoji}',
        ...options
    });
};

/**
 * Read Demographics
 * Get all demographics with their related objects
 */
export const readDemographicsDemographicsGet = <ThrowOnError extends boolean = false>(options?: Options<ReadDemographicsDemographicsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadDemographicsDemographicsGetResponses, ReadDemographicsDemographicsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/demographics/',
        ...options
    });
};

/**
 * Create Demographic
 * Create demographic with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during entity creation
 * - Direct tenant context injection
 */
export const createDemographicDemographicsPost = <ThrowOnError extends boolean = false>(options: Options<CreateDemographicDemographicsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateDemographicDemographicsPostResponses, CreateDemographicDemographicsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/demographics/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Demographic
 */
export const deleteDemographicDemographicsDemographicIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteDemographicDemographicsDemographicIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteDemographicDemographicsDemographicIdDeleteResponses, DeleteDemographicDemographicsDemographicIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/demographics/{demographic_id}',
        ...options
    });
};

/**
 * Read Demographic
 */
export const readDemographicDemographicsDemographicIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadDemographicDemographicsDemographicIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadDemographicDemographicsDemographicIdGetResponses, ReadDemographicDemographicsDemographicIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/demographics/{demographic_id}',
        ...options
    });
};

/**
 * Update Demographic
 * Update demographic with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during update
 * - Direct tenant context injection
 */
export const updateDemographicDemographicsDemographicIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateDemographicDemographicsDemographicIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateDemographicDemographicsDemographicIdPutResponses, UpdateDemographicDemographicsDemographicIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/demographics/{demographic_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Read Dimensions
 * Get all dimensions with their related objects
 */
export const readDimensionsDimensionsGet = <ThrowOnError extends boolean = false>(options?: Options<ReadDimensionsDimensionsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadDimensionsDimensionsGetResponses, ReadDimensionsDimensionsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/dimensions/',
        ...options
    });
};

/**
 * Create Dimension
 * Create dimension with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during entity creation
 * - Direct tenant context injection
 */
export const createDimensionDimensionsPost = <ThrowOnError extends boolean = false>(options: Options<CreateDimensionDimensionsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateDimensionDimensionsPostResponses, CreateDimensionDimensionsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/dimensions/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Dimension
 */
export const deleteDimensionDimensionsDimensionIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteDimensionDimensionsDimensionIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteDimensionDimensionsDimensionIdDeleteResponses, DeleteDimensionDimensionsDimensionIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/dimensions/{dimension_id}',
        ...options
    });
};

/**
 * Read Dimension
 */
export const readDimensionDimensionsDimensionIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadDimensionDimensionsDimensionIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadDimensionDimensionsDimensionIdGetResponses, ReadDimensionDimensionsDimensionIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/dimensions/{dimension_id}',
        ...options
    });
};

/**
 * Update Dimension
 */
export const updateDimensionDimensionsDimensionIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateDimensionDimensionsDimensionIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateDimensionDimensionsDimensionIdPutResponses, UpdateDimensionDimensionsDimensionIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/dimensions/{dimension_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Read Endpoints
 * Get all endpoints with their related objects
 */
export const readEndpointsEndpointsGet = <ThrowOnError extends boolean = false>(options?: Options<ReadEndpointsEndpointsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadEndpointsEndpointsGetResponses, ReadEndpointsEndpointsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/endpoints/',
        ...options
    });
};

/**
 * Create Endpoint
 * Create endpoint with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during entity creation
 * - Direct tenant context injection
 */
export const createEndpointEndpointsPost = <ThrowOnError extends boolean = false>(options: Options<CreateEndpointEndpointsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateEndpointEndpointsPostResponses, CreateEndpointEndpointsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/endpoints/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Endpoint
 */
export const deleteEndpointEndpointsEndpointIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteEndpointEndpointsEndpointIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteEndpointEndpointsEndpointIdDeleteResponses, DeleteEndpointEndpointsEndpointIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/endpoints/{endpoint_id}',
        ...options
    });
};

/**
 * Read Endpoint
 */
export const readEndpointEndpointsEndpointIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadEndpointEndpointsEndpointIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadEndpointEndpointsEndpointIdGetResponses, ReadEndpointEndpointsEndpointIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/endpoints/{endpoint_id}',
        ...options
    });
};

/**
 * Update Endpoint
 */
export const updateEndpointEndpointsEndpointIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateEndpointEndpointsEndpointIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateEndpointEndpointsEndpointIdPutResponses, UpdateEndpointEndpointsEndpointIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/endpoints/{endpoint_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Invoke Endpoint
 * Invoke an endpoint with the given input data.
 *
 * Args:
 * endpoint_id: The UUID of the endpoint to invoke
 * input_data: Dictionary containing input data for the endpoint
 * db: Database session
 * endpoint_service: The endpoint service instance
 *
 * Returns:
 * The response from the endpoint, either mapped or raw depending on endpoint configuration
 */
export const invokeEndpointEndpointsEndpointIdInvokePost = <ThrowOnError extends boolean = false>(options: Options<InvokeEndpointEndpointsEndpointIdInvokePostData, ThrowOnError>) => {
    return (options.client ?? client).post<InvokeEndpointEndpointsEndpointIdInvokePostResponses, InvokeEndpointEndpointsEndpointIdInvokePostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/endpoints/{endpoint_id}/invoke',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Endpoint Schema
 * Get the endpoint schema definition.
 *
 * Args:
 * endpoint_service: The endpoint service instance
 *
 * Returns:
 * Dict containing the input and output schema definitions
 */
export const getEndpointSchemaEndpointsSchemaGet = <ThrowOnError extends boolean = false>(options?: Options<GetEndpointSchemaEndpointsSchemaGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetEndpointSchemaEndpointsSchemaGetResponses, GetEndpointSchemaEndpointsSchemaGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/endpoints/schema',
        ...options
    });
};

/**
 * Home
 */
export const homeHomeGet = <ThrowOnError extends boolean = false>(options?: Options<HomeHomeGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<HomeHomeGetResponses, unknown, ThrowOnError>({
        url: '/home/',
        ...options
    });
};

/**
 * Protected
 */
export const protectedHomeProtectedGet = <ThrowOnError extends boolean = false>(options?: Options<ProtectedHomeProtectedGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ProtectedHomeProtectedGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/home/protected',
        ...options
    });
};

/**
 * Read Metrics
 * Get all metrics with their related objects
 */
export const readMetricsMetricsGet = <ThrowOnError extends boolean = false>(options?: Options<ReadMetricsMetricsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadMetricsMetricsGetResponses, ReadMetricsMetricsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/metrics/',
        ...options
    });
};

/**
 * Create Metric
 * Create metric with super optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during entity creation
 * - Direct tenant context injection
 */
export const createMetricMetricsPost = <ThrowOnError extends boolean = false>(options: Options<CreateMetricMetricsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateMetricMetricsPostResponses, CreateMetricMetricsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/metrics/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Metric
 * Delete a metric
 */
export const deleteMetricMetricsMetricIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteMetricMetricsMetricIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteMetricMetricsMetricIdDeleteResponses, DeleteMetricMetricsMetricIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/metrics/{metric_id}',
        ...options
    });
};

/**
 * Read Metric
 * Get a specific metric by ID with its related objects
 */
export const readMetricMetricsMetricIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadMetricMetricsMetricIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadMetricMetricsMetricIdGetResponses, ReadMetricMetricsMetricIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/metrics/{metric_id}',
        ...options
    });
};

/**
 * Update Metric
 * Update a metric
 */
export const updateMetricMetricsMetricIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateMetricMetricsMetricIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateMetricMetricsMetricIdPutResponses, UpdateMetricMetricsMetricIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/metrics/{metric_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove Behavior From Metric
 * Remove a behavior from a metric
 */
export const removeBehaviorFromMetricMetricsMetricIdBehaviorsBehaviorIdDelete = <ThrowOnError extends boolean = false>(options: Options<RemoveBehaviorFromMetricMetricsMetricIdBehaviorsBehaviorIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<RemoveBehaviorFromMetricMetricsMetricIdBehaviorsBehaviorIdDeleteResponses, RemoveBehaviorFromMetricMetricsMetricIdBehaviorsBehaviorIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/metrics/{metric_id}/behaviors/{behavior_id}',
        ...options
    });
};

/**
 * Add Behavior To Metric
 * Add a behavior to a metric
 */
export const addBehaviorToMetricMetricsMetricIdBehaviorsBehaviorIdPost = <ThrowOnError extends boolean = false>(options: Options<AddBehaviorToMetricMetricsMetricIdBehaviorsBehaviorIdPostData, ThrowOnError>) => {
    return (options.client ?? client).post<AddBehaviorToMetricMetricsMetricIdBehaviorsBehaviorIdPostResponses, AddBehaviorToMetricMetricsMetricIdBehaviorsBehaviorIdPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/metrics/{metric_id}/behaviors/{behavior_id}',
        ...options
    });
};

/**
 * Read Metric Behaviors
 * Get all behaviors associated with a metric
 */
export const readMetricBehaviorsMetricsMetricIdBehaviorsGet = <ThrowOnError extends boolean = false>(options: Options<ReadMetricBehaviorsMetricsMetricIdBehaviorsGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadMetricBehaviorsMetricsMetricIdBehaviorsGetResponses, ReadMetricBehaviorsMetricsMetricIdBehaviorsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/metrics/{metric_id}/behaviors/',
        ...options
    });
};

/**
 * Read Models
 * Get all models with their related objects
 */
export const readModelsModelsGet = <ThrowOnError extends boolean = false>(options?: Options<ReadModelsModelsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadModelsModelsGetResponses, ReadModelsModelsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/models/',
        ...options
    });
};

/**
 * Create Model
 * Create model with super optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during entity creation
 * - Direct tenant context injection
 */
export const createModelModelsPost = <ThrowOnError extends boolean = false>(options: Options<CreateModelModelsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateModelModelsPostResponses, CreateModelModelsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/models/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Model
 * Delete a model
 */
export const deleteModelModelsModelIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteModelModelsModelIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteModelModelsModelIdDeleteResponses, DeleteModelModelsModelIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/models/{model_id}',
        ...options
    });
};

/**
 * Read Model
 * Get a specific model by ID
 */
export const readModelModelsModelIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadModelModelsModelIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadModelModelsModelIdGetResponses, ReadModelModelsModelIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/models/{model_id}',
        ...options
    });
};

/**
 * Update Model
 * Update model with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during update
 * - Direct tenant context injection
 */
export const updateModelModelsModelIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateModelModelsModelIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateModelModelsModelIdPutResponses, UpdateModelModelsModelIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/models/{model_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Test Model Connection
 * Test the connection to the model's endpoint
 */
export const testModelConnectionModelsModelIdTestPost = <ThrowOnError extends boolean = false>(options: Options<TestModelConnectionModelsModelIdTestPostData, ThrowOnError>) => {
    return (options.client ?? client).post<TestModelConnectionModelsModelIdTestPostResponses, TestModelConnectionModelsModelIdTestPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/models/{model_id}/test',
        ...options
    });
};

/**
 * Read Organizations
 * Get all organizations with their related objects
 */
export const readOrganizationsOrganizationsGet = <ThrowOnError extends boolean = false>(options?: Options<ReadOrganizationsOrganizationsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadOrganizationsOrganizationsGetResponses, ReadOrganizationsOrganizationsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organizations/',
        ...options
    });
};

/**
 * Create Organization
 */
export const createOrganizationOrganizationsPost = <ThrowOnError extends boolean = false>(options: Options<CreateOrganizationOrganizationsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateOrganizationOrganizationsPostResponses, CreateOrganizationOrganizationsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organizations/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Organization
 */
export const deleteOrganizationOrganizationsOrganizationIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteOrganizationOrganizationsOrganizationIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteOrganizationOrganizationsOrganizationIdDeleteResponses, DeleteOrganizationOrganizationsOrganizationIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}',
        ...options
    });
};

/**
 * Read Organization
 */
export const readOrganizationOrganizationsOrganizationIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadOrganizationOrganizationsOrganizationIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadOrganizationOrganizationsOrganizationIdGetResponses, ReadOrganizationOrganizationsOrganizationIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}',
        ...options
    });
};

/**
 * Update Organization
 */
export const updateOrganizationOrganizationsOrganizationIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateOrganizationOrganizationsOrganizationIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateOrganizationOrganizationsOrganizationIdPutResponses, UpdateOrganizationOrganizationsOrganizationIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Initialize Organization Data
 * Load initial data for an organization if onboarding is not complete.
 */
export const initializeOrganizationDataOrganizationsOrganizationIdLoadInitialDataPost = <ThrowOnError extends boolean = false>(options: Options<InitializeOrganizationDataOrganizationsOrganizationIdLoadInitialDataPostData, ThrowOnError>) => {
    return (options.client ?? client).post<InitializeOrganizationDataOrganizationsOrganizationIdLoadInitialDataPostResponses, InitializeOrganizationDataOrganizationsOrganizationIdLoadInitialDataPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/load-initial-data',
        ...options
    });
};

/**
 * Rollback Organization Data
 * Rollback initial data for an organization.
 */
export const rollbackOrganizationDataOrganizationsOrganizationIdRollbackInitialDataPost = <ThrowOnError extends boolean = false>(options: Options<RollbackOrganizationDataOrganizationsOrganizationIdRollbackInitialDataPostData, ThrowOnError>) => {
    return (options.client ?? client).post<RollbackOrganizationDataOrganizationsOrganizationIdRollbackInitialDataPostResponses, RollbackOrganizationDataOrganizationsOrganizationIdRollbackInitialDataPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/rollback-initial-data',
        ...options
    });
};

/**
 * Read Projects
 * Get all projects with their related objects
 */
export const readProjectsProjectsGet = <ThrowOnError extends boolean = false>(options?: Options<ReadProjectsProjectsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadProjectsProjectsGetResponses, ReadProjectsProjectsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/projects/',
        ...options
    });
};

/**
 * Create Project
 * Create project with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during entity creation
 * - Direct tenant context injection
 */
export const createProjectProjectsPost = <ThrowOnError extends boolean = false>(options: Options<CreateProjectProjectsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateProjectProjectsPostResponses, CreateProjectProjectsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/projects/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Project
 * Delete project with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during deletion
 * - Direct tenant context injection
 */
export const deleteProjectProjectsProjectIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectProjectsProjectIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteProjectProjectsProjectIdDeleteResponses, DeleteProjectProjectsProjectIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}',
        ...options
    });
};

/**
 * Read Project
 * Get project with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during retrieval
 * - Direct tenant context injection
 */
export const readProjectProjectsProjectIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadProjectProjectsProjectIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadProjectProjectsProjectIdGetResponses, ReadProjectProjectsProjectIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}',
        ...options
    });
};

/**
 * Update Project
 * Update project with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during update
 * - Direct tenant context injection
 */
export const updateProjectProjectsProjectIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateProjectProjectsProjectIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateProjectProjectsProjectIdPutResponses, UpdateProjectProjectsProjectIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Read Prompt Templates
 * Get all prompt templates with their related objects
 */
export const readPromptTemplatesPromptTemplatesGet = <ThrowOnError extends boolean = false>(options?: Options<ReadPromptTemplatesPromptTemplatesGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadPromptTemplatesPromptTemplatesGetResponses, ReadPromptTemplatesPromptTemplatesGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/prompt_templates/',
        ...options
    });
};

/**
 * Create Prompt Template
 * Create prompt template with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during entity creation
 * - Direct tenant context injection
 */
export const createPromptTemplatePromptTemplatesPost = <ThrowOnError extends boolean = false>(options: Options<CreatePromptTemplatePromptTemplatesPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreatePromptTemplatePromptTemplatesPostResponses, CreatePromptTemplatePromptTemplatesPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/prompt_templates/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Prompt Template
 */
export const deletePromptTemplatePromptTemplatesPromptTemplateIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeletePromptTemplatePromptTemplatesPromptTemplateIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeletePromptTemplatePromptTemplatesPromptTemplateIdDeleteResponses, DeletePromptTemplatePromptTemplatesPromptTemplateIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/prompt_templates/{prompt_template_id}',
        ...options
    });
};

/**
 * Read Prompt Template
 */
export const readPromptTemplatePromptTemplatesPromptTemplateIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadPromptTemplatePromptTemplatesPromptTemplateIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadPromptTemplatePromptTemplatesPromptTemplateIdGetResponses, ReadPromptTemplatePromptTemplatesPromptTemplateIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/prompt_templates/{prompt_template_id}',
        ...options
    });
};

/**
 * Update Prompt Template
 */
export const updatePromptTemplatePromptTemplatesPromptTemplateIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdatePromptTemplatePromptTemplatesPromptTemplateIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdatePromptTemplatePromptTemplatesPromptTemplateIdPutResponses, UpdatePromptTemplatePromptTemplatesPromptTemplateIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/prompt_templates/{prompt_template_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Read Prompts
 * Get all prompts with their related objects
 */
export const readPromptsPromptsGet = <ThrowOnError extends boolean = false>(options?: Options<ReadPromptsPromptsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadPromptsPromptsGetResponses, ReadPromptsPromptsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/prompts/',
        ...options
    });
};

/**
 * Create Prompt
 * Create prompt with super optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during entity creation
 * - Direct tenant context injection
 */
export const createPromptPromptsPost = <ThrowOnError extends boolean = false>(options: Options<CreatePromptPromptsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreatePromptPromptsPostResponses, CreatePromptPromptsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/prompts/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Prompt
 * Delete a prompt
 */
export const deletePromptPromptsPromptIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeletePromptPromptsPromptIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeletePromptPromptsPromptIdDeleteResponses, DeletePromptPromptsPromptIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/prompts/{prompt_id}',
        ...options
    });
};

/**
 * Read Prompt
 */
export const readPromptPromptsPromptIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadPromptPromptsPromptIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadPromptPromptsPromptIdGetResponses, ReadPromptPromptsPromptIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/prompts/{prompt_id}',
        ...options
    });
};

/**
 * Update Prompt
 * Update a prompt
 */
export const updatePromptPromptsPromptIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdatePromptPromptsPromptIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdatePromptPromptsPromptIdPutResponses, UpdatePromptPromptsPromptIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/prompts/{prompt_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Available Models
 * List all available models that can be managed (admin only).
 *
 * Returns:
 * List of model names and their details
 */
export const listAvailableModelsRecycleModelsGet = <ThrowOnError extends boolean = false>(options?: Options<ListAvailableModelsRecycleModelsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListAvailableModelsRecycleModelsGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/recycle/models',
        ...options
    });
};

/**
 * Get Recycled Records
 * Get soft-deleted records in the recycle bin for a specific model (admin only).
 *
 * Args:
 * model_name: Name of the model (e.g., 'user', 'test', 'project')
 * skip: Number of records to skip
 * limit: Maximum number of records to return
 * organization_id: Optional organization filter
 *
 * Returns:
 * List of soft-deleted records
 */
export const getRecycledRecordsRecycleModelNameGet = <ThrowOnError extends boolean = false>(options: Options<GetRecycledRecordsRecycleModelNameGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetRecycledRecordsRecycleModelNameGetResponses, GetRecycledRecordsRecycleModelNameGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/recycle/{model_name}',
        ...options
    });
};

/**
 * Restore From Recycle Bin
 * Restore a soft-deleted record from the recycle bin (admin only).
 *
 * Args:
 * model_name: Name of the model
 * item_id: ID of the record to restore
 * organization_id: Optional organization context
 *
 * Returns:
 * Restored record
 */
export const restoreFromRecycleBinRecycleModelNameItemIdRestorePost = <ThrowOnError extends boolean = false>(options: Options<RestoreFromRecycleBinRecycleModelNameItemIdRestorePostData, ThrowOnError>) => {
    return (options.client ?? client).post<RestoreFromRecycleBinRecycleModelNameItemIdRestorePostResponses, RestoreFromRecycleBinRecycleModelNameItemIdRestorePostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/recycle/{model_name}/{item_id}/restore',
        ...options
    });
};

/**
 * Permanently Delete Record
 * Permanently delete a record from the recycle bin (admin only).
 *
 * WARNING: This action cannot be undone! The record will be permanently
 * removed from the database.
 *
 * Args:
 * model_name: Name of the model
 * item_id: ID of the record to delete
 * confirm: Must be true to confirm permanent deletion
 * organization_id: Optional organization context
 *
 * Returns:
 * Success message
 */
export const permanentlyDeleteRecordRecycleModelNameItemIdDelete = <ThrowOnError extends boolean = false>(options: Options<PermanentlyDeleteRecordRecycleModelNameItemIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<PermanentlyDeleteRecordRecycleModelNameItemIdDeleteResponses, PermanentlyDeleteRecordRecycleModelNameItemIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/recycle/{model_name}/{item_id}',
        ...options
    });
};

/**
 * Get Recycle Bin Counts
 * Get counts of soft-deleted records in the recycle bin for all models (admin only).
 *
 * This can take a while for large databases as it queries every table.
 *
 * Args:
 * organization_id: Optional organization filter
 *
 * Returns:
 * Dictionary with counts per model
 */
export const getRecycleBinCountsRecycleStatsCountsGet = <ThrowOnError extends boolean = false>(options?: Options<GetRecycleBinCountsRecycleStatsCountsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetRecycleBinCountsRecycleStatsCountsGetResponses, GetRecycleBinCountsRecycleStatsCountsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/recycle/stats/counts',
        ...options
    });
};

/**
 * Bulk Restore From Recycle Bin
 * Restore multiple soft-deleted records from the recycle bin at once (admin only).
 *
 * Args:
 * model_name: Name of the model
 * item_ids: List of IDs to restore
 * organization_id: Optional organization context
 *
 * Returns:
 * Summary of restoration results
 */
export const bulkRestoreFromRecycleBinRecycleBulkRestoreModelNamePost = <ThrowOnError extends boolean = false>(options: Options<BulkRestoreFromRecycleBinRecycleBulkRestoreModelNamePostData, ThrowOnError>) => {
    return (options.client ?? client).post<BulkRestoreFromRecycleBinRecycleBulkRestoreModelNamePostResponses, BulkRestoreFromRecycleBinRecycleBulkRestoreModelNamePostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/recycle/bulk-restore/{model_name}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Empty Recycle Bin For Model
 * Empty the recycle bin for a specific model - permanently delete ALL soft-deleted records (admin only).
 *
 * WARNING: This action cannot be undone! All soft-deleted records will be
 * permanently removed from the database.
 *
 * Args:
 * model_name: Name of the model
 * confirm: Must be true to confirm permanent deletion
 * organization_id: Optional organization filter (only delete from this org)
 *
 * Returns:
 * Count of permanently deleted records
 */
export const emptyRecycleBinForModelRecycleEmptyModelNameDelete = <ThrowOnError extends boolean = false>(options: Options<EmptyRecycleBinForModelRecycleEmptyModelNameDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<EmptyRecycleBinForModelRecycleEmptyModelNameDeleteResponses, EmptyRecycleBinForModelRecycleEmptyModelNameDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/recycle/empty/{model_name}',
        ...options
    });
};

/**
 * Read Response Patterns
 * Get all response patterns with their related objects
 */
export const readResponsePatternsResponsePatternsGet = <ThrowOnError extends boolean = false>(options?: Options<ReadResponsePatternsResponsePatternsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadResponsePatternsResponsePatternsGetResponses, ReadResponsePatternsResponsePatternsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/response_patterns/',
        ...options
    });
};

/**
 * Create Response Pattern
 * Create response pattern with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during entity creation
 * - Direct tenant context injection
 */
export const createResponsePatternResponsePatternsPost = <ThrowOnError extends boolean = false>(options: Options<CreateResponsePatternResponsePatternsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateResponsePatternResponsePatternsPostResponses, CreateResponsePatternResponsePatternsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/response_patterns/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Response Pattern
 */
export const deleteResponsePatternResponsePatternsResponsePatternIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteResponsePatternResponsePatternsResponsePatternIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteResponsePatternResponsePatternsResponsePatternIdDeleteResponses, DeleteResponsePatternResponsePatternsResponsePatternIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/response_patterns/{response_pattern_id}',
        ...options
    });
};

/**
 * Read Response Pattern
 */
export const readResponsePatternResponsePatternsResponsePatternIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadResponsePatternResponsePatternsResponsePatternIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadResponsePatternResponsePatternsResponsePatternIdGetResponses, ReadResponsePatternResponsePatternsResponsePatternIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/response_patterns/{response_pattern_id}',
        ...options
    });
};

/**
 * Update Response Pattern
 */
export const updateResponsePatternResponsePatternsResponsePatternIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateResponsePatternResponsePatternsResponsePatternIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateResponsePatternResponsePatternsResponsePatternIdPutResponses, UpdateResponsePatternResponsePatternsResponsePatternIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/response_patterns/{response_pattern_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Read Risks
 * Get all risks with their related objects
 */
export const readRisksRisksGet = <ThrowOnError extends boolean = false>(options?: Options<ReadRisksRisksGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadRisksRisksGetResponses, ReadRisksRisksGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/risks/',
        ...options
    });
};

/**
 * Create Risk
 * Create risk with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during entity creation
 * - Direct tenant context injection
 */
export const createRiskRisksPost = <ThrowOnError extends boolean = false>(options: Options<CreateRiskRisksPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateRiskRisksPostResponses, CreateRiskRisksPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/risks/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Risk
 */
export const deleteRiskRisksRiskIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteRiskRisksRiskIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteRiskRisksRiskIdDeleteResponses, DeleteRiskRisksRiskIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/risks/{risk_id}',
        ...options
    });
};

/**
 * Read Risk
 */
export const readRiskRisksRiskIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadRiskRisksRiskIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadRiskRisksRiskIdGetResponses, ReadRiskRisksRiskIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/risks/{risk_id}',
        ...options
    });
};

/**
 * Update Risk
 * Update risk with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during update
 * - Direct tenant context injection
 */
export const updateRiskRisksRiskIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateRiskRisksRiskIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateRiskRisksRiskIdPutResponses, UpdateRiskRisksRiskIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/risks/{risk_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Github Contents
 * Get the contents of a GitHub repository.
 */
export const getGithubContentsServicesGithubContentsGet = <ThrowOnError extends boolean = false>(options: Options<GetGithubContentsServicesGithubContentsGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetGithubContentsServicesGithubContentsGetResponses, GetGithubContentsServicesGithubContentsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/services/github/contents',
        ...options
    });
};

/**
 * Get Ai Json Response
 * Get a JSON response from the LLM (SSE if `stream=True`).
 */
export const getAiJsonResponseServicesOpenaiJsonPost = <ThrowOnError extends boolean = false>(options: Options<GetAiJsonResponseServicesOpenaiJsonPostData, ThrowOnError>) => {
    return (options.client ?? client).post<GetAiJsonResponseServicesOpenaiJsonPostResponses, GetAiJsonResponseServicesOpenaiJsonPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/services/openai/json',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Ai Chat Response
 * Chat endpoint:
 * - SSE stream when `stream=True`
 * - JSON shape (LLM-structured) OR TextResponse when not streaming
 */
export const getAiChatResponseServicesOpenaiChatPost = <ThrowOnError extends boolean = false>(options: Options<GetAiChatResponseServicesOpenaiChatPostData, ThrowOnError>) => {
    return (options.client ?? client).post<GetAiChatResponseServicesOpenaiChatPostResponses, GetAiChatResponseServicesOpenaiChatPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/services/openai/chat',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create Chat Completion Endpoint
 * OpenAI-compatible Chat Completions API (SSE if `stream=True`).
 */
export const createChatCompletionEndpointServicesChatCompletionsPost = <ThrowOnError extends boolean = false>(options: Options<CreateChatCompletionEndpointServicesChatCompletionsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateChatCompletionEndpointServicesChatCompletionsPostResponses, CreateChatCompletionEndpointServicesChatCompletionsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/services/chat/completions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Generate Content Endpoint
 * Generate text using the LLM; if `schema_` is provided, returns validated JSON.
 */
export const generateContentEndpointServicesGenerateContentPost = <ThrowOnError extends boolean = false>(options: Options<GenerateContentEndpointServicesGenerateContentPostData, ThrowOnError>) => {
    return (options.client ?? client).post<GenerateContentEndpointServicesGenerateContentPostResponses, GenerateContentEndpointServicesGenerateContentPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/services/generate/content',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Generate Tests Endpoint
 * Generate test cases using the prompt synthesizer.
 */
export const generateTestsEndpointServicesGenerateTestsPost = <ThrowOnError extends boolean = false>(options: Options<GenerateTestsEndpointServicesGenerateTestsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<GenerateTestsEndpointServicesGenerateTestsPostResponses, GenerateTestsEndpointServicesGenerateTestsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/services/generate/tests',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Generate Text
 * Generate raw text from a prompt:
 * - SSE stream when `stream=True`
 * - TextResponse JSON otherwise
 */
export const generateTextServicesGenerateTextPost = <ThrowOnError extends boolean = false>(options: Options<GenerateTextServicesGenerateTextPostData, ThrowOnError>) => {
    return (options.client ?? client).post<GenerateTextServicesGenerateTextPostResponses, GenerateTextServicesGenerateTextPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/services/generate/text',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Upload Document
 */
export const uploadDocumentServicesDocumentsUploadPost = <ThrowOnError extends boolean = false>(options: Options<UploadDocumentServicesDocumentsUploadPostData, ThrowOnError>) => {
    return (options.client ?? client).post<UploadDocumentServicesDocumentsUploadPostResponses, UploadDocumentServicesDocumentsUploadPostErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/services/documents/upload',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Extract Document Content
 * Extract text content from an uploaded document.
 */
export const extractDocumentContentServicesDocumentsExtractPost = <ThrowOnError extends boolean = false>(options: Options<ExtractDocumentContentServicesDocumentsExtractPostData, ThrowOnError>) => {
    return (options.client ?? client).post<ExtractDocumentContentServicesDocumentsExtractPostResponses, ExtractDocumentContentServicesDocumentsExtractPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/services/documents/extract',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Generate Test Config
 * Generate test configuration JSON based on user description.
 */
export const generateTestConfigServicesGenerateTestConfigPost = <ThrowOnError extends boolean = false>(options: Options<GenerateTestConfigServicesGenerateTestConfigPostData, ThrowOnError>) => {
    return (options.client ?? client).post<GenerateTestConfigServicesGenerateTestConfigPostResponses, GenerateTestConfigServicesGenerateTestConfigPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/services/generate/test_config',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Read Sources
 * Get all sources with their related objects
 */
export const readSourcesSourcesGet = <ThrowOnError extends boolean = false>(options?: Options<ReadSourcesSourcesGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadSourcesSourcesGetResponses, ReadSourcesSourcesGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/sources/',
        ...options
    });
};

/**
 * Create Source
 * Create source with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during entity creation
 * - Direct tenant context injection
 */
export const createSourceSourcesPost = <ThrowOnError extends boolean = false>(options: Options<CreateSourceSourcesPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateSourceSourcesPostResponses, CreateSourceSourcesPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/sources/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Source
 * Delete source with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during deletion
 * - Direct tenant context injection
 */
export const deleteSourceSourcesSourceIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteSourceSourcesSourceIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteSourceSourcesSourceIdDeleteResponses, DeleteSourceSourcesSourceIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/sources/{source_id}',
        ...options
    });
};

/**
 * Read Source
 * Get source with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during retrieval
 * - Direct tenant context injection
 */
export const readSourceSourcesSourceIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadSourceSourcesSourceIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadSourceSourcesSourceIdGetResponses, ReadSourceSourcesSourceIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/sources/{source_id}',
        ...options
    });
};

/**
 * Update Source
 * Update source with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during update
 * - Direct tenant context injection
 */
export const updateSourceSourcesSourceIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateSourceSourcesSourceIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateSourceSourcesSourceIdPutResponses, UpdateSourceSourcesSourceIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/sources/{source_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Read Statuses
 * Get all statuses with their related objects
 */
export const readStatusesStatusesGet = <ThrowOnError extends boolean = false>(options?: Options<ReadStatusesStatusesGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadStatusesStatusesGetResponses, ReadStatusesStatusesGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/statuses/',
        ...options
    });
};

/**
 * Create Status
 * Create status with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during entity creation
 * - Direct tenant context injection
 */
export const createStatusStatusesPost = <ThrowOnError extends boolean = false>(options: Options<CreateStatusStatusesPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateStatusStatusesPostResponses, CreateStatusStatusesPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/statuses/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Status
 * Delete status with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during deletion
 * - Direct tenant context injection
 */
export const deleteStatusStatusesStatusIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteStatusStatusesStatusIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteStatusStatusesStatusIdDeleteResponses, DeleteStatusStatusesStatusIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/statuses/{status_id}',
        ...options
    });
};

/**
 * Read Status
 * Get status with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during retrieval
 * - Direct tenant context injection
 */
export const readStatusStatusesStatusIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadStatusStatusesStatusIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadStatusStatusesStatusIdGetResponses, ReadStatusStatusesStatusIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/statuses/{status_id}',
        ...options
    });
};

/**
 * Update Status
 * Update status with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during update
 * - Direct tenant context injection
 */
export const updateStatusStatusesStatusIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateStatusStatusesStatusIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateStatusStatusesStatusIdPutResponses, UpdateStatusStatusesStatusIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/statuses/{status_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Read Tags
 * Get all tags with their related objects
 */
export const readTagsTagsGet = <ThrowOnError extends boolean = false>(options?: Options<ReadTagsTagsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadTagsTagsGetResponses, ReadTagsTagsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tags/',
        ...options
    });
};

/**
 * Create Tag
 * Create tag with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during entity creation
 * - Direct tenant context injection
 */
export const createTagTagsPost = <ThrowOnError extends boolean = false>(options: Options<CreateTagTagsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateTagTagsPostResponses, CreateTagTagsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tags/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Tag
 * Delete tag with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during deletion
 * - Direct tenant context injection
 */
export const deleteTagTagsTagIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteTagTagsTagIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteTagTagsTagIdDeleteResponses, DeleteTagTagsTagIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tags/{tag_id}',
        ...options
    });
};

/**
 * Read Tag
 * Get tag with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during retrieval
 * - Direct tenant context injection
 */
export const readTagTagsTagIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadTagTagsTagIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadTagTagsTagIdGetResponses, ReadTagTagsTagIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tags/{tag_id}',
        ...options
    });
};

/**
 * Update Tag
 * Update tag with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during update
 * - Direct tenant context injection
 */
export const updateTagTagsTagIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateTagTagsTagIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateTagTagsTagIdPutResponses, UpdateTagTagsTagIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tags/{tag_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Assign Tag To Entity
 * Assign a tag to a specific entity
 */
export const assignTagToEntityTagsEntityTypeEntityIdPost = <ThrowOnError extends boolean = false>(options: Options<AssignTagToEntityTagsEntityTypeEntityIdPostData, ThrowOnError>) => {
    return (options.client ?? client).post<AssignTagToEntityTagsEntityTypeEntityIdPostResponses, AssignTagToEntityTagsEntityTypeEntityIdPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tags/{entity_type}/{entity_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove Tag From Entity
 * Remove a tag from a specific entity
 */
export const removeTagFromEntityTagsEntityTypeEntityIdTagIdDelete = <ThrowOnError extends boolean = false>(options: Options<RemoveTagFromEntityTagsEntityTypeEntityIdTagIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<RemoveTagFromEntityTagsEntityTypeEntityIdTagIdDeleteResponses, RemoveTagFromEntityTagsEntityTypeEntityIdTagIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tags/{entity_type}/{entity_id}/{tag_id}',
        ...options
    });
};

/**
 * List Tasks
 * List tasks with filtering, sorting, and comment counts
 */
export const listTasksTasksGet = <ThrowOnError extends boolean = false>(options?: Options<ListTasksTasksGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListTasksTasksGetResponses, ListTasksTasksGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tasks/',
        ...options
    });
};

/**
 * Create Task
 * Create a new task
 */
export const createTaskTasksPost = <ThrowOnError extends boolean = false>(options: Options<CreateTaskTasksPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateTaskTasksPostResponses, CreateTaskTasksPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tasks/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Task
 * Delete a task
 */
export const deleteTaskTasksTaskIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteTaskTasksTaskIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteTaskTasksTaskIdDeleteResponses, DeleteTaskTasksTaskIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tasks/{task_id}',
        ...options
    });
};

/**
 * Get Task
 * Get a single task by ID
 */
export const getTaskTasksTaskIdGet = <ThrowOnError extends boolean = false>(options: Options<GetTaskTasksTaskIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetTaskTasksTaskIdGetResponses, GetTaskTasksTaskIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tasks/{task_id}',
        ...options
    });
};

/**
 * Update Task
 * Update a task
 */
export const updateTaskTasksTaskIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateTaskTasksTaskIdPatchData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateTaskTasksTaskIdPatchResponses, UpdateTaskTasksTaskIdPatchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tasks/{task_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Tasks By Entity
 * Get tasks by entity type and entity ID
 */
export const getTasksByEntityTasksEntityTypeEntityIdGet = <ThrowOnError extends boolean = false>(options: Options<GetTasksByEntityTasksEntityTypeEntityIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetTasksByEntityTasksEntityTypeEntityIdGetResponses, GetTasksByEntityTasksEntityTypeEntityIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tasks/{entity_type}/{entity_id}',
        ...options
    });
};

/**
 * Read Test Contexts
 * Get all test contexts or filter by test_id
 */
export const readTestContextsTestContextsGet = <ThrowOnError extends boolean = false>(options?: Options<ReadTestContextsTestContextsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadTestContextsTestContextsGetResponses, ReadTestContextsTestContextsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test-contexts/',
        ...options
    });
};

/**
 * Create Test Context
 * Create test context with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during entity creation
 * - Direct tenant context injection
 */
export const createTestContextTestContextsPost = <ThrowOnError extends boolean = false>(options: Options<CreateTestContextTestContextsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateTestContextTestContextsPostResponses, CreateTestContextTestContextsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test-contexts/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Test Context
 * Delete a test context
 */
export const deleteTestContextTestContextsTestContextIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteTestContextTestContextsTestContextIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteTestContextTestContextsTestContextIdDeleteResponses, DeleteTestContextTestContextsTestContextIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test-contexts/{test_context_id}',
        ...options
    });
};

/**
 * Read Test Context
 * Get a specific test context by ID
 */
export const readTestContextTestContextsTestContextIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadTestContextTestContextsTestContextIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadTestContextTestContextsTestContextIdGetResponses, ReadTestContextTestContextsTestContextIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test-contexts/{test_context_id}',
        ...options
    });
};

/**
 * Update Test Context
 * Update test_context with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during update
 * - Direct tenant context injection
 */
export const updateTestContextTestContextsTestContextIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateTestContextTestContextsTestContextIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateTestContextTestContextsTestContextIdPutResponses, UpdateTestContextTestContextsTestContextIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test-contexts/{test_context_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Read Test Configurations
 * Get all test configurations with their related objects
 */
export const readTestConfigurationsTestConfigurationsGet = <ThrowOnError extends boolean = false>(options?: Options<ReadTestConfigurationsTestConfigurationsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadTestConfigurationsTestConfigurationsGetResponses, ReadTestConfigurationsTestConfigurationsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test_configurations/',
        ...options
    });
};

/**
 * Create Test Configuration
 * Create test configuration with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during entity creation
 * - Direct tenant context injection
 */
export const createTestConfigurationTestConfigurationsPost = <ThrowOnError extends boolean = false>(options: Options<CreateTestConfigurationTestConfigurationsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateTestConfigurationTestConfigurationsPostResponses, CreateTestConfigurationTestConfigurationsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test_configurations/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Test Configuration
 * Delete a test configuration
 */
export const deleteTestConfigurationTestConfigurationsTestConfigurationIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteTestConfigurationTestConfigurationsTestConfigurationIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteTestConfigurationTestConfigurationsTestConfigurationIdDeleteResponses, DeleteTestConfigurationTestConfigurationsTestConfigurationIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test_configurations/{test_configuration_id}',
        ...options
    });
};

/**
 * Read Test Configuration
 * Get a specific test configuration by ID with its related objects
 */
export const readTestConfigurationTestConfigurationsTestConfigurationIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadTestConfigurationTestConfigurationsTestConfigurationIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadTestConfigurationTestConfigurationsTestConfigurationIdGetResponses, ReadTestConfigurationTestConfigurationsTestConfigurationIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test_configurations/{test_configuration_id}',
        ...options
    });
};

/**
 * Update Test Configuration
 * Update test_configuration with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during update
 * - Direct tenant context injection
 */
export const updateTestConfigurationTestConfigurationsTestConfigurationIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateTestConfigurationTestConfigurationsTestConfigurationIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateTestConfigurationTestConfigurationsTestConfigurationIdPutResponses, UpdateTestConfigurationTestConfigurationsTestConfigurationIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test_configurations/{test_configuration_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Execute Test Configuration Endpoint
 * Execute a test configuration by running its test set.
 */
export const executeTestConfigurationEndpointTestConfigurationsTestConfigurationIdExecutePost = <ThrowOnError extends boolean = false>(options: Options<ExecuteTestConfigurationEndpointTestConfigurationsTestConfigurationIdExecutePostData, ThrowOnError>) => {
    return (options.client ?? client).post<ExecuteTestConfigurationEndpointTestConfigurationsTestConfigurationIdExecutePostResponses, ExecuteTestConfigurationEndpointTestConfigurationsTestConfigurationIdExecutePostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test_configurations/{test_configuration_id}/execute',
        ...options
    });
};

/**
 * Read Test Results
 * Get all test results
 */
export const readTestResultsTestResultsGet = <ThrowOnError extends boolean = false>(options?: Options<ReadTestResultsTestResultsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadTestResultsTestResultsGetResponses, ReadTestResultsTestResultsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test_results/',
        ...options
    });
};

/**
 * Create Test Result
 * Create test result with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during entity creation
 * - Direct tenant context injection
 */
export const createTestResultTestResultsPost = <ThrowOnError extends boolean = false>(options: Options<CreateTestResultTestResultsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateTestResultTestResultsPostResponses, CreateTestResultTestResultsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test_results/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Generate Test Result Stats
 * Get test result statistics with configurable data modes for optimal performance
 *
 * ## Available Modes
 *
 * ### Performance-Optimized Modes (recommended for specific use cases):
 *
 * **`summary`** - Ultra-lightweight (~5% of full data size)
 * - Returns: `overall_pass_rates` + `metadata`
 * - Use case: Dashboard widgets, quick overviews
 * - Response time: ~50ms
 *
 * **`metrics`** - Individual metric analysis (~20% of full data size)
 * - Returns: `metric_pass_rates` + `metadata`
 * - Contains: Pass/fail rates for Answer Fluency, Answer Relevancy, Contextual Recall, etc.
 * - Use case: Metric-focused charts, AI model performance analysis
 *
 * **`behavior`** - Test behavior analysis (~15% of full data size)
 * - Returns: `behavior_pass_rates` + `metadata`
 * - Contains: Pass/fail rates grouped by test behavior (Factual Accuracy, Reasoning, etc.)
 * - Use case: Behavior performance charts, test strategy optimization
 *
 * **`category`** - Test category analysis (~15% of full data size)
 * - Returns: `category_pass_rates` + `metadata`
 * - Contains: Pass/fail rates grouped by test category (RAG Systems, Chatbots, etc.)
 * - Use case: Category performance comparison, domain-specific analysis
 *
 * **`topic`** - Test topic analysis (~15% of full data size)
 * - Returns: `topic_pass_rates` + `metadata`
 * - Contains: Pass/fail rates grouped by topic (Healthcare, Finance, Technology, etc.)
 * - Use case: Topic performance insights, domain expertise evaluation
 *
 * **`overall`** - High-level overview (~10% of full data size)
 * - Returns: `overall_pass_rates` + `metadata`
 * - Contains: Aggregate pass/fail rates (test passes only if ALL metrics pass)
 * - Use case: Executive dashboards, KPI tracking
 *
 * **`timeline`** - Trend analysis (~40% of full data size)
 * - Returns: `timeline` + `metadata`
 * - Contains: Monthly pass/fail rates over time with metric breakdowns
 * - Use case: Trend charts, historical analysis, progress tracking
 *
 * **`test_runs`** - Test run comparison (~30% of full data size)
 * - Returns: `test_run_summary` + `metadata`
 * - Contains: Pass/fail rates grouped by individual test runs
 * - Use case: Test run comparison, execution analysis
 *
 * ### Complete Dataset Mode:
 *
 * **`all`** - Complete dataset (default, full data size)
 * - Returns: All sections above combined
 * - Use case: Comprehensive dashboards, full analytics
 * - Response time: ~200-500ms depending on data volume
 */
export const generateTestResultStatsTestResultsStatsGet = <ThrowOnError extends boolean = false>(options?: Options<GenerateTestResultStatsTestResultsStatsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GenerateTestResultStatsTestResultsStatsGetResponses, GenerateTestResultStatsTestResultsStatsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test_results/stats',
        ...options
    });
};

/**
 * Delete Test Result
 * Delete a test result
 */
export const deleteTestResultTestResultsTestResultIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteTestResultTestResultsTestResultIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteTestResultTestResultsTestResultIdDeleteResponses, DeleteTestResultTestResultsTestResultIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test_results/{test_result_id}',
        ...options
    });
};

/**
 * Read Test Result
 * Get a specific test result by ID
 */
export const readTestResultTestResultsTestResultIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadTestResultTestResultsTestResultIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadTestResultTestResultsTestResultIdGetResponses, ReadTestResultTestResultsTestResultIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test_results/{test_result_id}',
        ...options
    });
};

/**
 * Update Test Result
 * Update test_result with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during update
 * - Direct tenant context injection
 */
export const updateTestResultTestResultsTestResultIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateTestResultTestResultsTestResultIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateTestResultTestResultsTestResultIdPutResponses, UpdateTestResultTestResultsTestResultIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test_results/{test_result_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Read Test Runs
 * Get all test runs with their related objects
 */
export const readTestRunsTestRunsGet = <ThrowOnError extends boolean = false>(options?: Options<ReadTestRunsTestRunsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadTestRunsTestRunsGetResponses, ReadTestRunsTestRunsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test_runs/',
        ...options
    });
};

/**
 * Create Test Run
 * Create test run with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during entity creation
 * - Direct tenant context injection
 */
export const createTestRunTestRunsPost = <ThrowOnError extends boolean = false>(options: Options<CreateTestRunTestRunsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateTestRunTestRunsPostResponses, CreateTestRunTestRunsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test_runs/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Generate Test Run Stats
 * Get test run statistics with configurable data modes for optimal performance
 *
 * (See docstring in source for full details)
 */
export const generateTestRunStatsTestRunsStatsGet = <ThrowOnError extends boolean = false>(options?: Options<GenerateTestRunStatsTestRunsStatsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GenerateTestRunStatsTestRunsStatsGetResponses, GenerateTestRunStatsTestRunsStatsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test_runs/stats',
        ...options
    });
};

/**
 * Delete Test Run
 * Delete a test run
 */
export const deleteTestRunTestRunsTestRunIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteTestRunTestRunsTestRunIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteTestRunTestRunsTestRunIdDeleteResponses, DeleteTestRunTestRunsTestRunIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test_runs/{test_run_id}',
        ...options
    });
};

/**
 * Read Test Run
 * Get a specific test run by ID with its related objects
 */
export const readTestRunTestRunsTestRunIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadTestRunTestRunsTestRunIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadTestRunTestRunsTestRunIdGetResponses, ReadTestRunTestRunsTestRunIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test_runs/{test_run_id}',
        ...options
    });
};

/**
 * Update Test Run
 * Update test_run with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during update
 * - Direct tenant context injection
 */
export const updateTestRunTestRunsTestRunIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateTestRunTestRunsTestRunIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateTestRunTestRunsTestRunIdPutResponses, UpdateTestRunTestRunsTestRunIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test_runs/{test_run_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Test Run Behaviors
 * Get behaviors that have test results for this test run with organization filtering
 */
export const getTestRunBehaviorsTestRunsTestRunIdBehaviorsGet = <ThrowOnError extends boolean = false>(options: Options<GetTestRunBehaviorsTestRunsTestRunIdBehaviorsGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetTestRunBehaviorsTestRunsTestRunIdBehaviorsGetResponses, GetTestRunBehaviorsTestRunsTestRunIdBehaviorsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test_runs/{test_run_id}/behaviors',
        ...options
    });
};

/**
 * Download Test Run Results
 * Download test run results as CSV
 */
export const downloadTestRunResultsTestRunsTestRunIdDownloadGet = <ThrowOnError extends boolean = false>(options: Options<DownloadTestRunResultsTestRunsTestRunIdDownloadGetData, ThrowOnError>) => {
    return (options.client ?? client).get<DownloadTestRunResultsTestRunsTestRunIdDownloadGetResponses, DownloadTestRunResultsTestRunsTestRunIdDownloadGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test_runs/{test_run_id}/download',
        ...options
    });
};

/**
 * Generate Test Set
 */
export const generateTestSetTestSetsGeneratePost = <ThrowOnError extends boolean = false>(options: Options<GenerateTestSetTestSetsGeneratePostData, ThrowOnError>) => {
    return (options.client ?? client).post<GenerateTestSetTestSetsGeneratePostResponses, GenerateTestSetTestSetsGeneratePostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test_sets/generate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create Test Set Bulk
 */
export const createTestSetBulkTestSetsBulkPost = <ThrowOnError extends boolean = false>(options: Options<CreateTestSetBulkTestSetsBulkPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateTestSetBulkTestSetsBulkPostResponses, CreateTestSetBulkTestSetsBulkPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test_sets/bulk',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Read Test Sets
 */
export const readTestSetsTestSetsGet = <ThrowOnError extends boolean = false>(options?: Options<ReadTestSetsTestSetsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadTestSetsTestSetsGetResponses, ReadTestSetsTestSetsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test_sets/',
        ...options
    });
};

/**
 * Create Test Set
 */
export const createTestSetTestSetsPost = <ThrowOnError extends boolean = false>(options: Options<CreateTestSetTestSetsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateTestSetTestSetsPostResponses, CreateTestSetTestSetsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test_sets/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Generate Test Set Stats
 */
export const generateTestSetStatsTestSetsStatsGet = <ThrowOnError extends boolean = false>(options?: Options<GenerateTestSetStatsTestSetsStatsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GenerateTestSetStatsTestSetsStatsGetResponses, GenerateTestSetStatsTestSetsStatsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test_sets/stats',
        ...options
    });
};

/**
 * Read Test Set
 */
export const readTestSetTestSetsTestSetIdentifierGet = <ThrowOnError extends boolean = false>(options: Options<ReadTestSetTestSetsTestSetIdentifierGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadTestSetTestSetsTestSetIdentifierGetResponses, ReadTestSetTestSetsTestSetIdentifierGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test_sets/{test_set_identifier}',
        ...options
    });
};

/**
 * Delete Test Set
 */
export const deleteTestSetTestSetsTestSetIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteTestSetTestSetsTestSetIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteTestSetTestSetsTestSetIdDeleteResponses, DeleteTestSetTestSetsTestSetIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test_sets/{test_set_id}',
        ...options
    });
};

/**
 * Update Test Set
 */
export const updateTestSetTestSetsTestSetIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateTestSetTestSetsTestSetIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateTestSetTestSetsTestSetIdPutResponses, UpdateTestSetTestSetsTestSetIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test_sets/{test_set_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Download Test Set Prompts
 */
export const downloadTestSetPromptsTestSetsTestSetIdentifierDownloadGet = <ThrowOnError extends boolean = false>(options: Options<DownloadTestSetPromptsTestSetsTestSetIdentifierDownloadGetData, ThrowOnError>) => {
    return (options.client ?? client).get<DownloadTestSetPromptsTestSetsTestSetIdentifierDownloadGetResponses, DownloadTestSetPromptsTestSetsTestSetIdentifierDownloadGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test_sets/{test_set_identifier}/download',
        ...options
    });
};

/**
 * Download Test Set Prompts Csv
 */
export const downloadTestSetPromptsCsvTestSetsTestSetIdentifierPromptsDownloadGet = <ThrowOnError extends boolean = false>(options: Options<DownloadTestSetPromptsCsvTestSetsTestSetIdentifierPromptsDownloadGetData, ThrowOnError>) => {
    return (options.client ?? client).get<DownloadTestSetPromptsCsvTestSetsTestSetIdentifierPromptsDownloadGetResponses, DownloadTestSetPromptsCsvTestSetsTestSetIdentifierPromptsDownloadGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test_sets/{test_set_identifier}/prompts/download',
        ...options
    });
};

/**
 * Get Test Set Prompts
 */
export const getTestSetPromptsTestSetsTestSetIdentifierPromptsGet = <ThrowOnError extends boolean = false>(options: Options<GetTestSetPromptsTestSetsTestSetIdentifierPromptsGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetTestSetPromptsTestSetsTestSetIdentifierPromptsGetResponses, GetTestSetPromptsTestSetsTestSetIdentifierPromptsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test_sets/{test_set_identifier}/prompts',
        ...options
    });
};

/**
 * Get Test Set Tests
 */
export const getTestSetTestsTestSetsTestSetIdentifierTestsGet = <ThrowOnError extends boolean = false>(options: Options<GetTestSetTestsTestSetsTestSetIdentifierTestsGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetTestSetTestsTestSetsTestSetIdentifierTestsGetResponses, GetTestSetTestsTestSetsTestSetIdentifierTestsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test_sets/{test_set_identifier}/tests',
        ...options
    });
};

/**
 * Execute Test Set
 * Submit a test set for execution against an endpoint.
 */
export const executeTestSetTestSetsTestSetIdentifierExecuteEndpointIdPost = <ThrowOnError extends boolean = false>(options: Options<ExecuteTestSetTestSetsTestSetIdentifierExecuteEndpointIdPostData, ThrowOnError>) => {
    return (options.client ?? client).post<ExecuteTestSetTestSetsTestSetIdentifierExecuteEndpointIdPostResponses, ExecuteTestSetTestSetsTestSetIdentifierExecuteEndpointIdPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test_sets/{test_set_identifier}/execute/{endpoint_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Generate Test Set Test Stats
 */
export const generateTestSetTestStatsTestSetsTestSetIdentifierStatsGet = <ThrowOnError extends boolean = false>(options: Options<GenerateTestSetTestStatsTestSetsTestSetIdentifierStatsGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GenerateTestSetTestStatsTestSetsTestSetIdentifierStatsGetResponses, GenerateTestSetTestStatsTestSetsTestSetIdentifierStatsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test_sets/{test_set_identifier}/stats',
        ...options
    });
};

/**
 * Associate Tests With Test Set
 */
export const associateTestsWithTestSetTestSetsTestSetIdAssociatePost = <ThrowOnError extends boolean = false>(options: Options<AssociateTestsWithTestSetTestSetsTestSetIdAssociatePostData, ThrowOnError>) => {
    return (options.client ?? client).post<AssociateTestsWithTestSetTestSetsTestSetIdAssociatePostResponses, AssociateTestsWithTestSetTestSetsTestSetIdAssociatePostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test_sets/{test_set_id}/associate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Disassociate Tests From Test Set
 */
export const disassociateTestsFromTestSetTestSetsTestSetIdDisassociatePost = <ThrowOnError extends boolean = false>(options: Options<DisassociateTestsFromTestSetTestSetsTestSetIdDisassociatePostData, ThrowOnError>) => {
    return (options.client ?? client).post<DisassociateTestsFromTestSetTestSetsTestSetIdDisassociatePostResponses, DisassociateTestsFromTestSetTestSetsTestSetIdDisassociatePostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test_sets/{test_set_id}/disassociate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Read Tests
 * Get all tests with their related objects
 */
export const readTestsTestsGet = <ThrowOnError extends boolean = false>(options?: Options<ReadTestsTestsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadTestsTestsGetResponses, ReadTestsTestsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tests/',
        ...options
    });
};

/**
 * Create Test
 * Create test with super optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during entity creation
 * - Direct tenant context injection
 */
export const createTestTestsPost = <ThrowOnError extends boolean = false>(options: Options<CreateTestTestsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateTestTestsPostResponses, CreateTestTestsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tests/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create Tests Bulk
 * Create multiple tests in a single operation.
 *
 * The input format should be:
 * {
 * "tests": [
 * {
 * "prompt": {
 * "content": "Prompt text",
 * "language_code": "en",
 * "demographic": "Optional demographic",
 * "dimension": "Optional dimension",
 * "expected_response": "Optional expected response"
 * },
 * "behavior": "Behavior name",
 * "category": "Category name",
 * "topic": "Topic name",
 * "test_configuration": {},  # Optional test configuration
 * "assignee_id": "uuid",  # Optional assignee ID
 * "owner_id": "uuid",  # Optional owner ID
 * "status": "string",    # Optional status name
 * "priority": "number"   # Optional priority value
 * }
 * ],
 * "test_set_id": "optional-uuid"  # Optional test set ID to associate tests with
 * }
 *
 * Returns:
 * 200: Tests created successfully
 * 400: Invalid request format or validation error
 * 404: Referenced entity not found
 * 500: Server error during processing
 */
export const createTestsBulkTestsBulkPost = <ThrowOnError extends boolean = false>(options: Options<CreateTestsBulkTestsBulkPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateTestsBulkTestsBulkPostResponses, CreateTestsBulkTestsBulkPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tests/bulk',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Generate Test Stats
 * Get statistics about tests
 */
export const generateTestStatsTestsStatsGet = <ThrowOnError extends boolean = false>(options?: Options<GenerateTestStatsTestsStatsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GenerateTestStatsTestsStatsGetResponses, GenerateTestStatsTestsStatsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tests/stats',
        ...options
    });
};

/**
 * Get Individual Test Statistics
 * Get comprehensive statistics for a specific test across all its test runs.
 *
 * Provides:
 * - Overall pass/fail statistics
 * - Per-metric breakdown of success rates
 * - Recent test run details with per-metric results
 * - Average execution time
 *
 * Query Parameters:
 * - recent_runs_limit: Number of recent test runs to include (default: 5)
 * - months: Filter to last N months of data (optional)
 * - start_date: Custom start date in ISO format (optional, overrides months)
 * - end_date: Custom end date in ISO format (optional, overrides months)
 *
 * Example usage:
 * - GET /tests/{test_id}/stats
 * - GET /tests/{test_id}/stats?recent_runs_limit=10
 * - GET /tests/{test_id}/stats?months=3
 * - GET /tests/{test_id}/stats?start_date=2024-01-01&end_date=2024-12-31
 */
export const getIndividualTestStatisticsTestsTestIdStatsGet = <ThrowOnError extends boolean = false>(options: Options<GetIndividualTestStatisticsTestsTestIdStatsGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetIndividualTestStatisticsTestsTestIdStatsGetResponses, GetIndividualTestStatisticsTestsTestIdStatsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tests/{test_id}/stats',
        ...options
    });
};

/**
 * Delete Test
 * Delete a test
 */
export const deleteTestTestsTestIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteTestTestsTestIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteTestTestsTestIdDeleteResponses, DeleteTestTestsTestIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tests/{test_id}',
        ...options
    });
};

/**
 * Read Test
 * Get a specific test by ID with its related objects
 */
export const readTestTestsTestIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadTestTestsTestIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadTestTestsTestIdGetResponses, ReadTestTestsTestIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tests/{test_id}',
        ...options
    });
};

/**
 * Update Test
 * Update test with optimized approach - no session variables needed.
 *
 * Performance improvements:
 * - Completely bypasses database session variables
 * - No SET LOCAL commands needed
 * - No SHOW queries during update
 * - Direct tenant context injection
 */
export const updateTestTestsTestIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateTestTestsTestIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateTestTestsTestIdPutResponses, UpdateTestTestsTestIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tests/{test_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Read Tokens
 * List all active API tokens for the current user.
 */
export const readTokensTokensGet = <ThrowOnError extends boolean = false>(options?: Options<ReadTokensTokensGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadTokensTokensGetResponses, ReadTokensTokensGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tokens/',
        ...options
    });
};

/**
 * Create Token
 * Create a new API token for the current user.
 */
export const createTokenTokensPost = <ThrowOnError extends boolean = false>(options: Options<CreateTokenTokensPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateTokenTokensPostResponses, CreateTokenTokensPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tokens/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Token
 * Revoke (delete) a token.
 */
export const deleteTokenTokensTokenIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteTokenTokensTokenIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteTokenTokensTokenIdDeleteResponses, DeleteTokenTokensTokenIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tokens/{token_id}',
        ...options
    });
};

/**
 * Read Token
 * Get a specific token by ID.
 */
export const readTokenTokensTokenIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadTokenTokensTokenIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadTokenTokensTokenIdGetResponses, ReadTokenTokensTokenIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tokens/{token_id}',
        ...options
    });
};

/**
 * Update Token
 * Update token metadata (e.g., name or expiry).
 */
export const updateTokenTokensTokenIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateTokenTokensTokenIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateTokenTokensTokenIdPutResponses, UpdateTokenTokensTokenIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tokens/{token_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Refresh Token
 * Refresh a token with a new value (rotate the secret) and optional new expiration.
 */
export const refreshTokenTokensTokenIdRefreshPost = <ThrowOnError extends boolean = false>(options: Options<RefreshTokenTokensTokenIdRefreshPostData, ThrowOnError>) => {
    return (options.client ?? client).post<RefreshTokenTokensTokenIdRefreshPostResponses, RefreshTokenTokensTokenIdRefreshPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tokens/{token_id}/refresh',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Read Topics
 * Get all topics with their related objects
 */
export const readTopicsTopicsGet = <ThrowOnError extends boolean = false>(options?: Options<ReadTopicsTopicsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadTopicsTopicsGetResponses, ReadTopicsTopicsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/topics/',
        ...options
    });
};

/**
 * Create Topic
 * Create topic with optimized approach - no session variables needed.
 */
export const createTopicTopicsPost = <ThrowOnError extends boolean = false>(options: Options<CreateTopicTopicsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateTopicTopicsPostResponses, CreateTopicTopicsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/topics/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Topic
 * Delete a topic.
 */
export const deleteTopicTopicsTopicIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteTopicTopicsTopicIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteTopicTopicsTopicIdDeleteResponses, DeleteTopicTopicsTopicIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/topics/{topic_id}',
        ...options
    });
};

/**
 * Read Topic
 * Get a single topic by ID.
 */
export const readTopicTopicsTopicIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadTopicTopicsTopicIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadTopicTopicsTopicIdGetResponses, ReadTopicTopicsTopicIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/topics/{topic_id}',
        ...options
    });
};

/**
 * Update Topic
 * Update topic with optimized approach - no session variables needed.
 */
export const updateTopicTopicsTopicIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateTopicTopicsTopicIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateTopicTopicsTopicIdPutResponses, UpdateTopicTopicsTopicIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/topics/{topic_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Read Type Lookups
 * Get all type lookups with their related objects
 */
export const readTypeLookupsTypeLookupsGet = <ThrowOnError extends boolean = false>(options?: Options<ReadTypeLookupsTypeLookupsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadTypeLookupsTypeLookupsGetResponses, ReadTypeLookupsTypeLookupsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/type_lookups/',
        ...options
    });
};

/**
 * Create Type Lookup
 * Create type lookup with optimized approach - no session variables needed.
 */
export const createTypeLookupTypeLookupsPost = <ThrowOnError extends boolean = false>(options: Options<CreateTypeLookupTypeLookupsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateTypeLookupTypeLookupsPostResponses, CreateTypeLookupTypeLookupsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/type_lookups/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Type Lookup
 * Delete a type lookup with tenant scoping.
 */
export const deleteTypeLookupTypeLookupsTypeLookupIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteTypeLookupTypeLookupsTypeLookupIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteTypeLookupTypeLookupsTypeLookupIdDeleteResponses, DeleteTypeLookupTypeLookupsTypeLookupIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/type_lookups/{type_lookup_id}',
        ...options
    });
};

/**
 * Read Type Lookup
 * Get a single type lookup by ID with tenant scoping.
 */
export const readTypeLookupTypeLookupsTypeLookupIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadTypeLookupTypeLookupsTypeLookupIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadTypeLookupTypeLookupsTypeLookupIdGetResponses, ReadTypeLookupTypeLookupsTypeLookupIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/type_lookups/{type_lookup_id}',
        ...options
    });
};

/**
 * Update Type Lookup
 * Update a type lookup with tenant scoping.
 */
export const updateTypeLookupTypeLookupsTypeLookupIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateTypeLookupTypeLookupsTypeLookupIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateTypeLookupTypeLookupsTypeLookupIdPutResponses, UpdateTypeLookupTypeLookupsTypeLookupIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/type_lookups/{type_lookup_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Read Use Cases
 * Get all use cases with their related objects
 */
export const readUseCasesUseCasesGet = <ThrowOnError extends boolean = false>(options?: Options<ReadUseCasesUseCasesGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadUseCasesUseCasesGetResponses, ReadUseCasesUseCasesGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/use_cases/',
        ...options
    });
};

/**
 * Create Use Case
 * Create use case with optimized approach - no session variables needed.
 */
export const createUseCaseUseCasesPost = <ThrowOnError extends boolean = false>(options: Options<CreateUseCaseUseCasesPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateUseCaseUseCasesPostResponses, CreateUseCaseUseCasesPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/use_cases/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Use Case
 * Delete a use case with tenant scoping.
 */
export const deleteUseCaseUseCasesUseCaseIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteUseCaseUseCasesUseCaseIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteUseCaseUseCasesUseCaseIdDeleteResponses, DeleteUseCaseUseCasesUseCaseIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/use_cases/{use_case_id}',
        ...options
    });
};

/**
 * Read Use Case
 * Get a single use case by ID with tenant scoping.
 */
export const readUseCaseUseCasesUseCaseIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadUseCaseUseCasesUseCaseIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadUseCaseUseCasesUseCaseIdGetResponses, ReadUseCaseUseCasesUseCaseIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/use_cases/{use_case_id}',
        ...options
    });
};

/**
 * Update Use Case
 * Update a use case with tenant scoping.
 */
export const updateUseCaseUseCasesUseCaseIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateUseCaseUseCasesUseCaseIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateUseCaseUseCasesUseCaseIdPutResponses, UpdateUseCaseUseCasesUseCaseIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/use_cases/{use_case_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Read Users
 * Get all users for the tenant with filtering and paging.
 */
export const readUsersUsersGet = <ThrowOnError extends boolean = false>(options?: Options<ReadUsersUsersGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadUsersUsersGetResponses, ReadUsersUsersGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/',
        ...options
    });
};

/**
 * Create User
 * Invite or create a user within the current user's organization.
 * - If a user with the same email exists but has no organization, re-invite (re-attach) them.
 * - If they belong to another organization, return 409.
 */
export const createUserUsersPost = <ThrowOnError extends boolean = false>(options: Options<CreateUserUsersPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateUserUsersPostResponses, CreateUserUsersPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete User
 * Delete a user (superusers only, tenant-scoped).
 */
export const deleteUserUsersUserIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteUserUsersUserIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteUserUsersUserIdDeleteResponses, DeleteUserUsersUserIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{user_id}',
        ...options
    });
};

/**
 * Read User
 * Get a specific user by ID (tenant-scoped).
 */
export const readUserUsersUserIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadUserUsersUserIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadUserUsersUserIdGetResponses, ReadUserUsersUserIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{user_id}',
        ...options
    });
};

/**
 * Update User
 * Update a user profile. If the current user updates their own profile, include a new session token.
 *
 * Returns:
 * UserUpdateResponse: {"user": User, "session_token": str | None}
 */
export const updateUserUsersUserIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateUserUsersUserIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateUserUsersUserIdPutResponses, UpdateUserUsersUserIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{user_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Leave Organization
 * Allow the current user to leave their organization (sets organization_id to NULL).
 */
export const leaveOrganizationUsersLeaveOrganizationPatch = <ThrowOnError extends boolean = false>(options?: Options<LeaveOrganizationUsersLeaveOrganizationPatchData, ThrowOnError>) => {
    return (options?.client ?? client).patch<LeaveOrganizationUsersLeaveOrganizationPatchResponses, LeaveOrganizationUsersLeaveOrganizationPatchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/leave-organization',
        ...options
    });
};

/**
 * Root
 * Welcome endpoint with API status
 */
export const rootGet = <ThrowOnError extends boolean = false>(options?: Options<RootGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<RootGetResponses, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};
