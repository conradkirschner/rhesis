// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};

/**
 * APIUsage
 */
export type ApiUsage = {
    filtering: ApiUsageFiltering;
};

/**
 * APIUsageFiltering
 */
export type ApiUsageFiltering = {
    /**
     * Note
     */
    note: string;
    example: ApiUsageFilteringExample;
};

/**
 * APIUsageFilteringExample
 */
export type ApiUsageFilteringExample = {
    /**
     * Encoded
     */
    encoded: string;
    /**
     * Unencoded
     */
    unencoded: string;
    /**
     * Note
     */
    note: string;
};

/**
 * ActionResponse
 */
export type ActionResponse = {
    /**
     * Status
     */
    status: string;
    /**
     * Message
     */
    message: string;
};

/**
 * ApiKeyAuth
 */
export type ApiKeyAuth = {
    /**
     * Type
     */
    type: 'api_key';
    /**
     * Location
     */
    location?: 'header' | 'query' | 'cookie';
    /**
     * Name
     */
    name: string;
    /**
     * Value
     */
    value: string;
};

/**
 * AuthLinks
 */
export type AuthLinks = {
    /**
     * Login
     */
    login: string;
    /**
     * Callback
     */
    callback: string;
    /**
     * Logout
     */
    logout: string;
};

/**
 * BasicAuth
 */
export type BasicAuth = {
    /**
     * Type
     */
    type: 'basic';
    /**
     * Username
     */
    username: string;
    /**
     * Password
     */
    password: string;
};

/**
 * BearerAuth
 */
export type BearerAuth = {
    /**
     * Type
     */
    type: 'bearer';
    /**
     * Token
     */
    token?: string | null;
};

/**
 * Behavior
 */
export type Behavior = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
};

/**
 * BehaviorCreate
 */
export type BehaviorCreate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
};

/**
 * BehaviorReference
 */
export type BehaviorReference = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    counts?: CountsDict | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
};

/**
 * BehaviorUpdate
 */
export type BehaviorUpdate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
};

/**
 * Body_upload_document_services_documents_upload_post
 */
export type BodyUploadDocumentServicesDocumentsUploadPost = {
    /**
     * Document
     */
    document: Blob | File;
};

/**
 * BulkRestoreResponse
 */
export type BulkRestoreResponse = {
    /**
     * Message
     */
    message: string;
    summary: BulkRestoreSummary;
    results: BulkRestoreResults;
};

/**
 * BulkRestoreResults
 */
export type BulkRestoreResults = {
    /**
     * Restored
     */
    restored: Array<string>;
    /**
     * Failed
     */
    failed: Array<FailedItem>;
    /**
     * Not Found
     */
    not_found: Array<string>;
};

/**
 * BulkRestoreSummary
 */
export type BulkRestoreSummary = {
    /**
     * Total Requested
     */
    total_requested: number;
    /**
     * Restored
     */
    restored: number;
    /**
     * Failed
     */
    failed: number;
    /**
     * Not Found
     */
    not_found: number;
};

/**
 * Category
 */
export type Category = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Parent Id
     */
    parent_id?: string | null;
    /**
     * Entity Type Id
     */
    entity_type_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
};

/**
 * CategoryCreate
 */
export type CategoryCreate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Parent Id
     */
    parent_id?: string | null;
    /**
     * Entity Type Id
     */
    entity_type_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
};

/**
 * CategoryDetail
 */
export type CategoryDetail = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Parent Id
     */
    parent_id?: string | null;
    /**
     * Entity Type Id
     */
    entity_type_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    counts?: CountsDict | null;
    status?: StatusReference | null;
    parent?: CategoryReference | null;
    entity_type?: TypeLookupReference | null;
    organization?: OrganizationReference | null;
    user?: UserReference | null;
};

/**
 * CategoryReference
 */
export type CategoryReference = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    counts?: CountsDict | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
};

/**
 * CategoryUpdate
 */
export type CategoryUpdate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Parent Id
     */
    parent_id?: string | null;
    /**
     * Entity Type Id
     */
    entity_type_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
};

/**
 * ChatRequest
 */
export type ChatRequest = {
    /**
     * Messages
     */
    messages: Array<Message>;
    /**
     * Response Format
     */
    response_format?: string | null;
    /**
     * Stream
     */
    stream?: boolean;
};

/**
 * Comment
 * Full Comment schema with all fields
 */
export type Comment = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
    /**
     * Content
     * The comment content
     */
    content: string;
    /**
     * Emojis
     * Emoji reactions stored as {emoji_character: [list_of_user_reactions]}. Example: {'üöÄ': [{'user_id': 'uuid1', 'user_name': 'John'}], 'üëç': [{'user_id': 'uuid2', 'user_name': 'Jane'}]}
     */
    emojis?: {
        [key: string]: Array<EmojiReaction>;
    };
    /**
     * Entity Id
     * ID of the entity this comment belongs to
     */
    entity_id: string;
    /**
     * Type of entity: 'Test', 'TestSet', 'TestRun', 'TestResult', 'Metric', 'Model', 'Prompt', 'Behavior', 'Category', 'Task', 'Source'
     */
    entity_type: EntityType;
    /**
     * User Id
     */
    user_id: string;
    user: User;
    /**
     * Organization Id
     */
    organization_id?: string | null;
};

/**
 * CommentCreate
 * Schema for creating a new comment
 */
export type CommentCreate = {
    /**
     * Content
     * The comment content
     */
    content: string;
    /**
     * Entity Id
     * ID of the entity this comment belongs to
     */
    entity_id: string;
    /**
     * Type of entity: 'Test', 'TestSet', 'TestRun', 'TestResult', 'Metric', 'Model', 'Prompt', 'Behavior', 'Category', 'Task', 'Source'
     */
    entity_type: EntityType;
};

/**
 * CommentDetail
 */
export type CommentDetail = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id: string | null;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
    /**
     * Content
     */
    content?: string | null;
    /**
     * Emojis
     * Emoji reactions stored as {emoji_character: [list_of_user_reactions]}. Example: {'üöÄ': [{'user_id': 'uuid1', 'user_name': 'John'}], 'üëç': [{'user_id': 'uuid2', 'user_name': 'Jane'}]}
     */
    emojis?: {
        [key: string]: Array<EmojiReaction>;
    };
    /**
     * Entity Id
     * ID of the entity this comment belongs to
     */
    entity_id: string;
    /**
     * Type of entity: 'Test', 'TestSet', 'TestRun', 'TestResult', 'Metric', 'Model', 'Prompt', 'Behavior', 'Category', 'Task', 'Source'
     */
    entity_type: EntityType;
    /**
     * User Id
     */
    user_id?: string | null;
    user?: UserReference | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    organization?: OrganizationReference | null;
};

/**
 * CommentUpdate
 * Schema for updating an existing comment
 */
export type CommentUpdate = {
    /**
     * Content
     */
    content?: string | null;
};

/**
 * CountEntryError
 */
export type CountEntryError = {
    /**
     * Count
     */
    count: string;
    /**
     * Error
     */
    error: string;
};

/**
 * CountEntryOk
 */
export type CountEntryOk = {
    /**
     * Count
     */
    count: number;
    /**
     * Class Name
     */
    class_name: string;
    /**
     * Has More
     */
    has_more: boolean;
};

/**
 * CountsDict
 */
export type CountsDict = {
    /**
     * Comments
     */
    comments?: number;
    /**
     * Tasks
     */
    tasks?: number;
};

/**
 * Demographic
 */
export type Demographic = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Dimension Id
     */
    dimension_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
};

/**
 * DemographicCreate
 */
export type DemographicCreate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Dimension Id
     */
    dimension_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
};

/**
 * DemographicUpdate
 */
export type DemographicUpdate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Dimension Id
     */
    dimension_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
};

/**
 * Dimension
 */
export type Dimension = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
};

/**
 * DimensionCreate
 */
export type DimensionCreate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
};

/**
 * DimensionStats
 */
export type DimensionStats = {
    /**
     * Dimension
     */
    dimension: string;
    /**
     * Total
     */
    total: number;
    /**
     * Breakdown
     */
    breakdown: {
        [key: string]: number;
    };
};

/**
 * DimensionUpdate
 */
export type DimensionUpdate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
};

/**
 * Document
 */
export type Document = {
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description: string;
    /**
     * Path
     */
    path?: string | null;
    /**
     * Content
     */
    content?: string | null;
};

/**
 * DocumentUploadResponse
 */
export type DocumentUploadResponse = {
    /**
     * Path
     */
    path: string;
};

/**
 * EmojiReaction
 * Schema for individual emoji reaction by a user
 *
 * Note: The emoji itself is stored as the dictionary key in the Comment.emojis field.
 * This schema represents the user data associated with each emoji reaction.
 */
export type EmojiReaction = {
    /**
     * User Id
     * User ID who reacted with this emoji
     */
    user_id: string;
    /**
     * User Name
     * User's display name
     */
    user_name: string;
};

/**
 * EmptyRecycleBinResponse
 */
export type EmptyRecycleBinResponse = {
    /**
     * Message
     */
    message: string;
    /**
     * Permanently Deleted
     */
    permanently_deleted: number;
    /**
     * Failed
     */
    failed: number;
    /**
     * Warning
     */
    warning: string;
};

/**
 * Endpoint
 */
export type Endpoint = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    protocol: EndpointProtocol;
    /**
     * Url
     */
    url: string;
    /**
     * Auth
     */
    auth?: ({
        type: 'none';
    } & NoneAuth) | ({
        type: 'bearer';
    } & BearerAuth) | ({
        type: 'api_key';
    } & ApiKeyAuth) | ({
        type: 'basic';
    } & BasicAuth) | ({
        type: 'oauth2_client_credentials';
    } & OAuth2ClientCredentialsOutput) | null;
    environment?: EndpointEnvironment;
    config_source?: EndpointConfigSource;
    /**
     * Openapi Spec Url
     */
    openapi_spec_url?: string | null;
    openapi_spec?: OpenApiSpecModelOutput | null;
    llm_suggestions?: LlmSuggestionsModelOutput | null;
    /**
     * Method
     */
    method?: string | null;
    /**
     * Endpoint Path
     */
    endpoint_path?: string | null;
    /**
     * Request Headers
     */
    request_headers?: {
        [key: string]: string;
    } | null;
    /**
     * Query Params
     */
    query_params?: {
        [key: string]: JsonOutput;
    } | null;
    /**
     * Request Body Template
     */
    request_body_template?: {
        [key: string]: JsonOutput;
    } | null;
    /**
     * Input Mappings
     */
    input_mappings?: {
        [key: string]: JsonOutput;
    } | null;
    response_format?: EndpointResponseFormat;
    /**
     * Response Mappings
     */
    response_mappings?: {
        [key: string]: string;
    } | null;
    /**
     * Validation Rules
     */
    validation_rules?: {
        [key: string]: JsonOutput;
    } | null;
    /**
     * Project Id
     */
    project_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    auth_type?: EndpointAuthType | null;
    /**
     * Auth Token
     */
    auth_token?: string | null;
    /**
     * Client Id
     */
    client_id?: string | null;
    /**
     * Client Secret
     */
    client_secret?: string | null;
    /**
     * Token Url
     */
    token_url?: string | null;
    /**
     * Scopes
     */
    scopes?: Array<string> | null;
    /**
     * Audience
     */
    audience?: string | null;
    /**
     * Extra Payload
     */
    extra_payload?: {
        [key: string]: JsonOutput;
    } | null;
    /**
     * Last Token
     */
    last_token?: string | null;
    /**
     * Last Token Expires At
     */
    last_token_expires_at?: string | null;
};

/**
 * EndpointAuthType
 */
export type EndpointAuthType = 'bearer_token' | 'client_credentials';

/**
 * EndpointConfigSource
 */
export type EndpointConfigSource = 'manual' | 'openapi' | 'llm_generated';

/**
 * EndpointCreate
 */
export type EndpointCreate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    protocol: EndpointProtocol;
    /**
     * Url
     */
    url: string;
    /**
     * Auth
     */
    auth?: ({
        type: 'none';
    } & NoneAuth) | ({
        type: 'bearer';
    } & BearerAuth) | ({
        type: 'api_key';
    } & ApiKeyAuth) | ({
        type: 'basic';
    } & BasicAuth) | ({
        type: 'oauth2_client_credentials';
    } & OAuth2ClientCredentialsInput) | null;
    environment?: EndpointEnvironment;
    config_source?: EndpointConfigSource;
    /**
     * Openapi Spec Url
     */
    openapi_spec_url?: string | null;
    openapi_spec?: OpenApiSpecModelInput | null;
    llm_suggestions?: LlmSuggestionsModelInput | null;
    /**
     * Method
     */
    method?: string | null;
    /**
     * Endpoint Path
     */
    endpoint_path?: string | null;
    /**
     * Request Headers
     */
    request_headers?: {
        [key: string]: string;
    } | null;
    /**
     * Query Params
     */
    query_params?: {
        [key: string]: JsonInput;
    } | null;
    /**
     * Request Body Template
     */
    request_body_template?: {
        [key: string]: JsonInput;
    } | null;
    /**
     * Input Mappings
     */
    input_mappings?: {
        [key: string]: JsonInput;
    } | null;
    response_format?: EndpointResponseFormat;
    /**
     * Response Mappings
     */
    response_mappings?: {
        [key: string]: string;
    } | null;
    /**
     * Validation Rules
     */
    validation_rules?: {
        [key: string]: JsonInput;
    } | null;
    /**
     * Project Id
     */
    project_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    auth_type?: EndpointAuthType | null;
    /**
     * Auth Token
     */
    auth_token?: string | null;
    /**
     * Client Id
     */
    client_id?: string | null;
    /**
     * Client Secret
     */
    client_secret?: string | null;
    /**
     * Token Url
     */
    token_url?: string | null;
    /**
     * Scopes
     */
    scopes?: Array<string> | null;
    /**
     * Audience
     */
    audience?: string | null;
    /**
     * Extra Payload
     */
    extra_payload?: {
        [key: string]: JsonInput;
    } | null;
    /**
     * Last Token
     */
    last_token?: string | null;
    /**
     * Last Token Expires At
     */
    last_token_expires_at?: string | null;
};

/**
 * EndpointDetail
 */
export type EndpointDetail = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    protocol: EndpointProtocol;
    /**
     * Url
     */
    url: string;
    /**
     * Auth
     */
    auth?: ({
        type: 'none';
    } & NoneAuth) | ({
        type: 'bearer';
    } & BearerAuth) | ({
        type: 'api_key';
    } & ApiKeyAuth) | ({
        type: 'basic';
    } & BasicAuth) | ({
        type: 'oauth2_client_credentials';
    } & OAuth2ClientCredentialsOutput) | null;
    environment?: EndpointEnvironment;
    config_source?: EndpointConfigSource;
    /**
     * Openapi Spec Url
     */
    openapi_spec_url?: string | null;
    openapi_spec?: OpenApiSpecModelOutput | null;
    llm_suggestions?: LlmSuggestionsModelOutput | null;
    /**
     * Method
     */
    method?: string | null;
    /**
     * Endpoint Path
     */
    endpoint_path?: string | null;
    /**
     * Request Headers
     */
    request_headers?: {
        [key: string]: string;
    } | null;
    /**
     * Query Params
     */
    query_params?: {
        [key: string]: JsonOutput;
    } | null;
    /**
     * Request Body Template
     */
    request_body_template?: {
        [key: string]: JsonOutput;
    } | null;
    /**
     * Input Mappings
     */
    input_mappings?: {
        [key: string]: JsonOutput;
    } | null;
    response_format?: EndpointResponseFormat;
    /**
     * Response Mappings
     */
    response_mappings?: {
        [key: string]: string;
    } | null;
    /**
     * Validation Rules
     */
    validation_rules?: {
        [key: string]: JsonOutput;
    } | null;
    /**
     * Project Id
     */
    project_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    auth_type?: EndpointAuthType | null;
    /**
     * Auth Token
     */
    auth_token?: string | null;
    /**
     * Client Id
     */
    client_id?: string | null;
    /**
     * Client Secret
     */
    client_secret?: string | null;
    /**
     * Token Url
     */
    token_url?: string | null;
    /**
     * Scopes
     */
    scopes?: Array<string> | null;
    /**
     * Audience
     */
    audience?: string | null;
    /**
     * Extra Payload
     */
    extra_payload?: {
        [key: string]: JsonOutput;
    } | null;
    /**
     * Last Token
     */
    last_token?: string | null;
    /**
     * Last Token Expires At
     */
    last_token_expires_at?: string | null;
    /**
     * Tags
     */
    tags?: Array<TagRead> | null;
    status?: StatusReference | null;
    user?: UserReference | null;
    organization?: OrganizationReference | null;
    project?: ProjectReference | null;
};

/**
 * EndpointEnvironment
 */
export type EndpointEnvironment = 'production' | 'staging' | 'development';

/**
 * EndpointProtocol
 */
export type EndpointProtocol = 'REST' | 'WebSocket' | 'GRPC';

/**
 * EndpointResponseFormat
 */
export type EndpointResponseFormat = 'json' | 'xml' | 'text';

/**
 * EndpointUpdate
 */
export type EndpointUpdate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    protocol?: EndpointProtocol | null;
    /**
     * Url
     */
    url?: string | null;
    /**
     * Auth
     */
    auth?: ({
        type: 'none';
    } & NoneAuth) | ({
        type: 'bearer';
    } & BearerAuth) | ({
        type: 'api_key';
    } & ApiKeyAuth) | ({
        type: 'basic';
    } & BasicAuth) | ({
        type: 'oauth2_client_credentials';
    } & OAuth2ClientCredentialsInput) | null;
    environment?: EndpointEnvironment;
    config_source?: EndpointConfigSource;
    /**
     * Openapi Spec Url
     */
    openapi_spec_url?: string | null;
    openapi_spec?: OpenApiSpecModelInput | null;
    llm_suggestions?: LlmSuggestionsModelInput | null;
    /**
     * Method
     */
    method?: string | null;
    /**
     * Endpoint Path
     */
    endpoint_path?: string | null;
    /**
     * Request Headers
     */
    request_headers?: {
        [key: string]: string;
    } | null;
    /**
     * Query Params
     */
    query_params?: {
        [key: string]: JsonInput;
    } | null;
    /**
     * Request Body Template
     */
    request_body_template?: {
        [key: string]: JsonInput;
    } | null;
    /**
     * Input Mappings
     */
    input_mappings?: {
        [key: string]: JsonInput;
    } | null;
    response_format?: EndpointResponseFormat;
    /**
     * Response Mappings
     */
    response_mappings?: {
        [key: string]: string;
    } | null;
    /**
     * Validation Rules
     */
    validation_rules?: {
        [key: string]: JsonInput;
    } | null;
    /**
     * Project Id
     */
    project_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    auth_type?: EndpointAuthType | null;
    /**
     * Auth Token
     */
    auth_token?: string | null;
    /**
     * Client Id
     */
    client_id?: string | null;
    /**
     * Client Secret
     */
    client_secret?: string | null;
    /**
     * Token Url
     */
    token_url?: string | null;
    /**
     * Scopes
     */
    scopes?: Array<string> | null;
    /**
     * Audience
     */
    audience?: string | null;
    /**
     * Extra Payload
     */
    extra_payload?: {
        [key: string]: JsonInput;
    } | null;
    /**
     * Last Token
     */
    last_token?: string | null;
    /**
     * Last Token Expires At
     */
    last_token_expires_at?: string | null;
};

/**
 * EntityStats
 */
export type EntityStats = {
    /**
     * Total
     */
    total: number;
    /**
     * Stats
     */
    stats: {
        [key: string]: DimensionStats;
    };
    /**
     * Metadata
     */
    metadata?: {
        [key: string]: JsonOutput;
    } | null;
    history?: HistoricalStats | null;
};

/**
 * EntityType
 */
export type EntityType = 'General' | 'Test' | 'TestSet' | 'TestRun' | 'TestResult' | 'Metric' | 'Model' | 'Prompt' | 'Behavior' | 'Category' | 'Topic' | 'Dimension' | 'Demographic' | 'Task' | 'Project' | 'Source';

/**
 * ExecuteTestConfigurationResponse
 */
export type ExecuteTestConfigurationResponse = {
    /**
     * Test Configuration Id
     */
    test_configuration_id: string;
    /**
     * Task Id
     */
    task_id: string;
    /**
     * Status
     */
    status: string;
    /**
     * Endpoint Id
     */
    endpoint_id: string;
    /**
     * Test Set Id
     */
    test_set_id?: string | null;
    /**
     * User Id
     */
    user_id: string;
};

/**
 * ExecutorRunCount
 */
export type ExecutorRunCount = {
    /**
     * Executor Name
     */
    executor_name: string;
    /**
     * Run Count
     */
    run_count: number;
};

/**
 * ExtractDocumentRequest
 */
export type ExtractDocumentRequest = {
    /**
     * Path
     */
    path: string;
};

/**
 * ExtractDocumentResponse
 */
export type ExtractDocumentResponse = {
    /**
     * Content
     */
    content: string;
    /**
     * Format
     */
    format: string;
};

/**
 * FailedItem
 */
export type FailedItem = {
    /**
     * Id
     */
    id: string;
    /**
     * Error
     */
    error: string;
};

/**
 * GenerateContentRequest
 */
export type GenerateContentRequest = {
    /**
     * Prompt
     */
    prompt: string;
    /**
     * Schema
     */
    schema?: {
        [key: string]: JsonInput;
    } | null;
};

/**
 * GenerateTestsPrompt
 */
export type GenerateTestsPrompt = {
    /**
     * Project Context
     */
    project_context?: string;
    /**
     * Test Behaviors
     */
    test_behaviors?: Array<string | string>;
    /**
     * Test Purposes
     */
    test_purposes?: Array<string | string>;
    /**
     * Key Topics
     */
    key_topics?: Array<string | string>;
    /**
     * Specific Requirements
     */
    specific_requirements?: string | null;
    /**
     * Test Type
     */
    test_type: 'Single interaction tests' | 'Multi-turn conversation tests';
    /**
     * Output Format
     */
    output_format: 'Generate only user inputs' | 'Generate both user inputs and expected responses';
};

/**
 * GenerateTestsRequest
 */
export type GenerateTestsRequest = {
    /**
     * Prompt
     */
    prompt: GenerateTestsPrompt | ImproveTestPrompt;
    /**
     * Num Tests
     */
    num_tests?: number;
    /**
     * Documents
     */
    documents?: Array<Document> | null;
};

/**
 * GenerateTestsResponse
 */
export type GenerateTestsResponse = {
    /**
     * Tests
     */
    tests: Array<RhesisBackendAppSchemasServicesTest>;
};

/**
 * GenerationSample
 */
export type GenerationSample = {
    /**
     * Id
     */
    id: number;
    /**
     * Text
     */
    text: string;
    /**
     * Behavior
     */
    behavior: string;
    /**
     * Topic
     */
    topic: string;
    /**
     * Rating
     */
    rating?: number | null;
    /**
     * Feedback
     */
    feedback?: string | null;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * HealthResponse
 */
export type HealthResponse = {
    /**
     * Status
     */
    status: string;
};

/**
 * HistoricalStats
 */
export type HistoricalStats = {
    /**
     * Period
     */
    period: string;
    /**
     * Start Date
     */
    start_date: string;
    /**
     * End Date
     */
    end_date: string;
    /**
     * Monthly Counts
     */
    monthly_counts: {
        [key: string]: number;
    };
};

/**
 * HomeProtectedResponse
 */
export type HomeProtectedResponse = {
    /**
     * Message
     */
    message: string;
};

/**
 * HomePublicResponse
 */
export type HomePublicResponse = {
    /**
     * Message
     */
    message: string;
    /**
     * Login Url
     */
    login_url?: string | null;
};

/**
 * ImproveTestPrompt
 */
export type ImproveTestPrompt = {
    /**
     * Original Test
     */
    original_test: string;
    /**
     * Test Type
     */
    test_type: string;
    /**
     * Topic
     */
    topic: string;
    /**
     * User Rating
     */
    user_rating?: string;
    /**
     * Improvement Feedback
     */
    improvement_feedback?: string | null;
    /**
     * Instruction
     */
    instruction?: string;
};

export type JsonInput = {
    [key: string]: JsonInput;
} | Array<JsonInput> | string | number | boolean | null;

export type JsonOutput = {
    [key: string]: JsonOutput;
} | Array<JsonOutput> | string | number | boolean | null;

/**
 * LLMSuggestionsModel
 */
export type LlmSuggestionsModelInput = {
    /**
     * Request Headers
     */
    request_headers?: {
        [key: string]: string;
    } | null;
    /**
     * Query Params
     */
    query_params?: {
        [key: string]: JsonInput;
    } | null;
    request_body_template?: JsonInput | null;
    /**
     * Input Mappings
     */
    input_mappings?: {
        [key: string]: JsonInput;
    } | null;
    /**
     * Notes
     */
    notes?: Array<string> | null;
    /**
     * Examples
     */
    examples?: Array<{
        [key: string]: JsonInput;
    }> | null;
};

/**
 * LLMSuggestionsModel
 */
export type LlmSuggestionsModelOutput = {
    /**
     * Request Headers
     */
    request_headers?: {
        [key: string]: string;
    } | null;
    /**
     * Query Params
     */
    query_params?: {
        [key: string]: JsonOutput;
    } | null;
    request_body_template?: JsonOutput | null;
    /**
     * Input Mappings
     */
    input_mappings?: {
        [key: string]: JsonOutput;
    } | null;
    /**
     * Notes
     */
    notes?: Array<string> | null;
    /**
     * Examples
     */
    examples?: Array<{
        [key: string]: JsonOutput;
    }> | null;
};

/**
 * ListModelsResponse
 */
export type ListModelsResponse = {
    /**
     * Count
     */
    count: number;
    /**
     * Models
     */
    models: Array<ModelInfo>;
};

/**
 * LogoutResponse
 */
export type LogoutResponse = {
    /**
     * Success
     */
    success: boolean;
    /**
     * Message
     */
    message: string;
};

/**
 * Message
 */
export type Message = {
    /**
     * Role
     */
    role: string;
    /**
     * Content
     */
    content: string;
};

/**
 * Metric
 */
export type Metric = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Evaluation Prompt
     */
    evaluation_prompt: string;
    /**
     * Evaluation Steps
     */
    evaluation_steps?: string | null;
    /**
     * Reasoning
     */
    reasoning?: string | null;
    score_type: ScoreType;
    /**
     * Min Score
     */
    min_score?: number | null;
    /**
     * Max Score
     */
    max_score?: number | null;
    /**
     * Reference Score
     */
    reference_score?: string | null;
    /**
     * Threshold
     */
    threshold?: number | null;
    threshold_operator?: ThresholdOperator | null;
    /**
     * Explanation
     */
    explanation?: string | null;
    /**
     * Metric Type Id
     */
    metric_type_id?: string | null;
    /**
     * Backend Type Id
     */
    backend_type_id?: string | null;
    /**
     * Model Id
     */
    model_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Assignee Id
     */
    assignee_id?: string | null;
    /**
     * Owner Id
     */
    owner_id?: string | null;
    /**
     * Class Name
     */
    class_name?: string | null;
    /**
     * Ground Truth Required
     */
    ground_truth_required?: boolean | null;
    /**
     * Context Required
     */
    context_required?: boolean | null;
    /**
     * Evaluation Examples
     */
    evaluation_examples?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Tags
     */
    tags?: Array<Tag> | null;
};

/**
 * MetricCreate
 */
export type MetricCreate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Evaluation Prompt
     */
    evaluation_prompt: string;
    /**
     * Evaluation Steps
     */
    evaluation_steps?: string | null;
    /**
     * Reasoning
     */
    reasoning?: string | null;
    score_type: ScoreType;
    /**
     * Min Score
     */
    min_score?: number | null;
    /**
     * Max Score
     */
    max_score?: number | null;
    /**
     * Reference Score
     */
    reference_score?: string | null;
    /**
     * Threshold
     */
    threshold?: number | null;
    threshold_operator?: ThresholdOperator | null;
    /**
     * Explanation
     */
    explanation?: string | null;
    /**
     * Metric Type Id
     */
    metric_type_id?: string | null;
    /**
     * Backend Type Id
     */
    backend_type_id?: string | null;
    /**
     * Model Id
     */
    model_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Assignee Id
     */
    assignee_id?: string | null;
    /**
     * Owner Id
     */
    owner_id?: string | null;
    /**
     * Class Name
     */
    class_name?: string | null;
    /**
     * Ground Truth Required
     */
    ground_truth_required?: boolean | null;
    /**
     * Context Required
     */
    context_required?: boolean | null;
    /**
     * Evaluation Examples
     */
    evaluation_examples?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
};

/**
 * MetricReference
 */
export type MetricReference = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    counts?: CountsDict | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Tags
     */
    tags?: Array<TagRead> | null;
    metric_type?: TypeLookupReference | null;
    backend_type?: TypeLookupReference | null;
};

/**
 * MetricResult
 */
export type MetricResult = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Is Successful
     */
    is_successful?: boolean | null;
    /**
     * Reason
     */
    reason?: string | null;
    /**
     * Score
     */
    score?: number | null;
    /**
     * Threshold
     */
    threshold?: number | null;
};

/**
 * MetricStats
 */
export type MetricStats = {
    /**
     * Total
     */
    total: number;
    /**
     * Passed
     */
    passed: number;
    /**
     * Failed
     */
    failed: number;
    /**
     * Pass Rate
     */
    pass_rate: number;
};

/**
 * MetricUpdate
 */
export type MetricUpdate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Evaluation Prompt
     */
    evaluation_prompt?: string | null;
    /**
     * Evaluation Steps
     */
    evaluation_steps?: string | null;
    /**
     * Reasoning
     */
    reasoning?: string | null;
    score_type?: ScoreType | null;
    /**
     * Min Score
     */
    min_score?: number | null;
    /**
     * Max Score
     */
    max_score?: number | null;
    /**
     * Reference Score
     */
    reference_score?: string | null;
    /**
     * Threshold
     */
    threshold?: number | null;
    threshold_operator?: ThresholdOperator | null;
    /**
     * Explanation
     */
    explanation?: string | null;
    /**
     * Metric Type Id
     */
    metric_type_id?: string | null;
    /**
     * Backend Type Id
     */
    backend_type_id?: string | null;
    /**
     * Model Id
     */
    model_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Assignee Id
     */
    assignee_id?: string | null;
    /**
     * Owner Id
     */
    owner_id?: string | null;
    /**
     * Class Name
     */
    class_name?: string | null;
    /**
     * Ground Truth Required
     */
    ground_truth_required?: boolean | null;
    /**
     * Context Required
     */
    context_required?: boolean | null;
    /**
     * Evaluation Examples
     */
    evaluation_examples?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
};

/**
 * Model
 * Complete Model schema with relationships
 */
export type Model = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Icon
     */
    icon?: string | null;
    /**
     * Model Name
     */
    model_name: string;
    /**
     * Endpoint
     */
    endpoint: string;
    /**
     * Key
     */
    key: string;
    /**
     * Request Headers
     */
    request_headers?: {
        [key: string]: string;
    } | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Provider Type Id
     */
    provider_type_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Owner Id
     */
    owner_id?: string | null;
    /**
     * Assignee Id
     */
    assignee_id?: string | null;
    provider_type?: TypeLookup | null;
    status?: Status | null;
    owner?: User | null;
    assignee?: User | null;
    /**
     * Tags
     */
    tags?: Array<Tag> | null;
};

/**
 * ModelCreate
 * Schema for creating a new Model
 */
export type ModelCreate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Icon
     */
    icon?: string | null;
    /**
     * Model Name
     */
    model_name: string;
    /**
     * Endpoint
     */
    endpoint: string;
    /**
     * Key
     */
    key: string;
    /**
     * Request Headers
     */
    request_headers?: {
        [key: string]: string;
    } | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Provider Type Id
     */
    provider_type_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Owner Id
     */
    owner_id?: string | null;
    /**
     * Assignee Id
     */
    assignee_id?: string | null;
};

/**
 * ModelDetail
 */
export type ModelDetail = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Icon
     */
    icon?: string | null;
    /**
     * Model Name
     */
    model_name?: string | null;
    /**
     * Endpoint
     */
    endpoint?: string | null;
    /**
     * Key
     */
    key: string;
    /**
     * Request Headers
     */
    request_headers?: {
        [key: string]: string;
    } | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Provider Type Id
     */
    provider_type_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Owner Id
     */
    owner_id?: string | null;
    /**
     * Assignee Id
     */
    assignee_id?: string | null;
    provider_type?: TypeLookupReference | null;
    status?: StatusReference | null;
    owner?: UserReference | null;
    assignee?: UserReference | null;
    /**
     * Tags
     */
    tags?: Array<TagRead> | null;
    counts?: CountsDict | null;
    organization?: OrganizationReference | null;
    user?: UserReference | null;
};

/**
 * ModelInfo
 */
export type ModelInfo = {
    /**
     * Name
     */
    name: string;
    /**
     * Class Name
     */
    class_name: string;
    /**
     * Has Organization Id
     */
    has_organization_id: boolean;
    /**
     * Has User Id
     */
    has_user_id: boolean;
    /**
     * Columns
     */
    columns: Array<string>;
};

/**
 * ModelReference
 */
export type ModelReference = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    counts?: CountsDict | null;
    /**
     * Model Name
     */
    model_name?: string | null;
    /**
     * Endpoint
     */
    endpoint?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Tags
     */
    tags?: Array<TagRead> | null;
    /**
     * Icon
     */
    icon?: string | null;
};

/**
 * ModelUpdate
 * Schema for updating an existing Model
 */
export type ModelUpdate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Icon
     */
    icon?: string | null;
    /**
     * Model Name
     */
    model_name?: string | null;
    /**
     * Endpoint
     */
    endpoint?: string | null;
    /**
     * Key
     */
    key?: string | null;
    /**
     * Request Headers
     */
    request_headers?: {
        [key: string]: string;
    } | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Provider Type Id
     */
    provider_type_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Owner Id
     */
    owner_id?: string | null;
    /**
     * Assignee Id
     */
    assignee_id?: string | null;
};

/**
 * NoneAuth
 */
export type NoneAuth = {
    /**
     * Type
     */
    type: 'none';
};

/**
 * OAuth2ClientCredentials
 */
export type OAuth2ClientCredentialsInput = {
    /**
     * Type
     */
    type: 'oauth2_client_credentials';
    /**
     * Token Url
     */
    token_url: string;
    /**
     * Client Id
     */
    client_id: string;
    /**
     * Client Secret
     */
    client_secret: string;
    /**
     * Scopes
     */
    scopes?: Array<string>;
    /**
     * Audience
     */
    audience?: string | null;
    /**
     * Extra Payload
     */
    extra_payload?: {
        [key: string]: JsonInput;
    } | null;
};

/**
 * OAuth2ClientCredentials
 */
export type OAuth2ClientCredentialsOutput = {
    /**
     * Type
     */
    type: 'oauth2_client_credentials';
    /**
     * Token Url
     */
    token_url: string;
    /**
     * Client Id
     */
    client_id: string;
    /**
     * Client Secret
     */
    client_secret: string;
    /**
     * Scopes
     */
    scopes?: Array<string>;
    /**
     * Audience
     */
    audience?: string | null;
    /**
     * Extra Payload
     */
    extra_payload?: {
        [key: string]: JsonOutput;
    } | null;
};

/**
 * OpenAPISpecModel
 */
export type OpenApiSpecModelInput = {
    /**
     * Openapi
     */
    openapi?: string | null;
    /**
     * Swagger
     */
    swagger?: string | null;
    /**
     * Info
     */
    info?: {
        [key: string]: JsonInput;
    } | null;
    /**
     * Paths
     */
    paths?: {
        [key: string]: {
            [key: string]: JsonInput;
        };
    } | null;
    /**
     * Components
     */
    components?: {
        [key: string]: JsonInput;
    } | null;
    /**
     * Definitions
     */
    definitions?: {
        [key: string]: JsonInput;
    } | null;
    /**
     * Servers
     */
    servers?: Array<{
        [key: string]: JsonInput;
    }> | null;
    /**
     * Security
     */
    security?: Array<{
        [key: string]: Array<string>;
    }> | null;
    /**
     * Tags
     */
    tags?: Array<{
        [key: string]: JsonInput;
    }> | null;
    /**
     * Externaldocs
     */
    externalDocs?: {
        [key: string]: JsonInput;
    } | null;
};

/**
 * OpenAPISpecModel
 */
export type OpenApiSpecModelOutput = {
    /**
     * Openapi
     */
    openapi?: string | null;
    /**
     * Swagger
     */
    swagger?: string | null;
    /**
     * Info
     */
    info?: {
        [key: string]: JsonOutput;
    } | null;
    /**
     * Paths
     */
    paths?: {
        [key: string]: {
            [key: string]: JsonOutput;
        };
    } | null;
    /**
     * Components
     */
    components?: {
        [key: string]: JsonOutput;
    } | null;
    /**
     * Definitions
     */
    definitions?: {
        [key: string]: JsonOutput;
    } | null;
    /**
     * Servers
     */
    servers?: Array<{
        [key: string]: JsonOutput;
    }> | null;
    /**
     * Security
     */
    security?: Array<{
        [key: string]: Array<string>;
    }> | null;
    /**
     * Tags
     */
    tags?: Array<{
        [key: string]: JsonOutput;
    }> | null;
    /**
     * Externaldocs
     */
    externalDocs?: {
        [key: string]: JsonOutput;
    } | null;
};

/**
 * Organization
 */
export type Organization = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Display Name
     */
    display_name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Website
     */
    website?: string | null;
    /**
     * Logo Url
     */
    logo_url?: string | null;
    /**
     * Email
     */
    email?: string | null;
    /**
     * Phone
     */
    phone?: string | null;
    /**
     * Address
     */
    address?: string | null;
    /**
     * Is Active
     */
    is_active?: boolean | null;
    /**
     * Max Users
     */
    max_users?: number | null;
    /**
     * Subscription Ends At
     */
    subscription_ends_at?: string | null;
    /**
     * Domain
     */
    domain?: string | null;
    /**
     * Is Domain Verified
     */
    is_domain_verified?: boolean | null;
    /**
     * Owner Id
     */
    owner_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Is Onboarding Complete
     */
    is_onboarding_complete?: boolean | null;
};

/**
 * OrganizationCreate
 */
export type OrganizationCreate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Display Name
     */
    display_name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Website
     */
    website?: string | null;
    /**
     * Logo Url
     */
    logo_url?: string | null;
    /**
     * Email
     */
    email?: string | null;
    /**
     * Phone
     */
    phone?: string | null;
    /**
     * Address
     */
    address?: string | null;
    /**
     * Is Active
     */
    is_active?: boolean | null;
    /**
     * Max Users
     */
    max_users?: number | null;
    /**
     * Subscription Ends At
     */
    subscription_ends_at?: string | null;
    /**
     * Domain
     */
    domain?: string | null;
    /**
     * Is Domain Verified
     */
    is_domain_verified?: boolean | null;
    /**
     * Owner Id
     */
    owner_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Is Onboarding Complete
     */
    is_onboarding_complete?: boolean | null;
};

/**
 * OrganizationReference
 */
export type OrganizationReference = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Email
     */
    email?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Tags
     */
    tags?: Array<TagRead> | null;
};

/**
 * OrganizationUpdate
 */
export type OrganizationUpdate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Display Name
     */
    display_name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Website
     */
    website?: string | null;
    /**
     * Logo Url
     */
    logo_url?: string | null;
    /**
     * Email
     */
    email?: string | null;
    /**
     * Phone
     */
    phone?: string | null;
    /**
     * Address
     */
    address?: string | null;
    /**
     * Is Active
     */
    is_active?: boolean | null;
    /**
     * Max Users
     */
    max_users?: number | null;
    /**
     * Subscription Ends At
     */
    subscription_ends_at?: string | null;
    /**
     * Domain
     */
    domain?: string | null;
    /**
     * Is Domain Verified
     */
    is_domain_verified?: boolean | null;
    /**
     * Owner Id
     */
    owner_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Is Onboarding Complete
     */
    is_onboarding_complete?: boolean | null;
};

/**
 * OverallStats
 */
export type OverallStats = {
    /**
     * Total
     */
    total: number;
    /**
     * Passed
     */
    passed: number;
    /**
     * Failed
     */
    failed: number;
    /**
     * Pass Rate
     */
    pass_rate: number;
};

/**
 * Paginated[CategoryDetail]
 */
export type PaginatedCategoryDetail = {
    /**
     * Data
     */
    data: Array<CategoryDetail>;
    pagination: Pagination;
};

/**
 * Paginated[Demographic]
 */
export type PaginatedDemographic = {
    /**
     * Data
     */
    data: Array<Demographic>;
    pagination: Pagination;
};

/**
 * Paginated[Dimension]
 */
export type PaginatedDimension = {
    /**
     * Data
     */
    data: Array<Dimension>;
    pagination: Pagination;
};

/**
 * Paginated[EndpointDetail]
 */
export type PaginatedEndpointDetail = {
    /**
     * Data
     */
    data: Array<EndpointDetail>;
    pagination: Pagination;
};

/**
 * Paginated[ModelDetail]
 */
export type PaginatedModelDetail = {
    /**
     * Data
     */
    data: Array<ModelDetail>;
    pagination: Pagination;
};

/**
 * Paginated[Organization]
 */
export type PaginatedOrganization = {
    /**
     * Data
     */
    data: Array<Organization>;
    pagination: Pagination;
};

/**
 * Paginated[ProjectDetail]
 */
export type PaginatedProjectDetail = {
    /**
     * Data
     */
    data: Array<ProjectDetail>;
    pagination: Pagination;
};

/**
 * Paginated[PromptTemplate]
 */
export type PaginatedPromptTemplate = {
    /**
     * Data
     */
    data: Array<PromptTemplate>;
    pagination: Pagination;
};

/**
 * Paginated[Prompt]
 */
export type PaginatedPrompt = {
    /**
     * Data
     */
    data: Array<Prompt>;
    pagination: Pagination;
};

/**
 * Paginated[ResponsePattern]
 */
export type PaginatedResponsePattern = {
    /**
     * Data
     */
    data: Array<ResponsePattern>;
    pagination: Pagination;
};

/**
 * Paginated[Risk]
 */
export type PaginatedRisk = {
    /**
     * Data
     */
    data: Array<Risk>;
    pagination: Pagination;
};

/**
 * Paginated[Source]
 */
export type PaginatedSource = {
    /**
     * Data
     */
    data: Array<Source>;
    pagination: Pagination;
};

/**
 * Paginated[StatusDetail]
 */
export type PaginatedStatusDetail = {
    /**
     * Data
     */
    data: Array<StatusDetail>;
    pagination: Pagination;
};

/**
 * Paginated[Tag]
 */
export type PaginatedTag = {
    /**
     * Data
     */
    data: Array<Tag>;
    pagination: Pagination;
};

/**
 * Paginated[TaskDetail]
 */
export type PaginatedTaskDetail = {
    /**
     * Data
     */
    data: Array<TaskDetail>;
    pagination: Pagination;
};

/**
 * Paginated[TestConfigurationDetail]
 */
export type PaginatedTestConfigurationDetail = {
    /**
     * Data
     */
    data: Array<TestConfigurationDetail>;
    pagination: Pagination;
};

/**
 * Paginated[TestContext]
 */
export type PaginatedTestContext = {
    /**
     * Data
     */
    data: Array<TestContext>;
    pagination: Pagination;
};

/**
 * Paginated[TestDetail]
 */
export type PaginatedTestDetail = {
    /**
     * Data
     */
    data: Array<TestDetail>;
    pagination: Pagination;
};

/**
 * Paginated[TestResultDetail]
 */
export type PaginatedTestResultDetail = {
    /**
     * Data
     */
    data: Array<TestResultDetail>;
    pagination: Pagination;
};

/**
 * Paginated[TestRunDetail]
 */
export type PaginatedTestRunDetail = {
    /**
     * Data
     */
    data: Array<TestRunDetail>;
    pagination: Pagination;
};

/**
 * Paginated[TestSetDetail]
 */
export type PaginatedTestSetDetail = {
    /**
     * Data
     */
    data: Array<TestSetDetail>;
    pagination: Pagination;
};

/**
 * Paginated[TokenRead]
 */
export type PaginatedTokenRead = {
    /**
     * Data
     */
    data: Array<TokenRead>;
    pagination: Pagination;
};

/**
 * Paginated[TopicDetail]
 */
export type PaginatedTopicDetail = {
    /**
     * Data
     */
    data: Array<TopicDetail>;
    pagination: Pagination;
};

/**
 * Paginated[TypeLookup]
 */
export type PaginatedTypeLookup = {
    /**
     * Data
     */
    data: Array<TypeLookup>;
    pagination: Pagination;
};

/**
 * Paginated[UseCase]
 */
export type PaginatedUseCase = {
    /**
     * Data
     */
    data: Array<UseCase>;
    pagination: Pagination;
};

/**
 * Paginated[User]
 */
export type PaginatedUser = {
    /**
     * Data
     */
    data: Array<User>;
    pagination: Pagination;
};

/**
 * Pagination
 */
export type Pagination = {
    /**
     * Totalcount
     */
    totalCount: number;
};

/**
 * PermanentlyDeleteResponse
 */
export type PermanentlyDeleteResponse = {
    /**
     * Message
     */
    message: string;
    /**
     * Item Id
     */
    item_id: string;
    /**
     * Warning
     */
    warning: string;
};

/**
 * Project
 */
export type Project = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Is Active
     */
    is_active?: boolean | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Owner Id
     */
    owner_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Icon
     */
    icon?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
};

/**
 * ProjectCreate
 */
export type ProjectCreate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Is Active
     */
    is_active?: boolean | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Owner Id
     */
    owner_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Icon
     */
    icon?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
};

/**
 * ProjectDetail
 */
export type ProjectDetail = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Is Active
     */
    is_active?: boolean | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Owner Id
     */
    owner_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Icon
     */
    icon?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Tags
     */
    tags?: Array<TagRead> | null;
    user?: UserReference | null;
    owner?: UserReference | null;
    organization?: OrganizationReference | null;
    status?: StatusReference | null;
};

/**
 * ProjectReference
 */
export type ProjectReference = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Tags
     */
    tags?: Array<TagRead> | null;
    /**
     * Icon
     */
    icon?: string | null;
};

/**
 * ProjectUpdate
 */
export type ProjectUpdate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Is Active
     */
    is_active?: boolean | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Owner Id
     */
    owner_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Icon
     */
    icon?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
};

/**
 * Prompt
 */
export type Prompt = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Content
     */
    content: string;
    /**
     * Demographic Id
     */
    demographic_id?: string | null;
    /**
     * Category Id
     */
    category_id?: string | null;
    /**
     * Attack Category Id
     */
    attack_category_id?: string | null;
    /**
     * Topic Id
     */
    topic_id?: string | null;
    /**
     * Language Code
     */
    language_code: string;
    /**
     * Behavior Id
     */
    behavior_id?: string | null;
    /**
     * Parent Id
     */
    parent_id?: string | null;
    /**
     * Prompt Template Id
     */
    prompt_template_id?: string | null;
    /**
     * Expected Response
     */
    expected_response?: string | null;
    /**
     * Source Id
     */
    source_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Tags
     */
    tags?: Array<Tag> | null;
};

/**
 * PromptCreate
 */
export type PromptCreate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Content
     */
    content: string;
    /**
     * Demographic Id
     */
    demographic_id?: string | null;
    /**
     * Category Id
     */
    category_id?: string | null;
    /**
     * Attack Category Id
     */
    attack_category_id?: string | null;
    /**
     * Topic Id
     */
    topic_id?: string | null;
    /**
     * Language Code
     */
    language_code: string;
    /**
     * Behavior Id
     */
    behavior_id?: string | null;
    /**
     * Parent Id
     */
    parent_id?: string | null;
    /**
     * Prompt Template Id
     */
    prompt_template_id?: string | null;
    /**
     * Expected Response
     */
    expected_response?: string | null;
    /**
     * Source Id
     */
    source_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Tags
     */
    tags?: Array<Tag> | null;
};

/**
 * PromptReference
 */
export type PromptReference = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Content
     */
    content?: string | null;
    /**
     * Expected Response
     */
    expected_response?: string | null;
    counts?: CountsDict | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Tags
     */
    tags?: Array<TagRead> | null;
};

/**
 * PromptRequest
 */
export type PromptRequest = {
    /**
     * Prompt
     */
    prompt: string;
    /**
     * Stream
     */
    stream?: boolean;
};

/**
 * PromptTemplate
 */
export type PromptTemplate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Content
     */
    content: string;
    /**
     * Category Id
     */
    category_id?: string | null;
    /**
     * Topic Id
     */
    topic_id?: string | null;
    /**
     * Parent Id
     */
    parent_id?: string | null;
    /**
     * Language Code
     */
    language_code?: string | null;
    /**
     * Is Summary
     */
    is_summary?: boolean | null;
    /**
     * Source Id
     */
    source_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Tags
     */
    tags?: Array<Tag> | null;
};

/**
 * PromptTemplateCreate
 */
export type PromptTemplateCreate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Content
     */
    content: string;
    /**
     * Category Id
     */
    category_id?: string | null;
    /**
     * Topic Id
     */
    topic_id?: string | null;
    /**
     * Parent Id
     */
    parent_id?: string | null;
    /**
     * Language Code
     */
    language_code?: string | null;
    /**
     * Is Summary
     */
    is_summary?: boolean | null;
    /**
     * Source Id
     */
    source_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Tags
     */
    tags?: Array<Tag> | null;
};

/**
 * PromptTemplateUpdate
 */
export type PromptTemplateUpdate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Content
     */
    content?: string | null;
    /**
     * Category Id
     */
    category_id?: string | null;
    /**
     * Topic Id
     */
    topic_id?: string | null;
    /**
     * Parent Id
     */
    parent_id?: string | null;
    /**
     * Language Code
     */
    language_code?: string | null;
    /**
     * Is Summary
     */
    is_summary?: boolean | null;
    /**
     * Source Id
     */
    source_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Tags
     */
    tags?: Array<Tag> | null;
};

/**
 * PromptUpdate
 */
export type PromptUpdate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Content
     */
    content?: string | null;
    /**
     * Demographic Id
     */
    demographic_id?: string | null;
    /**
     * Category Id
     */
    category_id?: string | null;
    /**
     * Attack Category Id
     */
    attack_category_id?: string | null;
    /**
     * Topic Id
     */
    topic_id?: string | null;
    /**
     * Language Code
     */
    language_code?: string | null;
    /**
     * Behavior Id
     */
    behavior_id?: string | null;
    /**
     * Parent Id
     */
    parent_id?: string | null;
    /**
     * Prompt Template Id
     */
    prompt_template_id?: string | null;
    /**
     * Expected Response
     */
    expected_response?: string | null;
    /**
     * Source Id
     */
    source_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Tags
     */
    tags?: Array<Tag> | null;
};

/**
 * PromptView
 */
export type PromptView = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Content
     */
    content: string;
    /**
     * Demographic
     */
    demographic?: string | null;
    /**
     * Category
     */
    category?: string | null;
    /**
     * Attack Category
     */
    attack_category?: string | null;
    /**
     * Topic
     */
    topic?: string | null;
    /**
     * Language Code
     */
    language_code: string;
    /**
     * Behavior
     */
    behavior?: string | null;
    /**
     * Expected Response
     */
    expected_response?: string | null;
    /**
     * Source
     */
    source?: string | null;
    /**
     * Status
     */
    status?: string | null;
};

/**
 * RecycleBinCountsResponse
 */
export type RecycleBinCountsResponse = {
    /**
     * Total Models With Deleted
     */
    total_models_with_deleted: number;
    /**
     * Counts
     */
    counts: {
        [key: string]: CountEntryOk | CountEntryError;
    };
};

/**
 * RecycledRecordsResponse
 */
export type RecycledRecordsResponse = {
    /**
     * Model
     */
    model: string;
    /**
     * Count
     */
    count: number;
    /**
     * Items
     */
    items: Array<JsonOutput>;
    /**
     * Has More
     */
    has_more: boolean;
};

/**
 * ResponsePattern
 */
export type ResponsePattern = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Text
     */
    text: string;
    /**
     * Behavior Id
     */
    behavior_id?: string | null;
    /**
     * Response Pattern Type Id
     */
    response_pattern_type_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
};

/**
 * ResponsePatternCreate
 */
export type ResponsePatternCreate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Text
     */
    text: string;
    /**
     * Behavior Id
     */
    behavior_id?: string | null;
    /**
     * Response Pattern Type Id
     */
    response_pattern_type_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
};

/**
 * ResponsePatternUpdate
 */
export type ResponsePatternUpdate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Text
     */
    text?: string | null;
    /**
     * Behavior Id
     */
    behavior_id?: string | null;
    /**
     * Response Pattern Type Id
     */
    response_pattern_type_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
};

/**
 * RestoreResponse
 */
export type RestoreResponse = {
    /**
     * Message
     */
    message: string;
    item: JsonOutput;
};

/**
 * ResultDistribution
 */
export type ResultDistribution = {
    /**
     * Total
     */
    total: number;
    /**
     * Passed
     */
    passed: number;
    /**
     * Failed
     */
    failed: number;
    /**
     * Pending
     */
    pending: number;
    /**
     * Pass Rate
     */
    pass_rate: number;
};

/**
 * Risk
 */
export type Risk = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Parent Id
     */
    parent_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
};

/**
 * RiskCreate
 */
export type RiskCreate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Parent Id
     */
    parent_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
};

/**
 * RiskUpdate
 */
export type RiskUpdate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Parent Id
     */
    parent_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
};

/**
 * RootResponse
 */
export type RootResponse = {
    /**
     * Name
     */
    name: string;
    /**
     * Status
     */
    status: string;
    /**
     * Version
     */
    version?: string | null;
    /**
     * Branch
     */
    branch?: string | null;
    /**
     * Commit
     */
    commit?: string | null;
    /**
     * Docs Url
     */
    docs_url: string;
    /**
     * Redoc Url
     */
    redoc_url: string;
    auth: AuthLinks;
    /**
     * Home
     */
    home: string;
    api_usage: ApiUsage;
};

/**
 * ScoreType
 */
export type ScoreType = 'binary' | 'numeric' | 'categorical';

/**
 * Source
 */
export type Source = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Title
     */
    title: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Content
     */
    content?: string | null;
    /**
     * Source Type Id
     */
    source_type_id?: string | null;
    /**
     * Url
     */
    url?: string | null;
    /**
     * Citation
     */
    citation?: string | null;
    /**
     * Language Code
     */
    language_code?: string | null;
    /**
     * Source Metadata
     */
    source_metadata?: {
        [key: string]: JsonOutput;
    } | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
};

/**
 * SourceCreate
 */
export type SourceCreate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Title
     */
    title: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Content
     */
    content?: string | null;
    /**
     * Source Type Id
     */
    source_type_id?: string | null;
    /**
     * Url
     */
    url?: string | null;
    /**
     * Citation
     */
    citation?: string | null;
    /**
     * Language Code
     */
    language_code?: string | null;
    /**
     * Source Metadata
     */
    source_metadata?: {
        [key: string]: JsonInput;
    } | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
};

/**
 * SourceReference
 */
export type SourceReference = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Title
     */
    title?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Content
     */
    content?: string | null;
    counts?: CountsDict | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Tags
     */
    tags?: Array<TagRead> | null;
};

/**
 * SourceUpdate
 */
export type SourceUpdate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Title
     */
    title?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Content
     */
    content?: string | null;
    /**
     * Source Type Id
     */
    source_type_id?: string | null;
    /**
     * Url
     */
    url?: string | null;
    /**
     * Citation
     */
    citation?: string | null;
    /**
     * Language Code
     */
    language_code?: string | null;
    /**
     * Source Metadata
     */
    source_metadata?: {
        [key: string]: JsonInput;
    } | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
};

/**
 * StatsMode
 */
export type StatsMode = 'entity' | 'related_entity';

/**
 * Status
 */
export type Status = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Entity Type Id
     */
    entity_type_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
};

/**
 * StatusCreate
 */
export type StatusCreate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Entity Type Id
     */
    entity_type_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
};

/**
 * StatusDetail
 */
export type StatusDetail = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Entity Type Id
     */
    entity_type_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    entity_type?: TypeLookupReference | null;
    organization?: OrganizationReference | null;
    user?: UserReference | null;
};

/**
 * StatusDistribution
 */
export type StatusDistribution = {
    /**
     * Status
     */
    status: string;
    /**
     * Count
     */
    count: number;
    /**
     * Percentage
     */
    percentage: number;
};

/**
 * StatusMessageResponse
 */
export type StatusMessageResponse = {
    /**
     * Status
     */
    status: string;
    /**
     * Message
     */
    message: string;
};

/**
 * StatusReference
 */
export type StatusReference = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
};

/**
 * StatusUpdate
 */
export type StatusUpdate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Entity Type Id
     */
    entity_type_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
};

/**
 * Tag
 */
export type Tag = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Icon Unicode
     */
    icon_unicode?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
};

/**
 * TagCreate
 */
export type TagCreate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Icon Unicode
     */
    icon_unicode?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
};

/**
 * TagRead
 */
export type TagRead = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Icon Unicode
     */
    icon_unicode?: string | null;
};

/**
 * TagUpdate
 */
export type TagUpdate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Icon Unicode
     */
    icon_unicode?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
};

/**
 * Task
 * Schema for Task with relationships and auto-generated fields
 */
export type Task = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Title
     */
    title: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * User Id
     */
    user_id: string;
    /**
     * Assignee Id
     */
    assignee_id?: string | null;
    /**
     * Status Id
     */
    status_id: string;
    /**
     * Priority Id
     */
    priority_id?: string | null;
    /**
     * Entity Id
     */
    entity_id?: string | null;
    /**
     * Entity Type
     */
    entity_type?: string | null;
    /**
     * Completed At
     */
    completed_at?: string | null;
    /**
     * Task Metadata
     */
    task_metadata?: {
        [key: string]: JsonOutput;
    } | null;
    /**
     * Comment Count
     */
    comment_count?: number | null;
    user?: User | null;
    assignee?: User | null;
    status?: Status | null;
    priority?: TypeLookup | null;
};

/**
 * TaskCreate
 * Schema for creating a new Task - user_id is auto-populated from authenticated user
 */
export type TaskCreate = {
    /**
     * Title
     */
    title: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Assignee Id
     */
    assignee_id?: string | null;
    /**
     * Status Id
     */
    status_id: string;
    /**
     * Priority Id
     */
    priority_id?: string | null;
    /**
     * Entity Id
     */
    entity_id?: string | null;
    /**
     * Entity Type
     */
    entity_type?: string | null;
    /**
     * Completed At
     */
    completed_at?: string | null;
    /**
     * Task Metadata
     */
    task_metadata?: {
        [key: string]: JsonInput;
    } | null;
};

/**
 * TaskDetail
 */
export type TaskDetail = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Title
     */
    title?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Assignee Id
     */
    assignee_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Priority Id
     */
    priority_id?: string | null;
    /**
     * Entity Id
     */
    entity_id?: string | null;
    /**
     * Entity Type
     */
    entity_type?: string | null;
    /**
     * Completed At
     */
    completed_at?: string | null;
    /**
     * Task Metadata
     */
    task_metadata?: {
        [key: string]: JsonOutput;
    } | null;
    /**
     * Comment Count
     */
    comment_count?: number | null;
    user?: UserReference | null;
    assignee?: UserReference | null;
    status?: StatusReference | null;
    priority?: TypeLookupReference | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Tags
     */
    tags?: Array<TagRead> | null;
    organization?: OrganizationReference | null;
};

/**
 * TaskUpdate
 * Schema for updating a Task
 */
export type TaskUpdate = {
    /**
     * Title
     */
    title?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Assignee Id
     */
    assignee_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Priority Id
     */
    priority_id?: string | null;
    /**
     * Entity Id
     */
    entity_id?: string | null;
    /**
     * Entity Type
     */
    entity_type?: string | null;
    /**
     * Completed At
     */
    completed_at?: string | null;
    /**
     * Task Metadata
     */
    task_metadata?: {
        [key: string]: JsonInput;
    } | null;
};

/**
 * TestBulkCreate
 */
export type TestBulkCreate = {
    prompt: TestPromptCreate;
    /**
     * Behavior
     */
    behavior: string;
    /**
     * Category
     */
    category: string;
    /**
     * Topic
     */
    topic: string;
    /**
     * Test Configuration
     */
    test_configuration?: {
        [key: string]: JsonInput;
    } | null;
    /**
     * Assignee Id
     */
    assignee_id?: string | null;
    /**
     * Owner Id
     */
    owner_id?: string | null;
    /**
     * Status
     */
    status?: string | null;
    /**
     * Priority
     */
    priority?: number | null;
};

/**
 * TestBulkCreateRequest
 */
export type TestBulkCreateRequest = {
    /**
     * Tests
     */
    tests: Array<TestBulkCreate>;
    /**
     * Test Set Id
     */
    test_set_id?: string | null;
};

/**
 * TestBulkCreateResponse
 */
export type TestBulkCreateResponse = {
    /**
     * Success
     */
    success: boolean;
    /**
     * Total Tests
     */
    total_tests: number;
    /**
     * Message
     */
    message: string;
};

/**
 * TestConfigRequest
 */
export type TestConfigRequest = {
    /**
     * Prompt
     */
    prompt: string;
};

/**
 * TestConfigResponse
 */
export type TestConfigResponse = {
    /**
     * Behaviors
     */
    behaviors: Array<string>;
    /**
     * Topics
     */
    topics: Array<string>;
    /**
     * Categories
     */
    categories: Array<string>;
    /**
     * Scenarios
     */
    scenarios: Array<string>;
};

/**
 * TestConfiguration
 */
export type TestConfiguration = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Endpoint Id
     */
    endpoint_id: string;
    /**
     * Category Id
     */
    category_id?: string | null;
    /**
     * Topic Id
     */
    topic_id?: string | null;
    /**
     * Prompt Id
     */
    prompt_id?: string | null;
    /**
     * Use Case Id
     */
    use_case_id?: string | null;
    /**
     * Test Set Id
     */
    test_set_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Attributes
     */
    attributes?: {
        [key: string]: JsonOutput;
    } | null;
};

/**
 * TestConfigurationCreate
 */
export type TestConfigurationCreate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Endpoint Id
     */
    endpoint_id: string;
    /**
     * Category Id
     */
    category_id?: string | null;
    /**
     * Topic Id
     */
    topic_id?: string | null;
    /**
     * Prompt Id
     */
    prompt_id?: string | null;
    /**
     * Use Case Id
     */
    use_case_id?: string | null;
    /**
     * Test Set Id
     */
    test_set_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Attributes
     */
    attributes?: {
        [key: string]: JsonInput;
    } | null;
};

/**
 * TestConfigurationDetail
 */
export type TestConfigurationDetail = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Endpoint Id
     */
    endpoint_id?: string | null;
    /**
     * Category Id
     */
    category_id?: string | null;
    /**
     * Topic Id
     */
    topic_id?: string | null;
    /**
     * Prompt Id
     */
    prompt_id?: string | null;
    /**
     * Use Case Id
     */
    use_case_id?: string | null;
    /**
     * Test Set Id
     */
    test_set_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Attributes
     */
    attributes?: {
        [key: string]: JsonOutput;
    } | null;
    category?: CategoryReference | null;
    topic?: TopicReference | null;
    prompt?: PromptReference | null;
    use_case?: UseCaseReference | null;
    test_set?: TestSetReference | null;
    user?: UserReference | null;
    status?: StatusReference | null;
    endpoint?: RhesisBackendAppUtilsSchemaFactoryEndpointReference1 | null;
    organization?: OrganizationReference | null;
};

/**
 * TestConfigurationUpdate
 */
export type TestConfigurationUpdate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Endpoint Id
     */
    endpoint_id?: string | null;
    /**
     * Category Id
     */
    category_id?: string | null;
    /**
     * Topic Id
     */
    topic_id?: string | null;
    /**
     * Prompt Id
     */
    prompt_id?: string | null;
    /**
     * Use Case Id
     */
    use_case_id?: string | null;
    /**
     * Test Set Id
     */
    test_set_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Attributes
     */
    attributes?: {
        [key: string]: JsonInput;
    } | null;
};

/**
 * TestConnectionResponse
 */
export type TestConnectionResponse = {
    /**
     * Status
     */
    status: string;
    /**
     * Message
     */
    message: string;
};

/**
 * TestContext
 */
export type TestContext = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
    /**
     * Test Id
     */
    test_id: string;
    /**
     * Entity Id
     */
    entity_id: string;
    /**
     * Entity Type
     */
    entity_type: string;
    /**
     * Attributes
     */
    attributes?: {
        [key: string]: JsonOutput;
    } | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
};

/**
 * TestContextCreate
 */
export type TestContextCreate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Test Id
     */
    test_id: string;
    /**
     * Entity Id
     */
    entity_id: string;
    /**
     * Entity Type
     */
    entity_type: string;
    /**
     * Attributes
     */
    attributes?: {
        [key: string]: JsonInput;
    } | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
};

/**
 * TestContextUpdate
 */
export type TestContextUpdate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Test Id
     */
    test_id?: string | null;
    /**
     * Entity Id
     */
    entity_id?: string | null;
    /**
     * Entity Type
     */
    entity_type?: string | null;
    /**
     * Attributes
     */
    attributes?: {
        [key: string]: JsonInput;
    } | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
};

/**
 * TestCreate
 */
export type TestCreate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Prompt Id
     */
    prompt_id?: string | null;
    /**
     * Test Set Id
     */
    test_set_id?: string | null;
    /**
     * Test Type Id
     */
    test_type_id?: string | null;
    /**
     * Priority
     */
    priority?: number | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Assignee Id
     */
    assignee_id?: string | null;
    /**
     * Owner Id
     */
    owner_id?: string | null;
    /**
     * Test Configuration
     */
    test_configuration?: {
        [key: string]: JsonInput;
    } | null;
    /**
     * Parent Id
     */
    parent_id?: string | null;
    /**
     * Topic Id
     */
    topic_id?: string | null;
    /**
     * Behavior Id
     */
    behavior_id?: string | null;
    /**
     * Category Id
     */
    category_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Source Id
     */
    source_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    test_metadata?: TestMetadataInput | null;
};

/**
 * TestData
 */
export type TestData = {
    prompt: TestPromptInput;
    /**
     * Behavior
     */
    behavior: string;
    /**
     * Category
     */
    category: string;
    /**
     * Topic
     */
    topic: string;
    /**
     * Test Configuration
     */
    test_configuration?: {
        [key: string]: JsonInput;
    } | null;
    /**
     * Assignee Id
     */
    assignee_id?: string | null;
    /**
     * Owner Id
     */
    owner_id?: string | null;
    /**
     * Status
     */
    status?: string | null;
    /**
     * Priority
     */
    priority?: number | null;
    /**
     * Metadata
     */
    metadata?: {
        [key: string]: JsonInput;
    };
};

/**
 * TestDetail
 */
export type TestDetail = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id: string | null;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
    /**
     * Prompt Id
     */
    prompt_id: string;
    /**
     * Test Set Id
     */
    test_set_id?: string | null;
    /**
     * Test Type Id
     */
    test_type_id?: string | null;
    /**
     * Priority
     */
    priority?: number | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Assignee Id
     */
    assignee_id?: string | null;
    /**
     * Owner Id
     */
    owner_id?: string | null;
    /**
     * Test Configuration
     */
    test_configuration?: {
        [key: string]: JsonOutput;
    } | null;
    /**
     * Parent Id
     */
    parent_id?: string | null;
    /**
     * Topic Id
     */
    topic_id?: string | null;
    /**
     * Behavior Id
     */
    behavior_id?: string | null;
    /**
     * Category Id
     */
    category_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Source Id
     */
    source_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    test_metadata?: RhesisBackendAppSchemasTestTestMetadata | null;
    counts?: CountsDict | null;
    /**
     * Tags
     */
    tags?: Array<TagRead> | null;
    prompt?: PromptReference | null;
    test_type?: TypeLookupReference | null;
    user?: UserReference | null;
    assignee?: UserReference | null;
    owner?: UserReference | null;
    parent?: TestReference | null;
    topic?: TopicReference | null;
    behavior?: BehaviorReference | null;
    category?: CategoryReference | null;
    status?: StatusReference | null;
    source?: SourceReference | null;
    organization?: OrganizationReference | null;
};

/**
 * TestMetadata
 */
export type TestMetadataInput = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Sources
     */
    sources?: Array<RhesisBackendAppSchemasTestSourceItem> | null;
};

/**
 * TestMetrics
 */
export type TestMetrics = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Metrics
     */
    metrics?: {
        [key: string]: MetricResult;
    } | null;
};

/**
 * TestOutput
 */
export type TestOutput = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Output
     */
    output?: string | null;
};

/**
 * TestPrompt
 */
export type TestPromptInput = {
    /**
     * Content
     */
    content: string;
    /**
     * Language Code
     */
    language_code?: string;
    /**
     * Demographic
     */
    demographic?: string | null;
    /**
     * Dimension
     */
    dimension?: string | null;
    /**
     * Expected Response
     */
    expected_response?: string | null;
};

/**
 * TestPrompt
 */
export type TestPromptOutput = {
    /**
     * Content
     */
    content: string;
    /**
     * Language Code
     */
    language_code?: string;
};

/**
 * TestPromptCreate
 */
export type TestPromptCreate = {
    /**
     * Content
     */
    content: string;
    /**
     * Language Code
     */
    language_code?: string;
    /**
     * Demographic
     */
    demographic?: string | null;
    /**
     * Dimension
     */
    dimension?: string | null;
    /**
     * Expected Response
     */
    expected_response?: string | null;
};

/**
 * TestReference
 */
export type TestReference = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    counts?: CountsDict | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Tags
     */
    tags?: Array<TagRead> | null;
};

/**
 * TestResult
 */
export type TestResult = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at: string | null;
    /**
     * Updated At
     */
    updated_at: string | null;
    /**
     * Test Configuration Id
     */
    test_configuration_id: string;
    /**
     * Test Run Id
     */
    test_run_id?: string | null;
    /**
     * Prompt Id
     */
    prompt_id?: string | null;
    /**
     * Test Id
     */
    test_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    test_metrics?: TestMetrics | null;
    test_output?: TestOutput | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
};

/**
 * TestResultCreate
 */
export type TestResultCreate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at: string | null;
    /**
     * Updated At
     */
    updated_at: string | null;
    /**
     * Test Configuration Id
     */
    test_configuration_id: string;
    /**
     * Test Run Id
     */
    test_run_id?: string | null;
    /**
     * Prompt Id
     */
    prompt_id?: string | null;
    /**
     * Test Id
     */
    test_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    test_metrics?: TestMetrics | null;
    test_output?: TestOutput | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
};

/**
 * TestResultDetail
 */
export type TestResultDetail = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id: string | null;
    /**
     * Created At
     */
    created_at: string | null;
    /**
     * Updated At
     */
    updated_at: string | null;
    /**
     * Test Configuration Id
     */
    test_configuration_id: string;
    /**
     * Test Run Id
     */
    test_run_id?: string | null;
    /**
     * Prompt Id
     */
    prompt_id?: string | null;
    /**
     * Test Id
     */
    test_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    test_metrics?: TestMetrics | null;
    test_output?: TestOutput | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    counts?: CountsDict | null;
    /**
     * Tags
     */
    tags?: Array<TagRead> | null;
    test_configuration?: RhesisBackendAppUtilsSchemaFactoryTestConfigurationReference1 | null;
    test_run?: TestRunReference | null;
    user?: UserReference | null;
    status?: StatusReference | null;
    organization?: OrganizationReference | null;
    test?: TestReference | null;
};

/**
 * TestResultStatsAll
 * Complete dataset - all sections
 */
export type TestResultStatsAll = {
    /**
     * Metric Pass Rates
     */
    metric_pass_rates: {
        [key: string]: MetricStats;
    };
    /**
     * Behavior Pass Rates
     */
    behavior_pass_rates: {
        [key: string]: MetricStats;
    };
    /**
     * Category Pass Rates
     */
    category_pass_rates: {
        [key: string]: MetricStats;
    };
    /**
     * Topic Pass Rates
     */
    topic_pass_rates: {
        [key: string]: MetricStats;
    };
    overall_pass_rates: OverallStats;
    /**
     * Timeline
     */
    timeline: Array<TimelineData>;
    /**
     * Test Run Summary
     */
    test_run_summary: Array<TestRunSummary>;
    metadata: TestResultStatsMetadata;
};

/**
 * TestResultStatsBehavior
 * Behavior pass/fail rates only
 */
export type TestResultStatsBehavior = {
    /**
     * Behavior Pass Rates
     */
    behavior_pass_rates: {
        [key: string]: MetricStats;
    };
    metadata: TestResultStatsMetadata;
};

/**
 * TestResultStatsCategory
 * Category pass/fail rates only
 */
export type TestResultStatsCategory = {
    /**
     * Category Pass Rates
     */
    category_pass_rates: {
        [key: string]: MetricStats;
    };
    metadata: TestResultStatsMetadata;
};

/**
 * TestResultStatsMetadata
 */
export type TestResultStatsMetadata = {
    /**
     * Generated At
     */
    generated_at: string;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Test Run Id
     */
    test_run_id?: string | null;
    /**
     * Period
     */
    period: string;
    /**
     * Start Date
     */
    start_date: string;
    /**
     * End Date
     */
    end_date: string;
    /**
     * Total Test Runs
     */
    total_test_runs: number;
    /**
     * Total Test Results
     */
    total_test_results: number;
    /**
     * Mode
     */
    mode: string;
    /**
     * Available Metrics
     */
    available_metrics: Array<string>;
    /**
     * Available Behaviors
     */
    available_behaviors: Array<string>;
    /**
     * Available Categories
     */
    available_categories: Array<string>;
    /**
     * Available Topics
     */
    available_topics: Array<string>;
};

/**
 * TestResultStatsMetrics
 * Individual metric pass/fail rates only
 */
export type TestResultStatsMetrics = {
    /**
     * Metric Pass Rates
     */
    metric_pass_rates: {
        [key: string]: MetricStats;
    };
    metadata: TestResultStatsMetadata;
};

/**
 * TestResultStatsMode
 */
export type TestResultStatsMode = 'all' | 'metrics' | 'behavior' | 'category' | 'topic' | 'overall' | 'timeline' | 'test_runs' | 'summary';

/**
 * TestResultStatsOverall
 * Overall pass/fail rates only
 */
export type TestResultStatsOverall = {
    overall_pass_rates: OverallStats;
    metadata: TestResultStatsMetadata;
};

/**
 * TestResultStatsSummary
 * Lightweight summary - overall stats + metadata only
 */
export type TestResultStatsSummary = {
    overall_pass_rates: OverallStats;
    metadata: TestResultStatsMetadata;
};

/**
 * TestResultStatsTestRuns
 * Test run summary only
 */
export type TestResultStatsTestRuns = {
    /**
     * Test Run Summary
     */
    test_run_summary: Array<TestRunSummary>;
    metadata: TestResultStatsMetadata;
};

/**
 * TestResultStatsTimeline
 * Timeline data only
 */
export type TestResultStatsTimeline = {
    /**
     * Timeline
     */
    timeline: Array<TimelineData>;
    metadata: TestResultStatsMetadata;
};

/**
 * TestResultStatsTopic
 * Topic pass/fail rates only
 */
export type TestResultStatsTopic = {
    /**
     * Topic Pass Rates
     */
    topic_pass_rates: {
        [key: string]: MetricStats;
    };
    metadata: TestResultStatsMetadata;
};

/**
 * TestResultUpdate
 */
export type TestResultUpdate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at: string | null;
    /**
     * Updated At
     */
    updated_at: string | null;
    /**
     * Test Configuration Id
     */
    test_configuration_id?: string | null;
    /**
     * Test Run Id
     */
    test_run_id?: string | null;
    /**
     * Prompt Id
     */
    prompt_id?: string | null;
    /**
     * Test Id
     */
    test_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    test_metrics?: TestMetrics | null;
    test_output?: TestOutput | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
};

/**
 * TestRun
 */
export type TestRun = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * User Id
     */
    user_id: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    attributes?: TestRunAttributes | null;
    /**
     * Test Configuration Id
     */
    test_configuration_id: string;
    /**
     * Owner Id
     */
    owner_id?: string | null;
    /**
     * Assignee Id
     */
    assignee_id?: string | null;
};

/**
 * TestRunAttributes
 * Extra metadata for a test run.
 */
export type TestRunAttributes = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Started At
     */
    started_at?: string | null;
    /**
     * Completed At
     */
    completed_at?: string | null;
    /**
     * Environment
     */
    environment?: string | null;
    /**
     * Total Tests
     */
    total_tests?: string | null;
};

/**
 * TestRunCreate
 */
export type TestRunCreate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * User Id
     */
    user_id: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    attributes?: TestRunAttributes | null;
    /**
     * Test Configuration Id
     */
    test_configuration_id: string;
    /**
     * Owner Id
     */
    owner_id?: string | null;
    /**
     * Assignee Id
     */
    assignee_id?: string | null;
};

/**
 * TestRunDetail
 */
export type TestRunDetail = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    attributes?: TestRunAttributes | null;
    /**
     * Test Configuration Id
     */
    test_configuration_id: string;
    /**
     * Owner Id
     */
    owner_id?: string | null;
    /**
     * Assignee Id
     */
    assignee_id?: string | null;
    counts?: CountsDict | null;
    /**
     * Tags
     */
    tags?: Array<TagRead> | null;
    status?: StatusReference | null;
    assignee?: UserReference | null;
    owner?: UserReference | null;
    user?: UserReference | null;
    test_configuration?: RhesisBackendAppUtilsSchemaFactoryTestConfigurationReference2 | null;
    organization?: OrganizationReference | null;
};

/**
 * TestRunOverallSummary
 */
export type TestRunOverallSummary = {
    /**
     * Total Runs
     */
    total_runs: number;
    /**
     * Unique Test Sets
     */
    unique_test_sets: number;
    /**
     * Unique Executors
     */
    unique_executors: number;
    /**
     * Most Common Status
     */
    most_common_status: string;
    /**
     * Pass Rate
     */
    pass_rate: number;
};

/**
 * TestRunReference
 */
export type TestRunReference = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    counts?: CountsDict | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Tags
     */
    tags?: Array<TagRead> | null;
};

/**
 * TestRunStatsAll
 * Complete dataset - all sections
 */
export type TestRunStatsAll = {
    /**
     * Status Distribution
     */
    status_distribution: Array<StatusDistribution>;
    result_distribution: ResultDistribution;
    /**
     * Most Run Test Sets
     */
    most_run_test_sets: Array<TestSetRunCount>;
    /**
     * Top Executors
     */
    top_executors: Array<ExecutorRunCount>;
    /**
     * Timeline
     */
    timeline: Array<TestRunTimelineData>;
    overall_summary: TestRunOverallSummary;
    metadata: TestRunStatsMetadata;
};

/**
 * TestRunStatsExecutors
 * Top executors only
 */
export type TestRunStatsExecutors = {
    /**
     * Top Executors
     */
    top_executors: Array<ExecutorRunCount>;
    metadata: TestRunStatsMetadata;
};

/**
 * TestRunStatsMetadata
 */
export type TestRunStatsMetadata = {
    /**
     * Generated At
     */
    generated_at: string;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Period
     */
    period: string;
    /**
     * Start Date
     */
    start_date: string;
    /**
     * End Date
     */
    end_date: string;
    /**
     * Total Test Runs
     */
    total_test_runs: number;
    /**
     * Mode
     */
    mode: string;
    /**
     * Available Statuses
     */
    available_statuses: Array<string>;
    /**
     * Available Test Sets
     */
    available_test_sets: Array<string>;
    /**
     * Available Executors
     */
    available_executors: Array<string>;
};

/**
 * TestRunStatsMode
 */
export type TestRunStatsMode = 'all' | 'status' | 'results' | 'test_sets' | 'executors' | 'timeline' | 'summary';

/**
 * TestRunStatsResults
 * Result distribution only
 */
export type TestRunStatsResults = {
    result_distribution: ResultDistribution;
    metadata: TestRunStatsMetadata;
};

/**
 * TestRunStatsStatus
 * Status distribution only
 */
export type TestRunStatsStatus = {
    /**
     * Status Distribution
     */
    status_distribution: Array<StatusDistribution>;
    metadata: TestRunStatsMetadata;
};

/**
 * TestRunStatsSummary
 * Lightweight summary - overall summary + metadata only
 */
export type TestRunStatsSummary = {
    overall_summary: TestRunOverallSummary;
    metadata: TestRunStatsMetadata;
};

/**
 * TestRunStatsTests
 * Most run test sets only
 */
export type TestRunStatsTests = {
    /**
     * Most Run Test Sets
     */
    most_run_test_sets: Array<TestSetRunCount>;
    metadata: TestRunStatsMetadata;
};

/**
 * TestRunStatsTimeline
 * Timeline data only
 */
export type TestRunStatsTimeline = {
    /**
     * Timeline
     */
    timeline: Array<TestRunTimelineData>;
    metadata: TestRunStatsMetadata;
};

/**
 * TestRunSummary
 */
export type TestRunSummary = {
    /**
     * Id
     */
    id: string;
    /**
     * Name
     */
    name: string;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Total Tests
     */
    total_tests: number;
    overall: OverallStats;
    /**
     * Metrics
     */
    metrics: {
        [key: string]: MetricStats;
    };
};

/**
 * TestRunTimelineData
 */
export type TestRunTimelineData = {
    /**
     * Date
     */
    date: string;
    /**
     * Total Runs
     */
    total_runs: number;
    /**
     * Status Breakdown
     */
    status_breakdown: {
        [key: string]: number;
    };
    /**
     * Result Breakdown
     */
    result_breakdown: {
        [key: string]: number;
    };
};

/**
 * TestRunUpdate
 */
export type TestRunUpdate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    attributes?: TestRunAttributes | null;
    /**
     * Test Configuration Id
     */
    test_configuration_id?: string | null;
    /**
     * Owner Id
     */
    owner_id?: string | null;
    /**
     * Assignee Id
     */
    assignee_id?: string | null;
};

/**
 * TestSet
 */
export type TestSet = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Short Description
     */
    short_description?: string | null;
    /**
     * Slug
     */
    slug?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Tags
     */
    tags?: Array<Tag>;
    /**
     * License Type Id
     */
    license_type_id?: string | null;
    attributes?: TestSetAttributesOutput | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Owner Id
     */
    owner_id?: string | null;
    /**
     * Assignee Id
     */
    assignee_id?: string | null;
    /**
     * Priority
     */
    priority?: number;
    /**
     * Is Published
     */
    is_published?: boolean;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Visibility
     */
    visibility?: string | null;
};

/**
 * TestSetAttributes
 * Structured attributes as seen in the payload.
 */
export type TestSetAttributesInput = {
    /**
     * Categories
     */
    categories?: Array<string> | null;
    /**
     * Topics
     */
    topics?: Array<string> | null;
    /**
     * Behaviors
     */
    behaviors?: Array<string> | null;
    /**
     * Use Cases
     */
    use_cases?: Array<string> | null;
    /**
     * Sources
     */
    sources?: Array<RhesisBackendAppSchemasTestSetSourceItem> | null;
    /**
     * Total Tests
     */
    total_tests?: number | null;
    metadata?: TestSetLabelBuckets | null;
};

/**
 * TestSetAttributes
 * Structured attributes as seen in the payload.
 */
export type TestSetAttributesOutput = {
    /**
     * Categories
     */
    categories?: Array<string> | null;
    /**
     * Topics
     */
    topics?: Array<string> | null;
    /**
     * Behaviors
     */
    behaviors?: Array<string> | null;
    /**
     * Use Cases
     */
    use_cases?: Array<string> | null;
    /**
     * Sources
     */
    sources?: Array<RhesisBackendAppSchemasTestSetSourceItem> | null;
    /**
     * Total Tests
     */
    total_tests?: number | null;
    metadata?: TestSetLabelBuckets | null;
};

/**
 * TestSetBulkAssociateRequest
 */
export type TestSetBulkAssociateRequest = {
    /**
     * Test Ids
     */
    test_ids: Array<string>;
};

/**
 * TestSetBulkAssociateResponse
 */
export type TestSetBulkAssociateResponse = {
    /**
     * Success
     */
    success: boolean;
    /**
     * Total Tests
     */
    total_tests: number;
    /**
     * Message
     */
    message: string;
    /**
     * Metadata
     */
    metadata?: {
        [key: string]: JsonOutput;
    };
};

/**
 * TestSetBulkCreate
 */
export type TestSetBulkCreate = {
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Short Description
     */
    short_description?: string | null;
    /**
     * Owner Id
     */
    owner_id?: string | null;
    /**
     * Assignee Id
     */
    assignee_id?: string | null;
    /**
     * Priority
     */
    priority?: number | null;
    /**
     * Tests
     */
    tests: Array<TestData>;
    /**
     * Metadata
     */
    metadata?: {
        [key: string]: JsonInput;
    } | null;
};

/**
 * TestSetBulkDisassociateRequest
 */
export type TestSetBulkDisassociateRequest = {
    /**
     * Test Ids
     */
    test_ids: Array<string>;
};

/**
 * TestSetBulkDisassociateResponse
 */
export type TestSetBulkDisassociateResponse = {
    /**
     * Success
     */
    success: boolean;
    /**
     * Total Tests
     */
    total_tests: number;
    /**
     * Removed Associations
     */
    removed_associations: number;
    /**
     * Message
     */
    message: string;
};

/**
 * TestSetBulkResponse
 */
export type TestSetBulkResponse = {
    /**
     * Id
     */
    id: string;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Short Description
     */
    short_description?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * License Type Id
     */
    license_type_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Visibility
     */
    visibility?: string | null;
    /**
     * Attributes
     */
    attributes?: {
        [key: string]: JsonOutput;
    } | null;
};

/**
 * TestSetCreate
 */
export type TestSetCreate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Short Description
     */
    short_description?: string | null;
    /**
     * Slug
     */
    slug?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Tags
     */
    tags?: Array<Tag>;
    /**
     * License Type Id
     */
    license_type_id?: string | null;
    attributes?: TestSetAttributesInput | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Owner Id
     */
    owner_id?: string | null;
    /**
     * Assignee Id
     */
    assignee_id?: string | null;
    /**
     * Priority
     */
    priority?: number;
    /**
     * Is Published
     */
    is_published?: boolean;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Visibility
     */
    visibility?: string | null;
};

/**
 * TestSetDetail
 */
export type TestSetDetail = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Short Description
     */
    short_description?: string | null;
    /**
     * Slug
     */
    slug?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Tags
     */
    tags?: Array<TagRead> | null;
    /**
     * License Type Id
     */
    license_type_id?: string | null;
    attributes?: TestSetAttributesOutput | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Owner Id
     */
    owner_id?: string | null;
    /**
     * Assignee Id
     */
    assignee_id?: string | null;
    /**
     * Priority
     */
    priority?: number;
    /**
     * Is Published
     */
    is_published?: boolean;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Visibility
     */
    visibility?: string | null;
    counts?: CountsDict | null;
    status?: StatusReference | null;
    license_type?: TypeLookupReference | null;
    user?: UserReference | null;
    owner?: UserReference | null;
    assignee?: UserReference | null;
    organization?: OrganizationReference | null;
};

/**
 * TestSetExecutionRequest
 * Request model for test set execution.
 */
export type TestSetExecutionRequest = {
    /**
     * Execution Mode
     */
    execution_mode?: 'Parallel' | 'Sequential';
};

/**
 * TestSetExecutionResponse
 */
export type TestSetExecutionResponse = {
    /**
     * Status
     */
    status: string;
    /**
     * Message
     */
    message?: string | null;
    /**
     * Test Run Id
     */
    test_run_id?: string | null;
    /**
     * Task Id
     */
    task_id?: string | null;
};

/**
 * TestSetGenerationConfig
 */
export type TestSetGenerationConfig = {
    /**
     * Project Name
     */
    project_name?: string | null;
    /**
     * Behaviors
     */
    behaviors?: Array<string>;
    /**
     * Purposes
     */
    purposes?: Array<string>;
    /**
     * Test Type
     */
    test_type?: string;
    /**
     * Response Generation
     */
    response_generation?: string;
    /**
     * Test Coverage
     */
    test_coverage?: string;
    /**
     * Tags
     */
    tags?: Array<string>;
    /**
     * Description
     */
    description?: string;
};

/**
 * TestSetGenerationRequest
 */
export type TestSetGenerationRequest = {
    config: TestSetGenerationConfig;
    /**
     * Samples
     */
    samples?: Array<GenerationSample>;
    /**
     * Synthesizer Type
     */
    synthesizer_type?: string;
    /**
     * Num Tests
     */
    num_tests?: number | null;
    /**
     * Batch Size
     */
    batch_size?: number;
    /**
     * Documents
     */
    documents?: Array<Document> | null;
};

/**
 * TestSetGenerationResponse
 */
export type TestSetGenerationResponse = {
    /**
     * Task Id
     */
    task_id: string;
    /**
     * Message
     */
    message: string;
    /**
     * Estimated Tests
     */
    estimated_tests: number;
};

/**
 * TestSetLabelBuckets
 * Human-readable label buckets (NOT UUIDs).
 */
export type TestSetLabelBuckets = {
    /**
     * Categories
     */
    categories?: Array<string> | null;
    /**
     * Topics
     */
    topics?: Array<string> | null;
    /**
     * Behaviors
     */
    behaviors?: Array<string> | null;
    /**
     * Sources
     */
    sources?: Array<RhesisBackendAppSchemasTestSetSourceItem> | null;
    /**
     * Total Tests
     */
    total_tests?: number | null;
};

/**
 * TestSetReference
 */
export type TestSetReference = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    counts?: CountsDict | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Tags
     */
    tags?: Array<TagRead> | null;
};

/**
 * TestSetRunCount
 */
export type TestSetRunCount = {
    /**
     * Test Set Name
     */
    test_set_name: string;
    /**
     * Run Count
     */
    run_count: number;
};

/**
 * TestSetUpdate
 */
export type TestSetUpdate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Short Description
     */
    short_description?: string | null;
    /**
     * Slug
     */
    slug?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Tags
     */
    tags?: Array<Tag>;
    /**
     * License Type Id
     */
    license_type_id?: string | null;
    attributes?: TestSetAttributesInput | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Owner Id
     */
    owner_id?: string | null;
    /**
     * Assignee Id
     */
    assignee_id?: string | null;
    /**
     * Priority
     */
    priority?: number;
    /**
     * Is Published
     */
    is_published?: boolean;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Visibility
     */
    visibility?: string | null;
};

/**
 * TestStats
 * Schema matching get_individual_test_stats(...) output.
 */
export type TestStats = {
    overall_summary: TestStatsOverallSummary;
    /**
     * Metric Breakdown
     */
    metric_breakdown: {
        [key: string]: MetricStats;
    };
    /**
     * Recent Runs
     */
    recent_runs: Array<TestStatsRecentRun>;
    metadata: TestStatsMetadata;
};

/**
 * TestStatsMetadata
 */
export type TestStatsMetadata = {
    /**
     * Generated At
     */
    generated_at: string;
    /**
     * Test Id
     */
    test_id: string;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Start Date
     */
    start_date?: string | null;
    /**
     * End Date
     */
    end_date?: string | null;
    /**
     * Period
     */
    period: string;
    /**
     * Recent Runs Limit
     */
    recent_runs_limit?: number | null;
    /**
     * Available Metrics
     */
    available_metrics?: Array<string>;
};

/**
 * TestStatsMetricResult
 */
export type TestStatsMetricResult = {
    /**
     * Is Successful
     */
    is_successful: boolean;
    /**
     * Score
     */
    score?: number | null;
    /**
     * Reason
     */
    reason?: string | null;
};

/**
 * TestStatsOverallSummary
 */
export type TestStatsOverallSummary = {
    /**
     * Total Test Runs
     */
    total_test_runs: number;
    /**
     * Total Executions
     */
    total_executions: number;
    /**
     * Passed
     */
    passed: number;
    /**
     * Failed
     */
    failed: number;
    /**
     * Pass Rate
     */
    pass_rate: number;
    /**
     * Avg Execution Time Ms
     */
    avg_execution_time_ms: number;
};

/**
 * TestStatsRecentRun
 */
export type TestStatsRecentRun = {
    /**
     * Test Run Id
     */
    test_run_id: string;
    /**
     * Test Run Name
     */
    test_run_name?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Overall Passed
     */
    overall_passed: boolean;
    /**
     * Execution Time Ms
     */
    execution_time_ms?: number | null;
    /**
     * Metrics
     */
    metrics: {
        [key: string]: TestStatsMetricResult;
    };
};

/**
 * TestUpdate
 */
export type TestUpdate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Prompt Id
     */
    prompt_id?: string | null;
    /**
     * Test Set Id
     */
    test_set_id?: string | null;
    /**
     * Test Type Id
     */
    test_type_id?: string | null;
    /**
     * Priority
     */
    priority?: number | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Assignee Id
     */
    assignee_id?: string | null;
    /**
     * Owner Id
     */
    owner_id?: string | null;
    /**
     * Test Configuration
     */
    test_configuration?: {
        [key: string]: JsonInput;
    } | null;
    /**
     * Parent Id
     */
    parent_id?: string | null;
    /**
     * Topic Id
     */
    topic_id?: string | null;
    /**
     * Behavior Id
     */
    behavior_id?: string | null;
    /**
     * Category Id
     */
    category_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Source Id
     */
    source_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    test_metadata?: TestMetadataInput | null;
};

/**
 * TextResponse
 */
export type TextResponse = {
    /**
     * Text
     */
    text: string;
};

/**
 * ThresholdOperator
 */
export type ThresholdOperator = '=' | '<' | '>' | '<=' | '>=' | '!=';

/**
 * TimelineData
 */
export type TimelineData = {
    /**
     * Date
     */
    date: string;
    overall: OverallStats;
    /**
     * Metrics
     */
    metrics: {
        [key: string]: MetricStats;
    };
};

/**
 * TokenCreateBody
 */
export type TokenCreateBody = {
    /**
     * Name
     * Display name for this API token
     */
    name: string;
    /**
     * Expires In Days
     * Days until expiration (optional)
     */
    expires_in_days?: number | null;
};

/**
 * TokenCreateResponse
 */
export type TokenCreateResponse = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Access Token
     */
    access_token: string;
    /**
     * Token Obfuscated
     */
    token_obfuscated: string;
    /**
     * Token Type
     */
    token_type: string;
    /**
     * Expires At
     */
    expires_at: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Last Refreshed At
     */
    last_refreshed_at?: string | null;
};

/**
 * TokenRead
 */
export type TokenRead = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
    /**
     * Name
     */
    name: string;
    /**
     * Token Type
     */
    token_type?: string;
    /**
     * Expires At
     */
    expires_at?: string | null;
    /**
     * User Id
     */
    user_id: string;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Token Obfuscated
     */
    token_obfuscated: string;
    /**
     * Last Used At
     */
    last_used_at: string | null;
    /**
     * Last Refreshed At
     */
    last_refreshed_at: string | null;
};

/**
 * TokenRefreshBody
 */
export type TokenRefreshBody = {
    /**
     * Expires In Days
     * Days until new expiration (optional)
     */
    expires_in_days?: number | null;
};

/**
 * TokenUpdate
 */
export type TokenUpdate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Token Type
     */
    token_type?: string | null;
    /**
     * Expires At
     */
    expires_at?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Token
     */
    token?: string | null;
    /**
     * Token Hash
     */
    token_hash?: string | null;
    /**
     * Token Obfuscated
     */
    token_obfuscated?: string | null;
    /**
     * Last Used At
     */
    last_used_at?: string | null;
    /**
     * Last Refreshed At
     */
    last_refreshed_at?: string | null;
};

/**
 * Topic
 */
export type Topic = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Parent Id
     */
    parent_id?: string | null;
    /**
     * Entity Type Id
     */
    entity_type_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
};

/**
 * TopicCreate
 */
export type TopicCreate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Parent Id
     */
    parent_id?: string | null;
    /**
     * Entity Type Id
     */
    entity_type_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
};

/**
 * TopicDetail
 */
export type TopicDetail = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Parent Id
     */
    parent_id?: string | null;
    /**
     * Entity Type Id
     */
    entity_type_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    status?: StatusReference | null;
    parent?: TopicReference | null;
    entity_type?: TypeLookupReference | null;
    organization?: OrganizationReference | null;
    user?: UserReference | null;
};

/**
 * TopicReference
 */
export type TopicReference = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
};

/**
 * TopicUpdate
 */
export type TopicUpdate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Parent Id
     */
    parent_id?: string | null;
    /**
     * Entity Type Id
     */
    entity_type_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
};

/**
 * TypeLookup
 */
export type TypeLookup = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Type Name
     */
    type_name: string;
    /**
     * Type Value
     */
    type_value: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
};

/**
 * TypeLookupCreate
 */
export type TypeLookupCreate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Type Name
     */
    type_name: string;
    /**
     * Type Value
     */
    type_value: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
};

/**
 * TypeLookupReference
 */
export type TypeLookupReference = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Type Name
     */
    type_name?: string | null;
    /**
     * Type Value
     */
    type_value?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
};

/**
 * TypeLookupUpdate
 */
export type TypeLookupUpdate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Type Name
     */
    type_name?: string | null;
    /**
     * Type Value
     */
    type_value?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
};

/**
 * UseCase
 */
export type UseCase = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description: string;
    /**
     * Industry
     */
    industry?: string | null;
    /**
     * Application
     */
    application?: string | null;
    /**
     * Is Active
     */
    is_active?: boolean | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
};

/**
 * UseCaseCreate
 */
export type UseCaseCreate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description: string;
    /**
     * Industry
     */
    industry?: string | null;
    /**
     * Application
     */
    application?: string | null;
    /**
     * Is Active
     */
    is_active?: boolean | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
};

/**
 * UseCaseReference
 */
export type UseCaseReference = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
};

/**
 * UseCaseUpdate
 */
export type UseCaseUpdate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Industry
     */
    industry?: string | null;
    /**
     * Application
     */
    application?: string | null;
    /**
     * Is Active
     */
    is_active?: boolean | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
};

/**
 * User
 */
export type User = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Email
     * Email address cannot be empty
     */
    email: string;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Given Name
     */
    given_name?: string | null;
    /**
     * Family Name
     */
    family_name?: string | null;
    /**
     * Auth0 Id
     */
    auth0_id?: string | null;
    /**
     * Picture
     */
    picture?: string | null;
    /**
     * Is Active
     */
    is_active?: boolean | null;
    /**
     * Is Superuser
     */
    is_superuser?: boolean | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Last Login At
     */
    last_login_at?: string | null;
};

/**
 * UserCreate
 */
export type UserCreate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Email
     * Email address cannot be empty
     */
    email: string;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Given Name
     */
    given_name?: string | null;
    /**
     * Family Name
     */
    family_name?: string | null;
    /**
     * Auth0 Id
     */
    auth0_id?: string | null;
    /**
     * Picture
     */
    picture?: string | null;
    /**
     * Is Active
     */
    is_active?: boolean | null;
    /**
     * Is Superuser
     */
    is_superuser?: boolean | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Last Login At
     */
    last_login_at?: string | null;
    /**
     * Send Invite
     */
    send_invite?: boolean | null;
};

/**
 * UserReference
 */
export type UserReference = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Email
     */
    email?: string | null;
    /**
     * Family Name
     */
    family_name?: string | null;
    /**
     * Given Name
     */
    given_name?: string | null;
    /**
     * Picture
     */
    picture?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
};

/**
 * UserUpdate
 */
export type UserUpdate = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Email
     */
    email?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Given Name
     */
    given_name?: string | null;
    /**
     * Family Name
     */
    family_name?: string | null;
    /**
     * Auth0 Id
     */
    auth0_id?: string | null;
    /**
     * Picture
     */
    picture?: string | null;
    /**
     * Is Active
     */
    is_active?: boolean | null;
    /**
     * Is Superuser
     */
    is_superuser?: boolean | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Last Login At
     */
    last_login_at?: string | null;
};

/**
 * UserUpdateResponse
 */
export type UserUpdateResponse = {
    user: User;
    /**
     * Session Token
     */
    session_token?: string | null;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

/**
 * VerifyAuthResponse
 */
export type VerifyAuthResponse = {
    /**
     * Authenticated
     */
    authenticated: boolean;
    user: User;
    /**
     * Return To
     */
    return_to: string;
};

/**
 * Paginated[BehaviorDetail]
 */
export type RhesisBackendAppSchemasPaginationPaginatedBehaviorDetail1 = {
    /**
     * Data
     */
    data: Array<RhesisBackendAppUtilsSchemaFactoryBehaviorDetail1>;
    pagination: Pagination;
};

/**
 * Paginated[BehaviorDetail]
 */
export type RhesisBackendAppSchemasPaginationPaginatedBehaviorDetail2 = {
    /**
     * Data
     */
    data: Array<RhesisBackendAppUtilsSchemaFactoryBehaviorDetail2>;
    pagination: Pagination;
};

/**
 * Paginated[MetricDetail]
 */
export type RhesisBackendAppSchemasPaginationPaginatedMetricDetail1 = {
    /**
     * Data
     */
    data: Array<RhesisBackendAppUtilsSchemaFactoryMetricDetail1>;
    pagination: Pagination;
};

/**
 * Paginated[MetricDetail]
 */
export type RhesisBackendAppSchemasPaginationPaginatedMetricDetail2 = {
    /**
     * Data
     */
    data: Array<RhesisBackendAppUtilsSchemaFactoryMetricDetail2>;
    pagination: Pagination;
};

/**
 * Test
 */
export type RhesisBackendAppSchemasServicesTest = {
    prompt: TestPromptOutput;
    /**
     * Behavior
     */
    behavior: string;
    /**
     * Category
     */
    category: string;
    /**
     * Topic
     */
    topic: string;
    metadata: RhesisBackendAppSchemasServicesTestMetadata;
};

/**
 * TestMetadata
 */
export type RhesisBackendAppSchemasServicesTestMetadata = {
    /**
     * Generated By
     */
    generated_by: string;
    /**
     * Additional Info
     */
    additional_info?: {
        [key: string]: JsonOutput;
    } | null;
};

/**
 * SourceItem
 */
export type RhesisBackendAppSchemasTestSourceItem = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Document
     */
    document?: string | null;
    /**
     * Source
     */
    source?: string | null;
    /**
     * Content
     */
    content?: string | null;
};

/**
 * Test
 */
export type RhesisBackendAppSchemasTestTest = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
    /**
     * Prompt Id
     */
    prompt_id: string;
    /**
     * Test Set Id
     */
    test_set_id?: string | null;
    /**
     * Test Type Id
     */
    test_type_id?: string | null;
    /**
     * Priority
     */
    priority?: number | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Assignee Id
     */
    assignee_id?: string | null;
    /**
     * Owner Id
     */
    owner_id?: string | null;
    /**
     * Test Configuration
     */
    test_configuration?: {
        [key: string]: JsonOutput;
    } | null;
    /**
     * Parent Id
     */
    parent_id?: string | null;
    /**
     * Topic Id
     */
    topic_id?: string | null;
    /**
     * Behavior Id
     */
    behavior_id?: string | null;
    /**
     * Category Id
     */
    category_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Source Id
     */
    source_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    test_metadata?: RhesisBackendAppSchemasTestTestMetadata | null;
};

/**
 * TestMetadata
 */
export type RhesisBackendAppSchemasTestTestMetadata = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Nano Id
     */
    nano_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Sources
     */
    sources?: Array<RhesisBackendAppSchemasTestSourceItem> | null;
};

/**
 * SourceItem
 */
export type RhesisBackendAppSchemasTestSetSourceItem = {
    /**
     * Name
     */
    name?: string | null;
    /**
     * Document
     */
    document?: string | null;
    /**
     * Description
     */
    description?: string | null;
};

/**
 * BehaviorDetail
 */
export type RhesisBackendAppUtilsSchemaFactoryBehaviorDetail1 = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    counts?: CountsDict | null;
    status?: StatusReference | null;
    /**
     * Metrics
     */
    metrics?: Array<MetricReference>;
    organization?: OrganizationReference | null;
    user?: UserReference | null;
};

/**
 * BehaviorDetail
 */
export type RhesisBackendAppUtilsSchemaFactoryBehaviorDetail2 = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    counts?: CountsDict | null;
    status?: StatusReference | null;
    organization?: OrganizationReference | null;
    user?: UserReference | null;
};

/**
 * EndpointReference
 */
export type RhesisBackendAppUtilsSchemaFactoryEndpointReference1 = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Tags
     */
    tags?: Array<TagRead> | null;
    /**
     * Project Id
     */
    project_id?: string | null;
};

/**
 * EndpointReference
 */
export type RhesisBackendAppUtilsSchemaFactoryEndpointReference2 = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Tags
     */
    tags?: Array<TagRead> | null;
    /**
     * Project Id
     */
    project_id?: string | null;
    project?: ProjectReference | null;
};

/**
 * MetricDetail
 */
export type RhesisBackendAppUtilsSchemaFactoryMetricDetail1 = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id: string | null;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Evaluation Prompt
     */
    evaluation_prompt: string;
    /**
     * Evaluation Steps
     */
    evaluation_steps?: string | null;
    /**
     * Reasoning
     */
    reasoning?: string | null;
    score_type: ScoreType;
    /**
     * Min Score
     */
    min_score?: number | null;
    /**
     * Max Score
     */
    max_score?: number | null;
    /**
     * Reference Score
     */
    reference_score?: string | null;
    /**
     * Threshold
     */
    threshold?: number | null;
    threshold_operator?: ThresholdOperator | null;
    /**
     * Explanation
     */
    explanation?: string | null;
    /**
     * Metric Type Id
     */
    metric_type_id?: string | null;
    /**
     * Backend Type Id
     */
    backend_type_id?: string | null;
    /**
     * Model Id
     */
    model_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Assignee Id
     */
    assignee_id?: string | null;
    /**
     * Owner Id
     */
    owner_id?: string | null;
    /**
     * Class Name
     */
    class_name?: string | null;
    /**
     * Ground Truth Required
     */
    ground_truth_required?: boolean | null;
    /**
     * Context Required
     */
    context_required?: boolean | null;
    /**
     * Evaluation Examples
     */
    evaluation_examples?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Tags
     */
    tags?: Array<TagRead> | null;
    counts?: CountsDict | null;
    metric_type?: TypeLookupReference | null;
    status?: StatusReference | null;
    assignee?: UserReference | null;
    owner?: UserReference | null;
    model?: ModelReference | null;
    backend_type?: TypeLookupReference | null;
    user?: UserReference | null;
    organization?: OrganizationReference | null;
};

/**
 * MetricDetail
 */
export type RhesisBackendAppUtilsSchemaFactoryMetricDetail2 = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id: string | null;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Evaluation Prompt
     */
    evaluation_prompt: string;
    /**
     * Evaluation Steps
     */
    evaluation_steps?: string | null;
    /**
     * Reasoning
     */
    reasoning?: string | null;
    score_type: ScoreType;
    /**
     * Min Score
     */
    min_score?: number | null;
    /**
     * Max Score
     */
    max_score?: number | null;
    /**
     * Reference Score
     */
    reference_score?: string | null;
    /**
     * Threshold
     */
    threshold?: number | null;
    threshold_operator?: ThresholdOperator | null;
    /**
     * Explanation
     */
    explanation?: string | null;
    /**
     * Metric Type Id
     */
    metric_type_id?: string | null;
    /**
     * Backend Type Id
     */
    backend_type_id?: string | null;
    /**
     * Model Id
     */
    model_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Assignee Id
     */
    assignee_id?: string | null;
    /**
     * Owner Id
     */
    owner_id?: string | null;
    /**
     * Class Name
     */
    class_name?: string | null;
    /**
     * Ground Truth Required
     */
    ground_truth_required?: boolean | null;
    /**
     * Context Required
     */
    context_required?: boolean | null;
    /**
     * Evaluation Examples
     */
    evaluation_examples?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Tags
     */
    tags?: Array<TagRead> | null;
    counts?: CountsDict | null;
    metric_type?: TypeLookupReference | null;
    status?: StatusReference | null;
    assignee?: UserReference | null;
    owner?: UserReference | null;
    model?: ModelReference | null;
    backend_type?: TypeLookupReference | null;
    /**
     * Behaviors
     */
    behaviors?: Array<BehaviorReference>;
    user?: UserReference | null;
    organization?: OrganizationReference | null;
};

/**
 * TestConfigurationReference
 */
export type RhesisBackendAppUtilsSchemaFactoryTestConfigurationReference1 = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Endpoint Id
     */
    endpoint_id?: string | null;
};

/**
 * TestConfigurationReference
 */
export type RhesisBackendAppUtilsSchemaFactoryTestConfigurationReference2 = {
    /**
     * Id
     */
    id: string;
    /**
     * Nano Id
     */
    nano_id: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Status Id
     */
    status_id?: string | null;
    /**
     * Endpoint Id
     */
    endpoint_id?: string | null;
    endpoint?: RhesisBackendAppUtilsSchemaFactoryEndpointReference2 | null;
    test_set?: TestSetReference | null;
};

export type LoginAuthLoginGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Connection
         */
        connection?: string;
        /**
         * Return To
         */
        return_to?: string;
    };
    url: '/auth/login';
};

export type LoginAuthLoginGetErrors = {
    /**
     * Login error
     */
    400: {
        detail?: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Server misconfiguration (e.g. AUTH0_DOMAIN missing)
     */
    500: {
        detail?: string;
    };
};

export type LoginAuthLoginGetError = LoginAuthLoginGetErrors[keyof LoginAuthLoginGetErrors];

export type AuthCallbackAuthCallbackGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/callback';
};

export type AuthCallbackAuthCallbackGetErrors = {
    /**
     * Callback error
     */
    400: {
        detail?: string;
    };
};

export type AuthCallbackAuthCallbackGetError = AuthCallbackAuthCallbackGetErrors[keyof AuthCallbackAuthCallbackGetErrors];

export type LogoutAuthLogoutGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Post Logout
         */
        post_logout?: boolean;
        /**
         * Session Token
         */
        session_token?: string;
    };
    url: '/auth/logout';
};

export type LogoutAuthLogoutGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LogoutAuthLogoutGetError = LogoutAuthLogoutGetErrors[keyof LogoutAuthLogoutGetErrors];

export type LogoutAuthLogoutGetResponses = {
    /**
     * Successful Response
     */
    200: LogoutResponse;
};

export type LogoutAuthLogoutGetResponse = LogoutAuthLogoutGetResponses[keyof LogoutAuthLogoutGetResponses];

export type VerifyAuthAuthVerifyGetData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Session Token
         */
        session_token: string;
        /**
         * Return To
         */
        return_to?: string;
    };
    url: '/auth/verify';
};

export type VerifyAuthAuthVerifyGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type VerifyAuthAuthVerifyGetError = VerifyAuthAuthVerifyGetErrors[keyof VerifyAuthAuthVerifyGetErrors];

export type VerifyAuthAuthVerifyGetResponses = {
    /**
     * Successful Response
     */
    200: VerifyAuthResponse;
};

export type VerifyAuthAuthVerifyGetResponse = VerifyAuthAuthVerifyGetResponses[keyof VerifyAuthAuthVerifyGetResponses];

export type DemoRedirectAuthDemoGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/demo';
};

export type DemoRedirectAuthDemoGetErrors = {
    /**
     * Demo redirect error
     */
    400: {
        detail?: string;
    };
    /**
     * Server misconfiguration (e.g. AUTH0_DOMAIN missing)
     */
    500: {
        detail?: string;
    };
};

export type DemoRedirectAuthDemoGetError = DemoRedirectAuthDemoGetErrors[keyof DemoRedirectAuthDemoGetErrors];

export type ReadBehaviorsBehaviorsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Sort By
         */
        sort_by?: string;
        /**
         * Sort Order
         */
        sort_order?: string;
        /**
         * $Filter
         * OData filter expression
         */
        $filter?: string | null;
    };
    url: '/behaviors/';
};

export type ReadBehaviorsBehaviorsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadBehaviorsBehaviorsGetError = ReadBehaviorsBehaviorsGetErrors[keyof ReadBehaviorsBehaviorsGetErrors];

export type ReadBehaviorsBehaviorsGetResponses = {
    /**
     * Successful Response
     */
    200: RhesisBackendAppSchemasPaginationPaginatedBehaviorDetail1;
};

export type ReadBehaviorsBehaviorsGetResponse = ReadBehaviorsBehaviorsGetResponses[keyof ReadBehaviorsBehaviorsGetResponses];

export type CreateBehaviorBehaviorsPostData = {
    body: BehaviorCreate;
    path?: never;
    query?: never;
    url: '/behaviors/';
};

export type CreateBehaviorBehaviorsPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateBehaviorBehaviorsPostError = CreateBehaviorBehaviorsPostErrors[keyof CreateBehaviorBehaviorsPostErrors];

export type CreateBehaviorBehaviorsPostResponses = {
    /**
     * Successful Response
     */
    200: RhesisBackendAppUtilsSchemaFactoryBehaviorDetail1;
};

export type CreateBehaviorBehaviorsPostResponse = CreateBehaviorBehaviorsPostResponses[keyof CreateBehaviorBehaviorsPostResponses];

export type DeleteBehaviorBehaviorsBehaviorIdDeleteData = {
    body?: never;
    path: {
        /**
         * Behavior Id
         */
        behavior_id: string;
    };
    query?: never;
    url: '/behaviors/{behavior_id}';
};

export type DeleteBehaviorBehaviorsBehaviorIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteBehaviorBehaviorsBehaviorIdDeleteError = DeleteBehaviorBehaviorsBehaviorIdDeleteErrors[keyof DeleteBehaviorBehaviorsBehaviorIdDeleteErrors];

export type DeleteBehaviorBehaviorsBehaviorIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: RhesisBackendAppUtilsSchemaFactoryBehaviorDetail1;
};

export type DeleteBehaviorBehaviorsBehaviorIdDeleteResponse = DeleteBehaviorBehaviorsBehaviorIdDeleteResponses[keyof DeleteBehaviorBehaviorsBehaviorIdDeleteResponses];

export type ReadBehaviorBehaviorsBehaviorIdGetData = {
    body?: never;
    path: {
        /**
         * Behavior Id
         */
        behavior_id: string;
    };
    query?: never;
    url: '/behaviors/{behavior_id}';
};

export type ReadBehaviorBehaviorsBehaviorIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadBehaviorBehaviorsBehaviorIdGetError = ReadBehaviorBehaviorsBehaviorIdGetErrors[keyof ReadBehaviorBehaviorsBehaviorIdGetErrors];

export type ReadBehaviorBehaviorsBehaviorIdGetResponses = {
    /**
     * Successful Response
     */
    200: RhesisBackendAppUtilsSchemaFactoryBehaviorDetail1;
};

export type ReadBehaviorBehaviorsBehaviorIdGetResponse = ReadBehaviorBehaviorsBehaviorIdGetResponses[keyof ReadBehaviorBehaviorsBehaviorIdGetResponses];

export type UpdateBehaviorBehaviorsBehaviorIdPutData = {
    body: BehaviorUpdate;
    path: {
        /**
         * Behavior Id
         */
        behavior_id: string;
    };
    query?: never;
    url: '/behaviors/{behavior_id}';
};

export type UpdateBehaviorBehaviorsBehaviorIdPutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateBehaviorBehaviorsBehaviorIdPutError = UpdateBehaviorBehaviorsBehaviorIdPutErrors[keyof UpdateBehaviorBehaviorsBehaviorIdPutErrors];

export type UpdateBehaviorBehaviorsBehaviorIdPutResponses = {
    /**
     * Successful Response
     */
    200: RhesisBackendAppUtilsSchemaFactoryBehaviorDetail1;
};

export type UpdateBehaviorBehaviorsBehaviorIdPutResponse = UpdateBehaviorBehaviorsBehaviorIdPutResponses[keyof UpdateBehaviorBehaviorsBehaviorIdPutResponses];

export type ReadBehaviorMetricsBehaviorsBehaviorIdMetricsGetData = {
    body?: never;
    path: {
        /**
         * Behavior Id
         */
        behavior_id: string;
    };
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Sort By
         */
        sort_by?: string;
        /**
         * Sort Order
         */
        sort_order?: string;
        /**
         * $Filter
         * OData filter expression
         */
        $filter?: string | null;
        /**
         * Organization Id
         */
        organization_id?: string;
        /**
         * User Id
         */
        user_id?: string;
    };
    url: '/behaviors/{behavior_id}/metrics/';
};

export type ReadBehaviorMetricsBehaviorsBehaviorIdMetricsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadBehaviorMetricsBehaviorsBehaviorIdMetricsGetError = ReadBehaviorMetricsBehaviorsBehaviorIdMetricsGetErrors[keyof ReadBehaviorMetricsBehaviorsBehaviorIdMetricsGetErrors];

export type ReadBehaviorMetricsBehaviorsBehaviorIdMetricsGetResponses = {
    /**
     * Successful Response
     */
    200: RhesisBackendAppSchemasPaginationPaginatedMetricDetail1;
};

export type ReadBehaviorMetricsBehaviorsBehaviorIdMetricsGetResponse = ReadBehaviorMetricsBehaviorsBehaviorIdMetricsGetResponses[keyof ReadBehaviorMetricsBehaviorsBehaviorIdMetricsGetResponses];

export type RemoveMetricFromBehaviorBehaviorsBehaviorIdMetricsMetricIdDeleteData = {
    body?: never;
    path: {
        /**
         * Behavior Id
         */
        behavior_id: string;
        /**
         * Metric Id
         */
        metric_id: string;
    };
    query?: never;
    url: '/behaviors/{behavior_id}/metrics/{metric_id}';
};

export type RemoveMetricFromBehaviorBehaviorsBehaviorIdMetricsMetricIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RemoveMetricFromBehaviorBehaviorsBehaviorIdMetricsMetricIdDeleteError = RemoveMetricFromBehaviorBehaviorsBehaviorIdMetricsMetricIdDeleteErrors[keyof RemoveMetricFromBehaviorBehaviorsBehaviorIdMetricsMetricIdDeleteErrors];

export type RemoveMetricFromBehaviorBehaviorsBehaviorIdMetricsMetricIdDeleteResponses = {
    /**
     * Response Remove Metric From Behavior Behaviors  Behavior Id  Metrics  Metric Id  Delete
     * Successful Response
     */
    200: {
        [key: string]: string;
    };
};

export type RemoveMetricFromBehaviorBehaviorsBehaviorIdMetricsMetricIdDeleteResponse = RemoveMetricFromBehaviorBehaviorsBehaviorIdMetricsMetricIdDeleteResponses[keyof RemoveMetricFromBehaviorBehaviorsBehaviorIdMetricsMetricIdDeleteResponses];

export type AddMetricToBehaviorBehaviorsBehaviorIdMetricsMetricIdPostData = {
    body?: never;
    path: {
        /**
         * Behavior Id
         */
        behavior_id: string;
        /**
         * Metric Id
         */
        metric_id: string;
    };
    query?: never;
    url: '/behaviors/{behavior_id}/metrics/{metric_id}';
};

export type AddMetricToBehaviorBehaviorsBehaviorIdMetricsMetricIdPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AddMetricToBehaviorBehaviorsBehaviorIdMetricsMetricIdPostError = AddMetricToBehaviorBehaviorsBehaviorIdMetricsMetricIdPostErrors[keyof AddMetricToBehaviorBehaviorsBehaviorIdMetricsMetricIdPostErrors];

export type AddMetricToBehaviorBehaviorsBehaviorIdMetricsMetricIdPostResponses = {
    /**
     * Response Add Metric To Behavior Behaviors  Behavior Id  Metrics  Metric Id  Post
     * Successful Response
     */
    200: {
        [key: string]: string;
    };
};

export type AddMetricToBehaviorBehaviorsBehaviorIdMetricsMetricIdPostResponse = AddMetricToBehaviorBehaviorsBehaviorIdMetricsMetricIdPostResponses[keyof AddMetricToBehaviorBehaviorsBehaviorIdMetricsMetricIdPostResponses];

export type ReadCategoriesCategoriesGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Sort By
         */
        sort_by?: string;
        /**
         * Sort Order
         */
        sort_order?: string;
        /**
         * $Filter
         * OData filter expression
         */
        $filter?: string | null;
        /**
         * Entity Type
         * Filter categories by entity type
         */
        entity_type?: string | null;
    };
    url: '/categories/';
};

export type ReadCategoriesCategoriesGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadCategoriesCategoriesGetError = ReadCategoriesCategoriesGetErrors[keyof ReadCategoriesCategoriesGetErrors];

export type ReadCategoriesCategoriesGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedCategoryDetail;
};

export type ReadCategoriesCategoriesGetResponse = ReadCategoriesCategoriesGetResponses[keyof ReadCategoriesCategoriesGetResponses];

export type CreateCategoryCategoriesPostData = {
    body: CategoryCreate;
    path?: never;
    query?: never;
    url: '/categories/';
};

export type CreateCategoryCategoriesPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateCategoryCategoriesPostError = CreateCategoryCategoriesPostErrors[keyof CreateCategoryCategoriesPostErrors];

export type CreateCategoryCategoriesPostResponses = {
    /**
     * Successful Response
     */
    200: Category;
};

export type CreateCategoryCategoriesPostResponse = CreateCategoryCategoriesPostResponses[keyof CreateCategoryCategoriesPostResponses];

export type DeleteCategoryCategoriesCategoryIdDeleteData = {
    body?: never;
    path: {
        /**
         * Category Id
         */
        category_id: string;
    };
    query?: never;
    url: '/categories/{category_id}';
};

export type DeleteCategoryCategoriesCategoryIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteCategoryCategoriesCategoryIdDeleteError = DeleteCategoryCategoriesCategoryIdDeleteErrors[keyof DeleteCategoryCategoriesCategoryIdDeleteErrors];

export type DeleteCategoryCategoriesCategoryIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: Category;
};

export type DeleteCategoryCategoriesCategoryIdDeleteResponse = DeleteCategoryCategoriesCategoryIdDeleteResponses[keyof DeleteCategoryCategoriesCategoryIdDeleteResponses];

export type ReadCategoryCategoriesCategoryIdGetData = {
    body?: never;
    path: {
        /**
         * Category Id
         */
        category_id: string;
    };
    query?: never;
    url: '/categories/{category_id}';
};

export type ReadCategoryCategoriesCategoryIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadCategoryCategoriesCategoryIdGetError = ReadCategoryCategoriesCategoryIdGetErrors[keyof ReadCategoryCategoriesCategoryIdGetErrors];

export type ReadCategoryCategoriesCategoryIdGetResponses = {
    /**
     * Successful Response
     */
    200: CategoryDetail;
};

export type ReadCategoryCategoriesCategoryIdGetResponse = ReadCategoryCategoriesCategoryIdGetResponses[keyof ReadCategoryCategoriesCategoryIdGetResponses];

export type UpdateCategoryCategoriesCategoryIdPutData = {
    body: CategoryUpdate;
    path: {
        /**
         * Category Id
         */
        category_id: string;
    };
    query?: never;
    url: '/categories/{category_id}';
};

export type UpdateCategoryCategoriesCategoryIdPutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateCategoryCategoriesCategoryIdPutError = UpdateCategoryCategoriesCategoryIdPutErrors[keyof UpdateCategoryCategoriesCategoryIdPutErrors];

export type UpdateCategoryCategoriesCategoryIdPutResponses = {
    /**
     * Successful Response
     */
    200: CategoryDetail;
};

export type UpdateCategoryCategoriesCategoryIdPutResponse = UpdateCategoryCategoriesCategoryIdPutResponses[keyof UpdateCategoryCategoriesCategoryIdPutResponses];

export type ReadCommentsCommentsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Sort By
         */
        sort_by?: string;
        /**
         * Sort Order
         */
        sort_order?: string;
        /**
         * $Filter
         * OData filter expression
         */
        $filter?: string | null;
    };
    url: '/comments/';
};

export type ReadCommentsCommentsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadCommentsCommentsGetError = ReadCommentsCommentsGetErrors[keyof ReadCommentsCommentsGetErrors];

export type ReadCommentsCommentsGetResponses = {
    /**
     * Response Read Comments Comments  Get
     * Successful Response
     */
    200: Array<CommentDetail>;
};

export type ReadCommentsCommentsGetResponse = ReadCommentsCommentsGetResponses[keyof ReadCommentsCommentsGetResponses];

export type CreateCommentCommentsPostData = {
    body: CommentCreate;
    path?: never;
    query?: never;
    url: '/comments/';
};

export type CreateCommentCommentsPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateCommentCommentsPostError = CreateCommentCommentsPostErrors[keyof CreateCommentCommentsPostErrors];

export type CreateCommentCommentsPostResponses = {
    /**
     * Successful Response
     */
    200: Comment;
};

export type CreateCommentCommentsPostResponse = CreateCommentCommentsPostResponses[keyof CreateCommentCommentsPostResponses];

export type DeleteCommentCommentsCommentIdDeleteData = {
    body?: never;
    path: {
        /**
         * Comment Id
         */
        comment_id: string;
    };
    query?: never;
    url: '/comments/{comment_id}';
};

export type DeleteCommentCommentsCommentIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteCommentCommentsCommentIdDeleteError = DeleteCommentCommentsCommentIdDeleteErrors[keyof DeleteCommentCommentsCommentIdDeleteErrors];

export type DeleteCommentCommentsCommentIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: Comment;
};

export type DeleteCommentCommentsCommentIdDeleteResponse = DeleteCommentCommentsCommentIdDeleteResponses[keyof DeleteCommentCommentsCommentIdDeleteResponses];

export type ReadCommentCommentsCommentIdGetData = {
    body?: never;
    path: {
        /**
         * Comment Id
         */
        comment_id: string;
    };
    query?: never;
    url: '/comments/{comment_id}';
};

export type ReadCommentCommentsCommentIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadCommentCommentsCommentIdGetError = ReadCommentCommentsCommentIdGetErrors[keyof ReadCommentCommentsCommentIdGetErrors];

export type ReadCommentCommentsCommentIdGetResponses = {
    /**
     * Successful Response
     */
    200: CommentDetail;
};

export type ReadCommentCommentsCommentIdGetResponse = ReadCommentCommentsCommentIdGetResponses[keyof ReadCommentCommentsCommentIdGetResponses];

export type UpdateCommentCommentsCommentIdPutData = {
    body: CommentUpdate;
    path: {
        /**
         * Comment Id
         */
        comment_id: string;
    };
    query?: never;
    url: '/comments/{comment_id}';
};

export type UpdateCommentCommentsCommentIdPutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateCommentCommentsCommentIdPutError = UpdateCommentCommentsCommentIdPutErrors[keyof UpdateCommentCommentsCommentIdPutErrors];

export type UpdateCommentCommentsCommentIdPutResponses = {
    /**
     * Successful Response
     */
    200: Comment;
};

export type UpdateCommentCommentsCommentIdPutResponse = UpdateCommentCommentsCommentIdPutResponses[keyof UpdateCommentCommentsCommentIdPutResponses];

export type ReadCommentsByEntityCommentsEntityEntityTypeEntityIdGetData = {
    body?: never;
    path: {
        /**
         * Entity Type
         */
        entity_type: string;
        /**
         * Entity Id
         */
        entity_id: string;
    };
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Sort By
         */
        sort_by?: string;
        /**
         * Sort Order
         */
        sort_order?: string;
    };
    url: '/comments/entity/{entity_type}/{entity_id}';
};

export type ReadCommentsByEntityCommentsEntityEntityTypeEntityIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadCommentsByEntityCommentsEntityEntityTypeEntityIdGetError = ReadCommentsByEntityCommentsEntityEntityTypeEntityIdGetErrors[keyof ReadCommentsByEntityCommentsEntityEntityTypeEntityIdGetErrors];

export type ReadCommentsByEntityCommentsEntityEntityTypeEntityIdGetResponses = {
    /**
     * Response Read Comments By Entity Comments Entity  Entity Type   Entity Id  Get
     * Successful Response
     */
    200: Array<CommentDetail>;
};

export type ReadCommentsByEntityCommentsEntityEntityTypeEntityIdGetResponse = ReadCommentsByEntityCommentsEntityEntityTypeEntityIdGetResponses[keyof ReadCommentsByEntityCommentsEntityEntityTypeEntityIdGetResponses];

export type RemoveEmojiReactionCommentsCommentIdEmojiEmojiDeleteData = {
    body?: never;
    path: {
        /**
         * Comment Id
         */
        comment_id: string;
        /**
         * Emoji
         */
        emoji: string;
    };
    query?: never;
    url: '/comments/{comment_id}/emoji/{emoji}';
};

export type RemoveEmojiReactionCommentsCommentIdEmojiEmojiDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RemoveEmojiReactionCommentsCommentIdEmojiEmojiDeleteError = RemoveEmojiReactionCommentsCommentIdEmojiEmojiDeleteErrors[keyof RemoveEmojiReactionCommentsCommentIdEmojiEmojiDeleteErrors];

export type RemoveEmojiReactionCommentsCommentIdEmojiEmojiDeleteResponses = {
    /**
     * Successful Response
     */
    200: Comment;
};

export type RemoveEmojiReactionCommentsCommentIdEmojiEmojiDeleteResponse = RemoveEmojiReactionCommentsCommentIdEmojiEmojiDeleteResponses[keyof RemoveEmojiReactionCommentsCommentIdEmojiEmojiDeleteResponses];

export type AddEmojiReactionCommentsCommentIdEmojiEmojiPostData = {
    body?: never;
    path: {
        /**
         * Comment Id
         */
        comment_id: string;
        /**
         * Emoji
         */
        emoji: string;
    };
    query?: never;
    url: '/comments/{comment_id}/emoji/{emoji}';
};

export type AddEmojiReactionCommentsCommentIdEmojiEmojiPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AddEmojiReactionCommentsCommentIdEmojiEmojiPostError = AddEmojiReactionCommentsCommentIdEmojiEmojiPostErrors[keyof AddEmojiReactionCommentsCommentIdEmojiEmojiPostErrors];

export type AddEmojiReactionCommentsCommentIdEmojiEmojiPostResponses = {
    /**
     * Successful Response
     */
    200: Comment;
};

export type AddEmojiReactionCommentsCommentIdEmojiEmojiPostResponse = AddEmojiReactionCommentsCommentIdEmojiEmojiPostResponses[keyof AddEmojiReactionCommentsCommentIdEmojiEmojiPostResponses];

export type ReadDemographicsDemographicsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Sort By
         */
        sort_by?: string;
        /**
         * Sort Order
         */
        sort_order?: string;
        /**
         * $Filter
         * OData filter expression
         */
        $filter?: string | null;
    };
    url: '/demographics/';
};

export type ReadDemographicsDemographicsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadDemographicsDemographicsGetError = ReadDemographicsDemographicsGetErrors[keyof ReadDemographicsDemographicsGetErrors];

export type ReadDemographicsDemographicsGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedDemographic;
};

export type ReadDemographicsDemographicsGetResponse = ReadDemographicsDemographicsGetResponses[keyof ReadDemographicsDemographicsGetResponses];

export type CreateDemographicDemographicsPostData = {
    body: DemographicCreate;
    path?: never;
    query?: never;
    url: '/demographics/';
};

export type CreateDemographicDemographicsPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateDemographicDemographicsPostError = CreateDemographicDemographicsPostErrors[keyof CreateDemographicDemographicsPostErrors];

export type CreateDemographicDemographicsPostResponses = {
    /**
     * Successful Response
     */
    200: Demographic;
};

export type CreateDemographicDemographicsPostResponse = CreateDemographicDemographicsPostResponses[keyof CreateDemographicDemographicsPostResponses];

export type DeleteDemographicDemographicsDemographicIdDeleteData = {
    body?: never;
    path: {
        /**
         * Demographic Id
         */
        demographic_id: string;
    };
    query?: never;
    url: '/demographics/{demographic_id}';
};

export type DeleteDemographicDemographicsDemographicIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteDemographicDemographicsDemographicIdDeleteError = DeleteDemographicDemographicsDemographicIdDeleteErrors[keyof DeleteDemographicDemographicsDemographicIdDeleteErrors];

export type DeleteDemographicDemographicsDemographicIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: Demographic;
};

export type DeleteDemographicDemographicsDemographicIdDeleteResponse = DeleteDemographicDemographicsDemographicIdDeleteResponses[keyof DeleteDemographicDemographicsDemographicIdDeleteResponses];

export type ReadDemographicDemographicsDemographicIdGetData = {
    body?: never;
    path: {
        /**
         * Demographic Id
         */
        demographic_id: string;
    };
    query?: never;
    url: '/demographics/{demographic_id}';
};

export type ReadDemographicDemographicsDemographicIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadDemographicDemographicsDemographicIdGetError = ReadDemographicDemographicsDemographicIdGetErrors[keyof ReadDemographicDemographicsDemographicIdGetErrors];

export type ReadDemographicDemographicsDemographicIdGetResponses = {
    /**
     * Successful Response
     */
    200: Demographic;
};

export type ReadDemographicDemographicsDemographicIdGetResponse = ReadDemographicDemographicsDemographicIdGetResponses[keyof ReadDemographicDemographicsDemographicIdGetResponses];

export type UpdateDemographicDemographicsDemographicIdPutData = {
    body: DemographicUpdate;
    path: {
        /**
         * Demographic Id
         */
        demographic_id: string;
    };
    query?: never;
    url: '/demographics/{demographic_id}';
};

export type UpdateDemographicDemographicsDemographicIdPutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateDemographicDemographicsDemographicIdPutError = UpdateDemographicDemographicsDemographicIdPutErrors[keyof UpdateDemographicDemographicsDemographicIdPutErrors];

export type UpdateDemographicDemographicsDemographicIdPutResponses = {
    /**
     * Successful Response
     */
    200: Demographic;
};

export type UpdateDemographicDemographicsDemographicIdPutResponse = UpdateDemographicDemographicsDemographicIdPutResponses[keyof UpdateDemographicDemographicsDemographicIdPutResponses];

export type ReadDimensionsDimensionsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Sort By
         */
        sort_by?: string;
        /**
         * Sort Order
         */
        sort_order?: string;
        /**
         * $Filter
         * OData filter expression
         */
        $filter?: string | null;
    };
    url: '/dimensions/';
};

export type ReadDimensionsDimensionsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadDimensionsDimensionsGetError = ReadDimensionsDimensionsGetErrors[keyof ReadDimensionsDimensionsGetErrors];

export type ReadDimensionsDimensionsGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedDimension;
};

export type ReadDimensionsDimensionsGetResponse = ReadDimensionsDimensionsGetResponses[keyof ReadDimensionsDimensionsGetResponses];

export type CreateDimensionDimensionsPostData = {
    body: DimensionCreate;
    path?: never;
    query?: never;
    url: '/dimensions/';
};

export type CreateDimensionDimensionsPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateDimensionDimensionsPostError = CreateDimensionDimensionsPostErrors[keyof CreateDimensionDimensionsPostErrors];

export type CreateDimensionDimensionsPostResponses = {
    /**
     * Successful Response
     */
    200: Dimension;
};

export type CreateDimensionDimensionsPostResponse = CreateDimensionDimensionsPostResponses[keyof CreateDimensionDimensionsPostResponses];

export type DeleteDimensionDimensionsDimensionIdDeleteData = {
    body?: never;
    path: {
        /**
         * Dimension Id
         */
        dimension_id: string;
    };
    query?: never;
    url: '/dimensions/{dimension_id}';
};

export type DeleteDimensionDimensionsDimensionIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteDimensionDimensionsDimensionIdDeleteError = DeleteDimensionDimensionsDimensionIdDeleteErrors[keyof DeleteDimensionDimensionsDimensionIdDeleteErrors];

export type DeleteDimensionDimensionsDimensionIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: Dimension;
};

export type DeleteDimensionDimensionsDimensionIdDeleteResponse = DeleteDimensionDimensionsDimensionIdDeleteResponses[keyof DeleteDimensionDimensionsDimensionIdDeleteResponses];

export type ReadDimensionDimensionsDimensionIdGetData = {
    body?: never;
    path: {
        /**
         * Dimension Id
         */
        dimension_id: string;
    };
    query?: never;
    url: '/dimensions/{dimension_id}';
};

export type ReadDimensionDimensionsDimensionIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadDimensionDimensionsDimensionIdGetError = ReadDimensionDimensionsDimensionIdGetErrors[keyof ReadDimensionDimensionsDimensionIdGetErrors];

export type ReadDimensionDimensionsDimensionIdGetResponses = {
    /**
     * Successful Response
     */
    200: Dimension;
};

export type ReadDimensionDimensionsDimensionIdGetResponse = ReadDimensionDimensionsDimensionIdGetResponses[keyof ReadDimensionDimensionsDimensionIdGetResponses];

export type UpdateDimensionDimensionsDimensionIdPutData = {
    body: DimensionUpdate;
    path: {
        /**
         * Dimension Id
         */
        dimension_id: string;
    };
    query?: never;
    url: '/dimensions/{dimension_id}';
};

export type UpdateDimensionDimensionsDimensionIdPutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateDimensionDimensionsDimensionIdPutError = UpdateDimensionDimensionsDimensionIdPutErrors[keyof UpdateDimensionDimensionsDimensionIdPutErrors];

export type UpdateDimensionDimensionsDimensionIdPutResponses = {
    /**
     * Successful Response
     */
    200: Dimension;
};

export type UpdateDimensionDimensionsDimensionIdPutResponse = UpdateDimensionDimensionsDimensionIdPutResponses[keyof UpdateDimensionDimensionsDimensionIdPutResponses];

export type ReadEndpointsEndpointsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Sort By
         */
        sort_by?: string;
        /**
         * Sort Order
         */
        sort_order?: string;
        /**
         * $Filter
         * OData filter expression
         */
        $filter?: string | null;
    };
    url: '/endpoints/';
};

export type ReadEndpointsEndpointsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadEndpointsEndpointsGetError = ReadEndpointsEndpointsGetErrors[keyof ReadEndpointsEndpointsGetErrors];

export type ReadEndpointsEndpointsGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedEndpointDetail;
};

export type ReadEndpointsEndpointsGetResponse = ReadEndpointsEndpointsGetResponses[keyof ReadEndpointsEndpointsGetResponses];

export type CreateEndpointEndpointsPostData = {
    body: EndpointCreate;
    path?: never;
    query?: never;
    url: '/endpoints/';
};

export type CreateEndpointEndpointsPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateEndpointEndpointsPostError = CreateEndpointEndpointsPostErrors[keyof CreateEndpointEndpointsPostErrors];

export type CreateEndpointEndpointsPostResponses = {
    /**
     * Successful Response
     */
    200: Endpoint;
};

export type CreateEndpointEndpointsPostResponse = CreateEndpointEndpointsPostResponses[keyof CreateEndpointEndpointsPostResponses];

export type DeleteEndpointEndpointsEndpointIdDeleteData = {
    body?: never;
    path: {
        /**
         * Endpoint Id
         */
        endpoint_id: string;
    };
    query?: never;
    url: '/endpoints/{endpoint_id}';
};

export type DeleteEndpointEndpointsEndpointIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteEndpointEndpointsEndpointIdDeleteError = DeleteEndpointEndpointsEndpointIdDeleteErrors[keyof DeleteEndpointEndpointsEndpointIdDeleteErrors];

export type DeleteEndpointEndpointsEndpointIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: Endpoint;
};

export type DeleteEndpointEndpointsEndpointIdDeleteResponse = DeleteEndpointEndpointsEndpointIdDeleteResponses[keyof DeleteEndpointEndpointsEndpointIdDeleteResponses];

export type ReadEndpointEndpointsEndpointIdGetData = {
    body?: never;
    path: {
        /**
         * Endpoint Id
         */
        endpoint_id: string;
    };
    query?: never;
    url: '/endpoints/{endpoint_id}';
};

export type ReadEndpointEndpointsEndpointIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadEndpointEndpointsEndpointIdGetError = ReadEndpointEndpointsEndpointIdGetErrors[keyof ReadEndpointEndpointsEndpointIdGetErrors];

export type ReadEndpointEndpointsEndpointIdGetResponses = {
    /**
     * Successful Response
     */
    200: EndpointDetail;
};

export type ReadEndpointEndpointsEndpointIdGetResponse = ReadEndpointEndpointsEndpointIdGetResponses[keyof ReadEndpointEndpointsEndpointIdGetResponses];

export type UpdateEndpointEndpointsEndpointIdPutData = {
    body: EndpointUpdate;
    path: {
        /**
         * Endpoint Id
         */
        endpoint_id: string;
    };
    query?: never;
    url: '/endpoints/{endpoint_id}';
};

export type UpdateEndpointEndpointsEndpointIdPutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateEndpointEndpointsEndpointIdPutError = UpdateEndpointEndpointsEndpointIdPutErrors[keyof UpdateEndpointEndpointsEndpointIdPutErrors];

export type UpdateEndpointEndpointsEndpointIdPutResponses = {
    /**
     * Successful Response
     */
    200: Endpoint;
};

export type UpdateEndpointEndpointsEndpointIdPutResponse = UpdateEndpointEndpointsEndpointIdPutResponses[keyof UpdateEndpointEndpointsEndpointIdPutResponses];

export type InvokeEndpointEndpointsEndpointIdInvokePostData = {
    /**
     * Input Data
     */
    body: {
        [key: string]: JsonInput;
    };
    path: {
        /**
         * Endpoint Id
         */
        endpoint_id: string;
    };
    query?: never;
    url: '/endpoints/{endpoint_id}/invoke';
};

export type InvokeEndpointEndpointsEndpointIdInvokePostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type InvokeEndpointEndpointsEndpointIdInvokePostError = InvokeEndpointEndpointsEndpointIdInvokePostErrors[keyof InvokeEndpointEndpointsEndpointIdInvokePostErrors];

export type InvokeEndpointEndpointsEndpointIdInvokePostResponses = {
    /**
     * Successful Response
     */
    200: JsonOutput;
};

export type InvokeEndpointEndpointsEndpointIdInvokePostResponse = InvokeEndpointEndpointsEndpointIdInvokePostResponses[keyof InvokeEndpointEndpointsEndpointIdInvokePostResponses];

export type GetEndpointSchemaEndpointsSchemaGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/endpoints/schema';
};

export type GetEndpointSchemaEndpointsSchemaGetErrors = {
    /**
     * Not found
     */
    404: unknown;
};

export type GetEndpointSchemaEndpointsSchemaGetResponses = {
    /**
     * Response Get Endpoint Schema Endpoints Schema Get
     * Successful Response
     */
    200: {
        [key: string]: JsonOutput;
    };
};

export type GetEndpointSchemaEndpointsSchemaGetResponse = GetEndpointSchemaEndpointsSchemaGetResponses[keyof GetEndpointSchemaEndpointsSchemaGetResponses];

export type HomeHomeGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/home/';
};

export type HomeHomeGetResponses = {
    /**
     * Successful Response
     */
    200: HomePublicResponse;
};

export type HomeHomeGetResponse = HomeHomeGetResponses[keyof HomeHomeGetResponses];

export type ProtectedHomeProtectedGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/home/protected';
};

export type ProtectedHomeProtectedGetResponses = {
    /**
     * Successful Response
     */
    200: HomeProtectedResponse;
};

export type ProtectedHomeProtectedGetResponse = ProtectedHomeProtectedGetResponses[keyof ProtectedHomeProtectedGetResponses];

export type ReadMetricsMetricsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Sort By
         */
        sort_by?: string;
        /**
         * Sort Order
         */
        sort_order?: string;
        /**
         * $Filter
         * OData filter expression
         */
        $filter?: string | null;
    };
    url: '/metrics/';
};

export type ReadMetricsMetricsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadMetricsMetricsGetError = ReadMetricsMetricsGetErrors[keyof ReadMetricsMetricsGetErrors];

export type ReadMetricsMetricsGetResponses = {
    /**
     * Successful Response
     */
    200: RhesisBackendAppSchemasPaginationPaginatedMetricDetail2;
};

export type ReadMetricsMetricsGetResponse = ReadMetricsMetricsGetResponses[keyof ReadMetricsMetricsGetResponses];

export type CreateMetricMetricsPostData = {
    body: MetricCreate;
    path?: never;
    query?: never;
    url: '/metrics/';
};

export type CreateMetricMetricsPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateMetricMetricsPostError = CreateMetricMetricsPostErrors[keyof CreateMetricMetricsPostErrors];

export type CreateMetricMetricsPostResponses = {
    /**
     * Successful Response
     */
    200: Metric;
};

export type CreateMetricMetricsPostResponse = CreateMetricMetricsPostResponses[keyof CreateMetricMetricsPostResponses];

export type DeleteMetricMetricsMetricIdDeleteData = {
    body?: never;
    path: {
        /**
         * Metric Id
         */
        metric_id: string;
    };
    query?: never;
    url: '/metrics/{metric_id}';
};

export type DeleteMetricMetricsMetricIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteMetricMetricsMetricIdDeleteError = DeleteMetricMetricsMetricIdDeleteErrors[keyof DeleteMetricMetricsMetricIdDeleteErrors];

export type DeleteMetricMetricsMetricIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: Metric;
};

export type DeleteMetricMetricsMetricIdDeleteResponse = DeleteMetricMetricsMetricIdDeleteResponses[keyof DeleteMetricMetricsMetricIdDeleteResponses];

export type ReadMetricMetricsMetricIdGetData = {
    body?: never;
    path: {
        /**
         * Metric Id
         */
        metric_id: string;
    };
    query?: never;
    url: '/metrics/{metric_id}';
};

export type ReadMetricMetricsMetricIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadMetricMetricsMetricIdGetError = ReadMetricMetricsMetricIdGetErrors[keyof ReadMetricMetricsMetricIdGetErrors];

export type ReadMetricMetricsMetricIdGetResponses = {
    /**
     * Successful Response
     */
    200: RhesisBackendAppUtilsSchemaFactoryMetricDetail2;
};

export type ReadMetricMetricsMetricIdGetResponse = ReadMetricMetricsMetricIdGetResponses[keyof ReadMetricMetricsMetricIdGetResponses];

export type UpdateMetricMetricsMetricIdPutData = {
    body: MetricUpdate;
    path: {
        /**
         * Metric Id
         */
        metric_id: string;
    };
    query?: never;
    url: '/metrics/{metric_id}';
};

export type UpdateMetricMetricsMetricIdPutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateMetricMetricsMetricIdPutError = UpdateMetricMetricsMetricIdPutErrors[keyof UpdateMetricMetricsMetricIdPutErrors];

export type UpdateMetricMetricsMetricIdPutResponses = {
    /**
     * Successful Response
     */
    200: Metric;
};

export type UpdateMetricMetricsMetricIdPutResponse = UpdateMetricMetricsMetricIdPutResponses[keyof UpdateMetricMetricsMetricIdPutResponses];

export type RemoveBehaviorFromMetricMetricsMetricIdBehaviorsBehaviorIdDeleteData = {
    body?: never;
    path: {
        /**
         * Metric Id
         */
        metric_id: string;
        /**
         * Behavior Id
         */
        behavior_id: string;
    };
    query?: never;
    url: '/metrics/{metric_id}/behaviors/{behavior_id}';
};

export type RemoveBehaviorFromMetricMetricsMetricIdBehaviorsBehaviorIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RemoveBehaviorFromMetricMetricsMetricIdBehaviorsBehaviorIdDeleteError = RemoveBehaviorFromMetricMetricsMetricIdBehaviorsBehaviorIdDeleteErrors[keyof RemoveBehaviorFromMetricMetricsMetricIdBehaviorsBehaviorIdDeleteErrors];

export type RemoveBehaviorFromMetricMetricsMetricIdBehaviorsBehaviorIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: ActionResponse;
};

export type RemoveBehaviorFromMetricMetricsMetricIdBehaviorsBehaviorIdDeleteResponse = RemoveBehaviorFromMetricMetricsMetricIdBehaviorsBehaviorIdDeleteResponses[keyof RemoveBehaviorFromMetricMetricsMetricIdBehaviorsBehaviorIdDeleteResponses];

export type AddBehaviorToMetricMetricsMetricIdBehaviorsBehaviorIdPostData = {
    body?: never;
    path: {
        /**
         * Metric Id
         */
        metric_id: string;
        /**
         * Behavior Id
         */
        behavior_id: string;
    };
    query?: never;
    url: '/metrics/{metric_id}/behaviors/{behavior_id}';
};

export type AddBehaviorToMetricMetricsMetricIdBehaviorsBehaviorIdPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AddBehaviorToMetricMetricsMetricIdBehaviorsBehaviorIdPostError = AddBehaviorToMetricMetricsMetricIdBehaviorsBehaviorIdPostErrors[keyof AddBehaviorToMetricMetricsMetricIdBehaviorsBehaviorIdPostErrors];

export type AddBehaviorToMetricMetricsMetricIdBehaviorsBehaviorIdPostResponses = {
    /**
     * Successful Response
     */
    200: ActionResponse;
};

export type AddBehaviorToMetricMetricsMetricIdBehaviorsBehaviorIdPostResponse = AddBehaviorToMetricMetricsMetricIdBehaviorsBehaviorIdPostResponses[keyof AddBehaviorToMetricMetricsMetricIdBehaviorsBehaviorIdPostResponses];

export type ReadMetricBehaviorsMetricsMetricIdBehaviorsGetData = {
    body?: never;
    path: {
        /**
         * Metric Id
         */
        metric_id: string;
    };
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Sort By
         */
        sort_by?: string;
        /**
         * Sort Order
         */
        sort_order?: string;
        /**
         * $Filter
         * OData filter expression
         */
        $filter?: string | null;
        /**
         * Organization Id
         */
        organization_id?: string;
        /**
         * User Id
         */
        user_id?: string;
    };
    url: '/metrics/{metric_id}/behaviors/';
};

export type ReadMetricBehaviorsMetricsMetricIdBehaviorsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadMetricBehaviorsMetricsMetricIdBehaviorsGetError = ReadMetricBehaviorsMetricsMetricIdBehaviorsGetErrors[keyof ReadMetricBehaviorsMetricsMetricIdBehaviorsGetErrors];

export type ReadMetricBehaviorsMetricsMetricIdBehaviorsGetResponses = {
    /**
     * Successful Response
     */
    200: RhesisBackendAppSchemasPaginationPaginatedBehaviorDetail2;
};

export type ReadMetricBehaviorsMetricsMetricIdBehaviorsGetResponse = ReadMetricBehaviorsMetricsMetricIdBehaviorsGetResponses[keyof ReadMetricBehaviorsMetricsMetricIdBehaviorsGetResponses];

export type ReadModelsModelsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Sort By
         */
        sort_by?: string;
        /**
         * Sort Order
         */
        sort_order?: string;
        /**
         * $Filter
         * OData filter expression
         */
        $filter?: string | null;
    };
    url: '/models/';
};

export type ReadModelsModelsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadModelsModelsGetError = ReadModelsModelsGetErrors[keyof ReadModelsModelsGetErrors];

export type ReadModelsModelsGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedModelDetail;
};

export type ReadModelsModelsGetResponse = ReadModelsModelsGetResponses[keyof ReadModelsModelsGetResponses];

export type CreateModelModelsPostData = {
    body: ModelCreate;
    path?: never;
    query?: never;
    url: '/models/';
};

export type CreateModelModelsPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateModelModelsPostError = CreateModelModelsPostErrors[keyof CreateModelModelsPostErrors];

export type CreateModelModelsPostResponses = {
    /**
     * Successful Response
     */
    200: Model;
};

export type CreateModelModelsPostResponse = CreateModelModelsPostResponses[keyof CreateModelModelsPostResponses];

export type DeleteModelModelsModelIdDeleteData = {
    body?: never;
    path: {
        /**
         * Model Id
         */
        model_id: string;
    };
    query?: never;
    url: '/models/{model_id}';
};

export type DeleteModelModelsModelIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteModelModelsModelIdDeleteError = DeleteModelModelsModelIdDeleteErrors[keyof DeleteModelModelsModelIdDeleteErrors];

export type DeleteModelModelsModelIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: Model;
};

export type DeleteModelModelsModelIdDeleteResponse = DeleteModelModelsModelIdDeleteResponses[keyof DeleteModelModelsModelIdDeleteResponses];

export type ReadModelModelsModelIdGetData = {
    body?: never;
    path: {
        /**
         * Model Id
         */
        model_id: string;
    };
    query?: never;
    url: '/models/{model_id}';
};

export type ReadModelModelsModelIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadModelModelsModelIdGetError = ReadModelModelsModelIdGetErrors[keyof ReadModelModelsModelIdGetErrors];

export type ReadModelModelsModelIdGetResponses = {
    /**
     * Successful Response
     */
    200: ModelDetail;
};

export type ReadModelModelsModelIdGetResponse = ReadModelModelsModelIdGetResponses[keyof ReadModelModelsModelIdGetResponses];

export type UpdateModelModelsModelIdPutData = {
    body: ModelUpdate;
    path: {
        /**
         * Model Id
         */
        model_id: string;
    };
    query?: never;
    url: '/models/{model_id}';
};

export type UpdateModelModelsModelIdPutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateModelModelsModelIdPutError = UpdateModelModelsModelIdPutErrors[keyof UpdateModelModelsModelIdPutErrors];

export type UpdateModelModelsModelIdPutResponses = {
    /**
     * Successful Response
     */
    200: Model;
};

export type UpdateModelModelsModelIdPutResponse = UpdateModelModelsModelIdPutResponses[keyof UpdateModelModelsModelIdPutResponses];

export type TestModelConnectionModelsModelIdTestPostData = {
    body?: never;
    path: {
        /**
         * Model Id
         */
        model_id: string;
    };
    query?: never;
    url: '/models/{model_id}/test';
};

export type TestModelConnectionModelsModelIdTestPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TestModelConnectionModelsModelIdTestPostError = TestModelConnectionModelsModelIdTestPostErrors[keyof TestModelConnectionModelsModelIdTestPostErrors];

export type TestModelConnectionModelsModelIdTestPostResponses = {
    /**
     * Successful Response
     */
    200: TestConnectionResponse;
};

export type TestModelConnectionModelsModelIdTestPostResponse = TestModelConnectionModelsModelIdTestPostResponses[keyof TestModelConnectionModelsModelIdTestPostResponses];

export type ReadOrganizationsOrganizationsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Sort By
         */
        sort_by?: string;
        /**
         * Sort Order
         */
        sort_order?: string;
        /**
         * $Filter
         * OData filter expression
         */
        $filter?: string | null;
    };
    url: '/organizations/';
};

export type ReadOrganizationsOrganizationsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadOrganizationsOrganizationsGetError = ReadOrganizationsOrganizationsGetErrors[keyof ReadOrganizationsOrganizationsGetErrors];

export type ReadOrganizationsOrganizationsGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedOrganization;
};

export type ReadOrganizationsOrganizationsGetResponse = ReadOrganizationsOrganizationsGetResponses[keyof ReadOrganizationsOrganizationsGetResponses];

export type CreateOrganizationOrganizationsPostData = {
    body: OrganizationCreate;
    path?: never;
    query?: never;
    url: '/organizations/';
};

export type CreateOrganizationOrganizationsPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateOrganizationOrganizationsPostError = CreateOrganizationOrganizationsPostErrors[keyof CreateOrganizationOrganizationsPostErrors];

export type CreateOrganizationOrganizationsPostResponses = {
    /**
     * Successful Response
     */
    200: Organization;
};

export type CreateOrganizationOrganizationsPostResponse = CreateOrganizationOrganizationsPostResponses[keyof CreateOrganizationOrganizationsPostResponses];

export type DeleteOrganizationOrganizationsOrganizationIdDeleteData = {
    body?: never;
    path: {
        /**
         * Organization Id
         */
        organization_id: string;
    };
    query?: never;
    url: '/organizations/{organization_id}';
};

export type DeleteOrganizationOrganizationsOrganizationIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteOrganizationOrganizationsOrganizationIdDeleteError = DeleteOrganizationOrganizationsOrganizationIdDeleteErrors[keyof DeleteOrganizationOrganizationsOrganizationIdDeleteErrors];

export type DeleteOrganizationOrganizationsOrganizationIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: Organization;
};

export type DeleteOrganizationOrganizationsOrganizationIdDeleteResponse = DeleteOrganizationOrganizationsOrganizationIdDeleteResponses[keyof DeleteOrganizationOrganizationsOrganizationIdDeleteResponses];

export type ReadOrganizationOrganizationsOrganizationIdGetData = {
    body?: never;
    path: {
        /**
         * Organization Id
         */
        organization_id: string;
    };
    query?: never;
    url: '/organizations/{organization_id}';
};

export type ReadOrganizationOrganizationsOrganizationIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadOrganizationOrganizationsOrganizationIdGetError = ReadOrganizationOrganizationsOrganizationIdGetErrors[keyof ReadOrganizationOrganizationsOrganizationIdGetErrors];

export type ReadOrganizationOrganizationsOrganizationIdGetResponses = {
    /**
     * Successful Response
     */
    200: Organization;
};

export type ReadOrganizationOrganizationsOrganizationIdGetResponse = ReadOrganizationOrganizationsOrganizationIdGetResponses[keyof ReadOrganizationOrganizationsOrganizationIdGetResponses];

export type UpdateOrganizationOrganizationsOrganizationIdPutData = {
    body: OrganizationUpdate;
    path: {
        /**
         * Organization Id
         */
        organization_id: string;
    };
    query?: never;
    url: '/organizations/{organization_id}';
};

export type UpdateOrganizationOrganizationsOrganizationIdPutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateOrganizationOrganizationsOrganizationIdPutError = UpdateOrganizationOrganizationsOrganizationIdPutErrors[keyof UpdateOrganizationOrganizationsOrganizationIdPutErrors];

export type UpdateOrganizationOrganizationsOrganizationIdPutResponses = {
    /**
     * Successful Response
     */
    200: Organization;
};

export type UpdateOrganizationOrganizationsOrganizationIdPutResponse = UpdateOrganizationOrganizationsOrganizationIdPutResponses[keyof UpdateOrganizationOrganizationsOrganizationIdPutResponses];

export type InitializeOrganizationDataOrganizationsOrganizationIdLoadInitialDataPostData = {
    body?: never;
    path: {
        /**
         * Organization Id
         */
        organization_id: string;
    };
    query?: never;
    url: '/organizations/{organization_id}/load-initial-data';
};

export type InitializeOrganizationDataOrganizationsOrganizationIdLoadInitialDataPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type InitializeOrganizationDataOrganizationsOrganizationIdLoadInitialDataPostError = InitializeOrganizationDataOrganizationsOrganizationIdLoadInitialDataPostErrors[keyof InitializeOrganizationDataOrganizationsOrganizationIdLoadInitialDataPostErrors];

export type InitializeOrganizationDataOrganizationsOrganizationIdLoadInitialDataPostResponses = {
    /**
     * Successful Response
     */
    200: StatusMessageResponse;
};

export type InitializeOrganizationDataOrganizationsOrganizationIdLoadInitialDataPostResponse = InitializeOrganizationDataOrganizationsOrganizationIdLoadInitialDataPostResponses[keyof InitializeOrganizationDataOrganizationsOrganizationIdLoadInitialDataPostResponses];

export type RollbackOrganizationDataOrganizationsOrganizationIdRollbackInitialDataPostData = {
    body?: never;
    path: {
        /**
         * Organization Id
         */
        organization_id: string;
    };
    query?: never;
    url: '/organizations/{organization_id}/rollback-initial-data';
};

export type RollbackOrganizationDataOrganizationsOrganizationIdRollbackInitialDataPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RollbackOrganizationDataOrganizationsOrganizationIdRollbackInitialDataPostError = RollbackOrganizationDataOrganizationsOrganizationIdRollbackInitialDataPostErrors[keyof RollbackOrganizationDataOrganizationsOrganizationIdRollbackInitialDataPostErrors];

export type RollbackOrganizationDataOrganizationsOrganizationIdRollbackInitialDataPostResponses = {
    /**
     * Successful Response
     */
    200: StatusMessageResponse;
};

export type RollbackOrganizationDataOrganizationsOrganizationIdRollbackInitialDataPostResponse = RollbackOrganizationDataOrganizationsOrganizationIdRollbackInitialDataPostResponses[keyof RollbackOrganizationDataOrganizationsOrganizationIdRollbackInitialDataPostResponses];

export type ReadProjectsProjectsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Sort By
         */
        sort_by?: string;
        /**
         * Sort Order
         */
        sort_order?: string;
        /**
         * $Filter
         * OData filter expression
         */
        $filter?: string | null;
    };
    url: '/projects/';
};

export type ReadProjectsProjectsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadProjectsProjectsGetError = ReadProjectsProjectsGetErrors[keyof ReadProjectsProjectsGetErrors];

export type ReadProjectsProjectsGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedProjectDetail;
};

export type ReadProjectsProjectsGetResponse = ReadProjectsProjectsGetResponses[keyof ReadProjectsProjectsGetResponses];

export type CreateProjectProjectsPostData = {
    body: ProjectCreate;
    path?: never;
    query?: never;
    url: '/projects/';
};

export type CreateProjectProjectsPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateProjectProjectsPostError = CreateProjectProjectsPostErrors[keyof CreateProjectProjectsPostErrors];

export type CreateProjectProjectsPostResponses = {
    /**
     * Successful Response
     */
    200: Project;
};

export type CreateProjectProjectsPostResponse = CreateProjectProjectsPostResponses[keyof CreateProjectProjectsPostResponses];

export type DeleteProjectProjectsProjectIdDeleteData = {
    body?: never;
    path: {
        /**
         * Project Id
         */
        project_id: string;
    };
    query?: never;
    url: '/projects/{project_id}';
};

export type DeleteProjectProjectsProjectIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteProjectProjectsProjectIdDeleteError = DeleteProjectProjectsProjectIdDeleteErrors[keyof DeleteProjectProjectsProjectIdDeleteErrors];

export type DeleteProjectProjectsProjectIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: Project;
};

export type DeleteProjectProjectsProjectIdDeleteResponse = DeleteProjectProjectsProjectIdDeleteResponses[keyof DeleteProjectProjectsProjectIdDeleteResponses];

export type ReadProjectProjectsProjectIdGetData = {
    body?: never;
    path: {
        /**
         * Project Id
         */
        project_id: string;
    };
    query?: never;
    url: '/projects/{project_id}';
};

export type ReadProjectProjectsProjectIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadProjectProjectsProjectIdGetError = ReadProjectProjectsProjectIdGetErrors[keyof ReadProjectProjectsProjectIdGetErrors];

export type ReadProjectProjectsProjectIdGetResponses = {
    /**
     * Successful Response
     */
    200: ProjectDetail;
};

export type ReadProjectProjectsProjectIdGetResponse = ReadProjectProjectsProjectIdGetResponses[keyof ReadProjectProjectsProjectIdGetResponses];

export type UpdateProjectProjectsProjectIdPutData = {
    body: ProjectUpdate;
    path: {
        /**
         * Project Id
         */
        project_id: string;
    };
    query?: never;
    url: '/projects/{project_id}';
};

export type UpdateProjectProjectsProjectIdPutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateProjectProjectsProjectIdPutError = UpdateProjectProjectsProjectIdPutErrors[keyof UpdateProjectProjectsProjectIdPutErrors];

export type UpdateProjectProjectsProjectIdPutResponses = {
    /**
     * Successful Response
     */
    200: Project;
};

export type UpdateProjectProjectsProjectIdPutResponse = UpdateProjectProjectsProjectIdPutResponses[keyof UpdateProjectProjectsProjectIdPutResponses];

export type ReadPromptTemplatesPromptTemplatesGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Sort By
         */
        sort_by?: string;
        /**
         * Sort Order
         */
        sort_order?: string;
        /**
         * $Filter
         * OData filter expression
         */
        $filter?: string | null;
    };
    url: '/prompt_templates/';
};

export type ReadPromptTemplatesPromptTemplatesGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadPromptTemplatesPromptTemplatesGetError = ReadPromptTemplatesPromptTemplatesGetErrors[keyof ReadPromptTemplatesPromptTemplatesGetErrors];

export type ReadPromptTemplatesPromptTemplatesGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedPromptTemplate;
};

export type ReadPromptTemplatesPromptTemplatesGetResponse = ReadPromptTemplatesPromptTemplatesGetResponses[keyof ReadPromptTemplatesPromptTemplatesGetResponses];

export type CreatePromptTemplatePromptTemplatesPostData = {
    body: PromptTemplateCreate;
    path?: never;
    query?: never;
    url: '/prompt_templates/';
};

export type CreatePromptTemplatePromptTemplatesPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreatePromptTemplatePromptTemplatesPostError = CreatePromptTemplatePromptTemplatesPostErrors[keyof CreatePromptTemplatePromptTemplatesPostErrors];

export type CreatePromptTemplatePromptTemplatesPostResponses = {
    /**
     * Successful Response
     */
    200: PromptTemplate;
};

export type CreatePromptTemplatePromptTemplatesPostResponse = CreatePromptTemplatePromptTemplatesPostResponses[keyof CreatePromptTemplatePromptTemplatesPostResponses];

export type DeletePromptTemplatePromptTemplatesPromptTemplateIdDeleteData = {
    body?: never;
    path: {
        /**
         * Prompt Template Id
         */
        prompt_template_id: string;
    };
    query?: never;
    url: '/prompt_templates/{prompt_template_id}';
};

export type DeletePromptTemplatePromptTemplatesPromptTemplateIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeletePromptTemplatePromptTemplatesPromptTemplateIdDeleteError = DeletePromptTemplatePromptTemplatesPromptTemplateIdDeleteErrors[keyof DeletePromptTemplatePromptTemplatesPromptTemplateIdDeleteErrors];

export type DeletePromptTemplatePromptTemplatesPromptTemplateIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: PromptTemplate;
};

export type DeletePromptTemplatePromptTemplatesPromptTemplateIdDeleteResponse = DeletePromptTemplatePromptTemplatesPromptTemplateIdDeleteResponses[keyof DeletePromptTemplatePromptTemplatesPromptTemplateIdDeleteResponses];

export type ReadPromptTemplatePromptTemplatesPromptTemplateIdGetData = {
    body?: never;
    path: {
        /**
         * Prompt Template Id
         */
        prompt_template_id: string;
    };
    query?: never;
    url: '/prompt_templates/{prompt_template_id}';
};

export type ReadPromptTemplatePromptTemplatesPromptTemplateIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadPromptTemplatePromptTemplatesPromptTemplateIdGetError = ReadPromptTemplatePromptTemplatesPromptTemplateIdGetErrors[keyof ReadPromptTemplatePromptTemplatesPromptTemplateIdGetErrors];

export type ReadPromptTemplatePromptTemplatesPromptTemplateIdGetResponses = {
    /**
     * Successful Response
     */
    200: PromptTemplate;
};

export type ReadPromptTemplatePromptTemplatesPromptTemplateIdGetResponse = ReadPromptTemplatePromptTemplatesPromptTemplateIdGetResponses[keyof ReadPromptTemplatePromptTemplatesPromptTemplateIdGetResponses];

export type UpdatePromptTemplatePromptTemplatesPromptTemplateIdPutData = {
    body: PromptTemplateUpdate;
    path: {
        /**
         * Prompt Template Id
         */
        prompt_template_id: string;
    };
    query?: never;
    url: '/prompt_templates/{prompt_template_id}';
};

export type UpdatePromptTemplatePromptTemplatesPromptTemplateIdPutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdatePromptTemplatePromptTemplatesPromptTemplateIdPutError = UpdatePromptTemplatePromptTemplatesPromptTemplateIdPutErrors[keyof UpdatePromptTemplatePromptTemplatesPromptTemplateIdPutErrors];

export type UpdatePromptTemplatePromptTemplatesPromptTemplateIdPutResponses = {
    /**
     * Successful Response
     */
    200: PromptTemplate;
};

export type UpdatePromptTemplatePromptTemplatesPromptTemplateIdPutResponse = UpdatePromptTemplatePromptTemplatesPromptTemplateIdPutResponses[keyof UpdatePromptTemplatePromptTemplatesPromptTemplateIdPutResponses];

export type ReadPromptsPromptsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Sort By
         */
        sort_by?: string;
        /**
         * Sort Order
         */
        sort_order?: string;
        /**
         * $Filter
         * OData filter expression
         */
        $filter?: string | null;
    };
    url: '/prompts/';
};

export type ReadPromptsPromptsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadPromptsPromptsGetError = ReadPromptsPromptsGetErrors[keyof ReadPromptsPromptsGetErrors];

export type ReadPromptsPromptsGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedPrompt;
};

export type ReadPromptsPromptsGetResponse = ReadPromptsPromptsGetResponses[keyof ReadPromptsPromptsGetResponses];

export type CreatePromptPromptsPostData = {
    body: PromptCreate;
    path?: never;
    query?: never;
    url: '/prompts/';
};

export type CreatePromptPromptsPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreatePromptPromptsPostError = CreatePromptPromptsPostErrors[keyof CreatePromptPromptsPostErrors];

export type CreatePromptPromptsPostResponses = {
    /**
     * Successful Response
     */
    200: Prompt;
};

export type CreatePromptPromptsPostResponse = CreatePromptPromptsPostResponses[keyof CreatePromptPromptsPostResponses];

export type DeletePromptPromptsPromptIdDeleteData = {
    body?: never;
    path: {
        /**
         * Prompt Id
         */
        prompt_id: string;
    };
    query?: never;
    url: '/prompts/{prompt_id}';
};

export type DeletePromptPromptsPromptIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeletePromptPromptsPromptIdDeleteError = DeletePromptPromptsPromptIdDeleteErrors[keyof DeletePromptPromptsPromptIdDeleteErrors];

export type DeletePromptPromptsPromptIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: Prompt;
};

export type DeletePromptPromptsPromptIdDeleteResponse = DeletePromptPromptsPromptIdDeleteResponses[keyof DeletePromptPromptsPromptIdDeleteResponses];

export type ReadPromptPromptsPromptIdGetData = {
    body?: never;
    path: {
        /**
         * Prompt Id
         */
        prompt_id: string;
    };
    query?: never;
    url: '/prompts/{prompt_id}';
};

export type ReadPromptPromptsPromptIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadPromptPromptsPromptIdGetError = ReadPromptPromptsPromptIdGetErrors[keyof ReadPromptPromptsPromptIdGetErrors];

export type ReadPromptPromptsPromptIdGetResponses = {
    /**
     * Successful Response
     */
    200: Prompt;
};

export type ReadPromptPromptsPromptIdGetResponse = ReadPromptPromptsPromptIdGetResponses[keyof ReadPromptPromptsPromptIdGetResponses];

export type UpdatePromptPromptsPromptIdPutData = {
    body: PromptUpdate;
    path: {
        /**
         * Prompt Id
         */
        prompt_id: string;
    };
    query?: never;
    url: '/prompts/{prompt_id}';
};

export type UpdatePromptPromptsPromptIdPutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdatePromptPromptsPromptIdPutError = UpdatePromptPromptsPromptIdPutErrors[keyof UpdatePromptPromptsPromptIdPutErrors];

export type UpdatePromptPromptsPromptIdPutResponses = {
    /**
     * Successful Response
     */
    200: Prompt;
};

export type UpdatePromptPromptsPromptIdPutResponse = UpdatePromptPromptsPromptIdPutResponses[keyof UpdatePromptPromptsPromptIdPutResponses];

export type ListAvailableModelsRecycleModelsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/recycle/models';
};

export type ListAvailableModelsRecycleModelsGetResponses = {
    /**
     * Successful Response
     */
    200: ListModelsResponse;
};

export type ListAvailableModelsRecycleModelsGetResponse = ListAvailableModelsRecycleModelsGetResponses[keyof ListAvailableModelsRecycleModelsGetResponses];

export type GetRecycledRecordsRecycleModelNameGetData = {
    body?: never;
    path: {
        /**
         * Model Name
         */
        model_name: string;
    };
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Organization Id
         * Filter by organization
         */
        organization_id?: string | null;
    };
    url: '/recycle/{model_name}';
};

export type GetRecycledRecordsRecycleModelNameGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetRecycledRecordsRecycleModelNameGetError = GetRecycledRecordsRecycleModelNameGetErrors[keyof GetRecycledRecordsRecycleModelNameGetErrors];

export type GetRecycledRecordsRecycleModelNameGetResponses = {
    /**
     * Successful Response
     */
    200: RecycledRecordsResponse;
};

export type GetRecycledRecordsRecycleModelNameGetResponse = GetRecycledRecordsRecycleModelNameGetResponses[keyof GetRecycledRecordsRecycleModelNameGetResponses];

export type RestoreFromRecycleBinRecycleModelNameItemIdRestorePostData = {
    body?: never;
    path: {
        /**
         * Model Name
         */
        model_name: string;
        /**
         * Item Id
         */
        item_id: string;
    };
    query?: {
        /**
         * Organization Id
         * Organization context
         */
        organization_id?: string | null;
    };
    url: '/recycle/{model_name}/{item_id}/restore';
};

export type RestoreFromRecycleBinRecycleModelNameItemIdRestorePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RestoreFromRecycleBinRecycleModelNameItemIdRestorePostError = RestoreFromRecycleBinRecycleModelNameItemIdRestorePostErrors[keyof RestoreFromRecycleBinRecycleModelNameItemIdRestorePostErrors];

export type RestoreFromRecycleBinRecycleModelNameItemIdRestorePostResponses = {
    /**
     * Successful Response
     */
    200: RestoreResponse;
};

export type RestoreFromRecycleBinRecycleModelNameItemIdRestorePostResponse = RestoreFromRecycleBinRecycleModelNameItemIdRestorePostResponses[keyof RestoreFromRecycleBinRecycleModelNameItemIdRestorePostResponses];

export type PermanentlyDeleteRecordRecycleModelNameItemIdDeleteData = {
    body?: never;
    path: {
        /**
         * Model Name
         */
        model_name: string;
        /**
         * Item Id
         */
        item_id: string;
    };
    query?: {
        /**
         * Confirm
         * Must be true to confirm deletion
         */
        confirm?: boolean;
        /**
         * Organization Id
         * Organization context
         */
        organization_id?: string | null;
    };
    url: '/recycle/{model_name}/{item_id}';
};

export type PermanentlyDeleteRecordRecycleModelNameItemIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PermanentlyDeleteRecordRecycleModelNameItemIdDeleteError = PermanentlyDeleteRecordRecycleModelNameItemIdDeleteErrors[keyof PermanentlyDeleteRecordRecycleModelNameItemIdDeleteErrors];

export type PermanentlyDeleteRecordRecycleModelNameItemIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: PermanentlyDeleteResponse;
};

export type PermanentlyDeleteRecordRecycleModelNameItemIdDeleteResponse = PermanentlyDeleteRecordRecycleModelNameItemIdDeleteResponses[keyof PermanentlyDeleteRecordRecycleModelNameItemIdDeleteResponses];

export type GetRecycleBinCountsRecycleStatsCountsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Organization Id
         * Filter by organization
         */
        organization_id?: string | null;
    };
    url: '/recycle/stats/counts';
};

export type GetRecycleBinCountsRecycleStatsCountsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetRecycleBinCountsRecycleStatsCountsGetError = GetRecycleBinCountsRecycleStatsCountsGetErrors[keyof GetRecycleBinCountsRecycleStatsCountsGetErrors];

export type GetRecycleBinCountsRecycleStatsCountsGetResponses = {
    /**
     * Successful Response
     */
    200: RecycleBinCountsResponse;
};

export type GetRecycleBinCountsRecycleStatsCountsGetResponse = GetRecycleBinCountsRecycleStatsCountsGetResponses[keyof GetRecycleBinCountsRecycleStatsCountsGetResponses];

export type BulkRestoreFromRecycleBinRecycleBulkRestoreModelNamePostData = {
    /**
     * Item Ids
     */
    body: Array<string>;
    path: {
        /**
         * Model Name
         */
        model_name: string;
    };
    query?: {
        /**
         * Organization Id
         * Organization context
         */
        organization_id?: string | null;
    };
    url: '/recycle/bulk-restore/{model_name}';
};

export type BulkRestoreFromRecycleBinRecycleBulkRestoreModelNamePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type BulkRestoreFromRecycleBinRecycleBulkRestoreModelNamePostError = BulkRestoreFromRecycleBinRecycleBulkRestoreModelNamePostErrors[keyof BulkRestoreFromRecycleBinRecycleBulkRestoreModelNamePostErrors];

export type BulkRestoreFromRecycleBinRecycleBulkRestoreModelNamePostResponses = {
    /**
     * Successful Response
     */
    200: BulkRestoreResponse;
};

export type BulkRestoreFromRecycleBinRecycleBulkRestoreModelNamePostResponse = BulkRestoreFromRecycleBinRecycleBulkRestoreModelNamePostResponses[keyof BulkRestoreFromRecycleBinRecycleBulkRestoreModelNamePostResponses];

export type EmptyRecycleBinForModelRecycleEmptyModelNameDeleteData = {
    body?: never;
    path: {
        /**
         * Model Name
         */
        model_name: string;
    };
    query?: {
        /**
         * Confirm
         * Must be true to confirm
         */
        confirm?: boolean;
        /**
         * Organization Id
         * Optional organization filter
         */
        organization_id?: string | null;
    };
    url: '/recycle/empty/{model_name}';
};

export type EmptyRecycleBinForModelRecycleEmptyModelNameDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EmptyRecycleBinForModelRecycleEmptyModelNameDeleteError = EmptyRecycleBinForModelRecycleEmptyModelNameDeleteErrors[keyof EmptyRecycleBinForModelRecycleEmptyModelNameDeleteErrors];

export type EmptyRecycleBinForModelRecycleEmptyModelNameDeleteResponses = {
    /**
     * Successful Response
     */
    200: EmptyRecycleBinResponse;
};

export type EmptyRecycleBinForModelRecycleEmptyModelNameDeleteResponse = EmptyRecycleBinForModelRecycleEmptyModelNameDeleteResponses[keyof EmptyRecycleBinForModelRecycleEmptyModelNameDeleteResponses];

export type ReadResponsePatternsResponsePatternsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Sort By
         */
        sort_by?: string;
        /**
         * Sort Order
         */
        sort_order?: string;
        /**
         * $Filter
         * OData filter expression
         */
        $filter?: string | null;
    };
    url: '/response_patterns/';
};

export type ReadResponsePatternsResponsePatternsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadResponsePatternsResponsePatternsGetError = ReadResponsePatternsResponsePatternsGetErrors[keyof ReadResponsePatternsResponsePatternsGetErrors];

export type ReadResponsePatternsResponsePatternsGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedResponsePattern;
};

export type ReadResponsePatternsResponsePatternsGetResponse = ReadResponsePatternsResponsePatternsGetResponses[keyof ReadResponsePatternsResponsePatternsGetResponses];

export type CreateResponsePatternResponsePatternsPostData = {
    body: ResponsePatternCreate;
    path?: never;
    query?: never;
    url: '/response_patterns/';
};

export type CreateResponsePatternResponsePatternsPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateResponsePatternResponsePatternsPostError = CreateResponsePatternResponsePatternsPostErrors[keyof CreateResponsePatternResponsePatternsPostErrors];

export type CreateResponsePatternResponsePatternsPostResponses = {
    /**
     * Successful Response
     */
    200: ResponsePattern;
};

export type CreateResponsePatternResponsePatternsPostResponse = CreateResponsePatternResponsePatternsPostResponses[keyof CreateResponsePatternResponsePatternsPostResponses];

export type DeleteResponsePatternResponsePatternsResponsePatternIdDeleteData = {
    body?: never;
    path: {
        /**
         * Response Pattern Id
         */
        response_pattern_id: string;
    };
    query?: never;
    url: '/response_patterns/{response_pattern_id}';
};

export type DeleteResponsePatternResponsePatternsResponsePatternIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteResponsePatternResponsePatternsResponsePatternIdDeleteError = DeleteResponsePatternResponsePatternsResponsePatternIdDeleteErrors[keyof DeleteResponsePatternResponsePatternsResponsePatternIdDeleteErrors];

export type DeleteResponsePatternResponsePatternsResponsePatternIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: ResponsePattern;
};

export type DeleteResponsePatternResponsePatternsResponsePatternIdDeleteResponse = DeleteResponsePatternResponsePatternsResponsePatternIdDeleteResponses[keyof DeleteResponsePatternResponsePatternsResponsePatternIdDeleteResponses];

export type ReadResponsePatternResponsePatternsResponsePatternIdGetData = {
    body?: never;
    path: {
        /**
         * Response Pattern Id
         */
        response_pattern_id: string;
    };
    query?: never;
    url: '/response_patterns/{response_pattern_id}';
};

export type ReadResponsePatternResponsePatternsResponsePatternIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadResponsePatternResponsePatternsResponsePatternIdGetError = ReadResponsePatternResponsePatternsResponsePatternIdGetErrors[keyof ReadResponsePatternResponsePatternsResponsePatternIdGetErrors];

export type ReadResponsePatternResponsePatternsResponsePatternIdGetResponses = {
    /**
     * Successful Response
     */
    200: ResponsePattern;
};

export type ReadResponsePatternResponsePatternsResponsePatternIdGetResponse = ReadResponsePatternResponsePatternsResponsePatternIdGetResponses[keyof ReadResponsePatternResponsePatternsResponsePatternIdGetResponses];

export type UpdateResponsePatternResponsePatternsResponsePatternIdPutData = {
    body: ResponsePatternUpdate;
    path: {
        /**
         * Response Pattern Id
         */
        response_pattern_id: string;
    };
    query?: never;
    url: '/response_patterns/{response_pattern_id}';
};

export type UpdateResponsePatternResponsePatternsResponsePatternIdPutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateResponsePatternResponsePatternsResponsePatternIdPutError = UpdateResponsePatternResponsePatternsResponsePatternIdPutErrors[keyof UpdateResponsePatternResponsePatternsResponsePatternIdPutErrors];

export type UpdateResponsePatternResponsePatternsResponsePatternIdPutResponses = {
    /**
     * Successful Response
     */
    200: ResponsePattern;
};

export type UpdateResponsePatternResponsePatternsResponsePatternIdPutResponse = UpdateResponsePatternResponsePatternsResponsePatternIdPutResponses[keyof UpdateResponsePatternResponsePatternsResponsePatternIdPutResponses];

export type ReadRisksRisksGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Sort By
         */
        sort_by?: string;
        /**
         * Sort Order
         */
        sort_order?: string;
        /**
         * $Filter
         * OData filter expression
         */
        $filter?: string | null;
    };
    url: '/risks/';
};

export type ReadRisksRisksGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadRisksRisksGetError = ReadRisksRisksGetErrors[keyof ReadRisksRisksGetErrors];

export type ReadRisksRisksGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedRisk;
};

export type ReadRisksRisksGetResponse = ReadRisksRisksGetResponses[keyof ReadRisksRisksGetResponses];

export type CreateRiskRisksPostData = {
    body: RiskCreate;
    path?: never;
    query?: never;
    url: '/risks/';
};

export type CreateRiskRisksPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateRiskRisksPostError = CreateRiskRisksPostErrors[keyof CreateRiskRisksPostErrors];

export type CreateRiskRisksPostResponses = {
    /**
     * Successful Response
     */
    200: Risk;
};

export type CreateRiskRisksPostResponse = CreateRiskRisksPostResponses[keyof CreateRiskRisksPostResponses];

export type DeleteRiskRisksRiskIdDeleteData = {
    body?: never;
    path: {
        /**
         * Risk Id
         */
        risk_id: string;
    };
    query?: never;
    url: '/risks/{risk_id}';
};

export type DeleteRiskRisksRiskIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteRiskRisksRiskIdDeleteError = DeleteRiskRisksRiskIdDeleteErrors[keyof DeleteRiskRisksRiskIdDeleteErrors];

export type DeleteRiskRisksRiskIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: Risk;
};

export type DeleteRiskRisksRiskIdDeleteResponse = DeleteRiskRisksRiskIdDeleteResponses[keyof DeleteRiskRisksRiskIdDeleteResponses];

export type ReadRiskRisksRiskIdGetData = {
    body?: never;
    path: {
        /**
         * Risk Id
         */
        risk_id: string;
    };
    query?: never;
    url: '/risks/{risk_id}';
};

export type ReadRiskRisksRiskIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadRiskRisksRiskIdGetError = ReadRiskRisksRiskIdGetErrors[keyof ReadRiskRisksRiskIdGetErrors];

export type ReadRiskRisksRiskIdGetResponses = {
    /**
     * Successful Response
     */
    200: Risk;
};

export type ReadRiskRisksRiskIdGetResponse = ReadRiskRisksRiskIdGetResponses[keyof ReadRiskRisksRiskIdGetResponses];

export type UpdateRiskRisksRiskIdPutData = {
    body: RiskUpdate;
    path: {
        /**
         * Risk Id
         */
        risk_id: string;
    };
    query?: never;
    url: '/risks/{risk_id}';
};

export type UpdateRiskRisksRiskIdPutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateRiskRisksRiskIdPutError = UpdateRiskRisksRiskIdPutErrors[keyof UpdateRiskRisksRiskIdPutErrors];

export type UpdateRiskRisksRiskIdPutResponses = {
    /**
     * Successful Response
     */
    200: Risk;
};

export type UpdateRiskRisksRiskIdPutResponse = UpdateRiskRisksRiskIdPutResponses[keyof UpdateRiskRisksRiskIdPutResponses];

export type GetGithubContentsServicesGithubContentsGetData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Repo Url
         */
        repo_url: string;
    };
    url: '/services/github/contents';
};

export type GetGithubContentsServicesGithubContentsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetGithubContentsServicesGithubContentsGetError = GetGithubContentsServicesGithubContentsGetErrors[keyof GetGithubContentsServicesGithubContentsGetErrors];

export type GetGithubContentsServicesGithubContentsGetResponses = {
    /**
     * Response Get Github Contents Services Github Contents Get
     * Successful Response
     */
    200: string;
};

export type GetGithubContentsServicesGithubContentsGetResponse = GetGithubContentsServicesGithubContentsGetResponses[keyof GetGithubContentsServicesGithubContentsGetResponses];

export type GetAiJsonResponseServicesOpenaiJsonPostData = {
    body: PromptRequest;
    path?: never;
    query?: never;
    url: '/services/openai/json';
};

export type GetAiJsonResponseServicesOpenaiJsonPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetAiJsonResponseServicesOpenaiJsonPostError = GetAiJsonResponseServicesOpenaiJsonPostErrors[keyof GetAiJsonResponseServicesOpenaiJsonPostErrors];

export type GetAiJsonResponseServicesOpenaiJsonPostResponses = {
    /**
     * Successful Response
     */
    200: JsonOutput;
};

export type GetAiJsonResponseServicesOpenaiJsonPostResponse = GetAiJsonResponseServicesOpenaiJsonPostResponses[keyof GetAiJsonResponseServicesOpenaiJsonPostResponses];

export type GetAiChatResponseServicesOpenaiChatPostData = {
    body: ChatRequest;
    path?: never;
    query?: never;
    url: '/services/openai/chat';
};

export type GetAiChatResponseServicesOpenaiChatPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetAiChatResponseServicesOpenaiChatPostError = GetAiChatResponseServicesOpenaiChatPostErrors[keyof GetAiChatResponseServicesOpenaiChatPostErrors];

export type GetAiChatResponseServicesOpenaiChatPostResponses = {
    /**
     * Response Get Ai Chat Response Services Openai Chat Post
     * Successful Response
     */
    200: TextResponse | JsonOutput;
};

export type GetAiChatResponseServicesOpenaiChatPostResponse = GetAiChatResponseServicesOpenaiChatPostResponses[keyof GetAiChatResponseServicesOpenaiChatPostResponses];

export type CreateChatCompletionEndpointServicesChatCompletionsPostData = {
    /**
     * Request
     */
    body: {
        [key: string]: JsonInput;
    };
    path?: never;
    query?: never;
    url: '/services/chat/completions';
};

export type CreateChatCompletionEndpointServicesChatCompletionsPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateChatCompletionEndpointServicesChatCompletionsPostError = CreateChatCompletionEndpointServicesChatCompletionsPostErrors[keyof CreateChatCompletionEndpointServicesChatCompletionsPostErrors];

export type CreateChatCompletionEndpointServicesChatCompletionsPostResponses = {
    /**
     * Successful Response
     */
    200: JsonOutput;
};

export type CreateChatCompletionEndpointServicesChatCompletionsPostResponse = CreateChatCompletionEndpointServicesChatCompletionsPostResponses[keyof CreateChatCompletionEndpointServicesChatCompletionsPostResponses];

export type GenerateContentEndpointServicesGenerateContentPostData = {
    body: GenerateContentRequest;
    path?: never;
    query?: never;
    url: '/services/generate/content';
};

export type GenerateContentEndpointServicesGenerateContentPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GenerateContentEndpointServicesGenerateContentPostError = GenerateContentEndpointServicesGenerateContentPostErrors[keyof GenerateContentEndpointServicesGenerateContentPostErrors];

export type GenerateContentEndpointServicesGenerateContentPostResponses = {
    /**
     * Response Generate Content Endpoint Services Generate Content Post
     * Successful Response
     */
    200: TextResponse | JsonOutput;
};

export type GenerateContentEndpointServicesGenerateContentPostResponse = GenerateContentEndpointServicesGenerateContentPostResponses[keyof GenerateContentEndpointServicesGenerateContentPostResponses];

export type GenerateTestsEndpointServicesGenerateTestsPostData = {
    body: GenerateTestsRequest;
    path?: never;
    query?: never;
    url: '/services/generate/tests';
};

export type GenerateTestsEndpointServicesGenerateTestsPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GenerateTestsEndpointServicesGenerateTestsPostError = GenerateTestsEndpointServicesGenerateTestsPostErrors[keyof GenerateTestsEndpointServicesGenerateTestsPostErrors];

export type GenerateTestsEndpointServicesGenerateTestsPostResponses = {
    /**
     * Successful Response
     */
    200: GenerateTestsResponse;
};

export type GenerateTestsEndpointServicesGenerateTestsPostResponse = GenerateTestsEndpointServicesGenerateTestsPostResponses[keyof GenerateTestsEndpointServicesGenerateTestsPostResponses];

export type GenerateTextServicesGenerateTextPostData = {
    body: PromptRequest;
    path?: never;
    query?: never;
    url: '/services/generate/text';
};

export type GenerateTextServicesGenerateTextPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GenerateTextServicesGenerateTextPostError = GenerateTextServicesGenerateTextPostErrors[keyof GenerateTextServicesGenerateTextPostErrors];

export type GenerateTextServicesGenerateTextPostResponses = {
    /**
     * Successful Response
     */
    200: TextResponse;
};

export type GenerateTextServicesGenerateTextPostResponse = GenerateTextServicesGenerateTextPostResponses[keyof GenerateTextServicesGenerateTextPostResponses];

export type UploadDocumentServicesDocumentsUploadPostData = {
    body: BodyUploadDocumentServicesDocumentsUploadPost;
    path?: never;
    query?: never;
    url: '/services/documents/upload';
};

export type UploadDocumentServicesDocumentsUploadPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UploadDocumentServicesDocumentsUploadPostError = UploadDocumentServicesDocumentsUploadPostErrors[keyof UploadDocumentServicesDocumentsUploadPostErrors];

export type UploadDocumentServicesDocumentsUploadPostResponses = {
    /**
     * Successful Response
     */
    200: DocumentUploadResponse;
};

export type UploadDocumentServicesDocumentsUploadPostResponse = UploadDocumentServicesDocumentsUploadPostResponses[keyof UploadDocumentServicesDocumentsUploadPostResponses];

export type ExtractDocumentContentServicesDocumentsExtractPostData = {
    body: ExtractDocumentRequest;
    path?: never;
    query?: never;
    url: '/services/documents/extract';
};

export type ExtractDocumentContentServicesDocumentsExtractPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ExtractDocumentContentServicesDocumentsExtractPostError = ExtractDocumentContentServicesDocumentsExtractPostErrors[keyof ExtractDocumentContentServicesDocumentsExtractPostErrors];

export type ExtractDocumentContentServicesDocumentsExtractPostResponses = {
    /**
     * Successful Response
     */
    200: ExtractDocumentResponse;
};

export type ExtractDocumentContentServicesDocumentsExtractPostResponse = ExtractDocumentContentServicesDocumentsExtractPostResponses[keyof ExtractDocumentContentServicesDocumentsExtractPostResponses];

export type GenerateTestConfigServicesGenerateTestConfigPostData = {
    body: TestConfigRequest;
    path?: never;
    query?: never;
    url: '/services/generate/test_config';
};

export type GenerateTestConfigServicesGenerateTestConfigPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GenerateTestConfigServicesGenerateTestConfigPostError = GenerateTestConfigServicesGenerateTestConfigPostErrors[keyof GenerateTestConfigServicesGenerateTestConfigPostErrors];

export type GenerateTestConfigServicesGenerateTestConfigPostResponses = {
    /**
     * Successful Response
     */
    200: TestConfigResponse;
};

export type GenerateTestConfigServicesGenerateTestConfigPostResponse = GenerateTestConfigServicesGenerateTestConfigPostResponses[keyof GenerateTestConfigServicesGenerateTestConfigPostResponses];

export type ReadSourcesSourcesGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Sort By
         */
        sort_by?: string;
        /**
         * Sort Order
         */
        sort_order?: string;
        /**
         * $Filter
         * OData filter expression
         */
        $filter?: string | null;
    };
    url: '/sources/';
};

export type ReadSourcesSourcesGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadSourcesSourcesGetError = ReadSourcesSourcesGetErrors[keyof ReadSourcesSourcesGetErrors];

export type ReadSourcesSourcesGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedSource;
};

export type ReadSourcesSourcesGetResponse = ReadSourcesSourcesGetResponses[keyof ReadSourcesSourcesGetResponses];

export type CreateSourceSourcesPostData = {
    body: SourceCreate;
    path?: never;
    query?: never;
    url: '/sources/';
};

export type CreateSourceSourcesPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateSourceSourcesPostError = CreateSourceSourcesPostErrors[keyof CreateSourceSourcesPostErrors];

export type CreateSourceSourcesPostResponses = {
    /**
     * Successful Response
     */
    200: Source;
};

export type CreateSourceSourcesPostResponse = CreateSourceSourcesPostResponses[keyof CreateSourceSourcesPostResponses];

export type DeleteSourceSourcesSourceIdDeleteData = {
    body?: never;
    path: {
        /**
         * Source Id
         */
        source_id: string;
    };
    query?: never;
    url: '/sources/{source_id}';
};

export type DeleteSourceSourcesSourceIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteSourceSourcesSourceIdDeleteError = DeleteSourceSourcesSourceIdDeleteErrors[keyof DeleteSourceSourcesSourceIdDeleteErrors];

export type DeleteSourceSourcesSourceIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: Source;
};

export type DeleteSourceSourcesSourceIdDeleteResponse = DeleteSourceSourcesSourceIdDeleteResponses[keyof DeleteSourceSourcesSourceIdDeleteResponses];

export type ReadSourceSourcesSourceIdGetData = {
    body?: never;
    path: {
        /**
         * Source Id
         */
        source_id: string;
    };
    query?: never;
    url: '/sources/{source_id}';
};

export type ReadSourceSourcesSourceIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadSourceSourcesSourceIdGetError = ReadSourceSourcesSourceIdGetErrors[keyof ReadSourceSourcesSourceIdGetErrors];

export type ReadSourceSourcesSourceIdGetResponses = {
    /**
     * Successful Response
     */
    200: Source;
};

export type ReadSourceSourcesSourceIdGetResponse = ReadSourceSourcesSourceIdGetResponses[keyof ReadSourceSourcesSourceIdGetResponses];

export type UpdateSourceSourcesSourceIdPutData = {
    body: SourceUpdate;
    path: {
        /**
         * Source Id
         */
        source_id: string;
    };
    query?: never;
    url: '/sources/{source_id}';
};

export type UpdateSourceSourcesSourceIdPutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateSourceSourcesSourceIdPutError = UpdateSourceSourcesSourceIdPutErrors[keyof UpdateSourceSourcesSourceIdPutErrors];

export type UpdateSourceSourcesSourceIdPutResponses = {
    /**
     * Successful Response
     */
    200: Source;
};

export type UpdateSourceSourcesSourceIdPutResponse = UpdateSourceSourcesSourceIdPutResponses[keyof UpdateSourceSourcesSourceIdPutResponses];

export type ReadStatusesStatusesGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Sort By
         */
        sort_by?: string;
        /**
         * Sort Order
         */
        sort_order?: string;
        /**
         * $Filter
         * OData filter expression
         */
        $filter?: string | null;
        /**
         * Entity Type
         * Filter statuses by entity type
         */
        entity_type?: string | null;
    };
    url: '/statuses/';
};

export type ReadStatusesStatusesGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadStatusesStatusesGetError = ReadStatusesStatusesGetErrors[keyof ReadStatusesStatusesGetErrors];

export type ReadStatusesStatusesGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedStatusDetail;
};

export type ReadStatusesStatusesGetResponse = ReadStatusesStatusesGetResponses[keyof ReadStatusesStatusesGetResponses];

export type CreateStatusStatusesPostData = {
    body: StatusCreate;
    path?: never;
    query?: never;
    url: '/statuses/';
};

export type CreateStatusStatusesPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateStatusStatusesPostError = CreateStatusStatusesPostErrors[keyof CreateStatusStatusesPostErrors];

export type CreateStatusStatusesPostResponses = {
    /**
     * Successful Response
     */
    200: StatusDetail;
};

export type CreateStatusStatusesPostResponse = CreateStatusStatusesPostResponses[keyof CreateStatusStatusesPostResponses];

export type DeleteStatusStatusesStatusIdDeleteData = {
    body?: never;
    path: {
        /**
         * Status Id
         */
        status_id: string;
    };
    query?: never;
    url: '/statuses/{status_id}';
};

export type DeleteStatusStatusesStatusIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteStatusStatusesStatusIdDeleteError = DeleteStatusStatusesStatusIdDeleteErrors[keyof DeleteStatusStatusesStatusIdDeleteErrors];

export type DeleteStatusStatusesStatusIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: Status;
};

export type DeleteStatusStatusesStatusIdDeleteResponse = DeleteStatusStatusesStatusIdDeleteResponses[keyof DeleteStatusStatusesStatusIdDeleteResponses];

export type ReadStatusStatusesStatusIdGetData = {
    body?: never;
    path: {
        /**
         * Status Id
         */
        status_id: string;
    };
    query?: never;
    url: '/statuses/{status_id}';
};

export type ReadStatusStatusesStatusIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadStatusStatusesStatusIdGetError = ReadStatusStatusesStatusIdGetErrors[keyof ReadStatusStatusesStatusIdGetErrors];

export type ReadStatusStatusesStatusIdGetResponses = {
    /**
     * Successful Response
     */
    200: Status;
};

export type ReadStatusStatusesStatusIdGetResponse = ReadStatusStatusesStatusIdGetResponses[keyof ReadStatusStatusesStatusIdGetResponses];

export type UpdateStatusStatusesStatusIdPutData = {
    body: StatusUpdate;
    path: {
        /**
         * Status Id
         */
        status_id: string;
    };
    query?: never;
    url: '/statuses/{status_id}';
};

export type UpdateStatusStatusesStatusIdPutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateStatusStatusesStatusIdPutError = UpdateStatusStatusesStatusIdPutErrors[keyof UpdateStatusStatusesStatusIdPutErrors];

export type UpdateStatusStatusesStatusIdPutResponses = {
    /**
     * Successful Response
     */
    200: Status;
};

export type UpdateStatusStatusesStatusIdPutResponse = UpdateStatusStatusesStatusIdPutResponses[keyof UpdateStatusStatusesStatusIdPutResponses];

export type ReadTagsTagsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Sort By
         */
        sort_by?: string;
        /**
         * Sort Order
         */
        sort_order?: string;
        /**
         * $Filter
         * OData filter expression
         */
        $filter?: string | null;
    };
    url: '/tags/';
};

export type ReadTagsTagsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadTagsTagsGetError = ReadTagsTagsGetErrors[keyof ReadTagsTagsGetErrors];

export type ReadTagsTagsGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedTag;
};

export type ReadTagsTagsGetResponse = ReadTagsTagsGetResponses[keyof ReadTagsTagsGetResponses];

export type CreateTagTagsPostData = {
    body: TagCreate;
    path?: never;
    query?: never;
    url: '/tags/';
};

export type CreateTagTagsPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateTagTagsPostError = CreateTagTagsPostErrors[keyof CreateTagTagsPostErrors];

export type CreateTagTagsPostResponses = {
    /**
     * Successful Response
     */
    200: Tag;
};

export type CreateTagTagsPostResponse = CreateTagTagsPostResponses[keyof CreateTagTagsPostResponses];

export type DeleteTagTagsTagIdDeleteData = {
    body?: never;
    path: {
        /**
         * Tag Id
         */
        tag_id: string;
    };
    query?: never;
    url: '/tags/{tag_id}';
};

export type DeleteTagTagsTagIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteTagTagsTagIdDeleteError = DeleteTagTagsTagIdDeleteErrors[keyof DeleteTagTagsTagIdDeleteErrors];

export type DeleteTagTagsTagIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: Tag;
};

export type DeleteTagTagsTagIdDeleteResponse = DeleteTagTagsTagIdDeleteResponses[keyof DeleteTagTagsTagIdDeleteResponses];

export type ReadTagTagsTagIdGetData = {
    body?: never;
    path: {
        /**
         * Tag Id
         */
        tag_id: string;
    };
    query?: never;
    url: '/tags/{tag_id}';
};

export type ReadTagTagsTagIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadTagTagsTagIdGetError = ReadTagTagsTagIdGetErrors[keyof ReadTagTagsTagIdGetErrors];

export type ReadTagTagsTagIdGetResponses = {
    /**
     * Successful Response
     */
    200: Tag;
};

export type ReadTagTagsTagIdGetResponse = ReadTagTagsTagIdGetResponses[keyof ReadTagTagsTagIdGetResponses];

export type UpdateTagTagsTagIdPutData = {
    body: TagUpdate;
    path: {
        /**
         * Tag Id
         */
        tag_id: string;
    };
    query?: never;
    url: '/tags/{tag_id}';
};

export type UpdateTagTagsTagIdPutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateTagTagsTagIdPutError = UpdateTagTagsTagIdPutErrors[keyof UpdateTagTagsTagIdPutErrors];

export type UpdateTagTagsTagIdPutResponses = {
    /**
     * Successful Response
     */
    200: Tag;
};

export type UpdateTagTagsTagIdPutResponse = UpdateTagTagsTagIdPutResponses[keyof UpdateTagTagsTagIdPutResponses];

export type AssignTagToEntityTagsEntityTypeEntityIdPostData = {
    body: TagCreate;
    path: {
        entity_type: EntityType;
        /**
         * Entity Id
         */
        entity_id: string;
    };
    query?: never;
    url: '/tags/{entity_type}/{entity_id}';
};

export type AssignTagToEntityTagsEntityTypeEntityIdPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AssignTagToEntityTagsEntityTypeEntityIdPostError = AssignTagToEntityTagsEntityTypeEntityIdPostErrors[keyof AssignTagToEntityTagsEntityTypeEntityIdPostErrors];

export type AssignTagToEntityTagsEntityTypeEntityIdPostResponses = {
    /**
     * Successful Response
     */
    200: Tag;
};

export type AssignTagToEntityTagsEntityTypeEntityIdPostResponse = AssignTagToEntityTagsEntityTypeEntityIdPostResponses[keyof AssignTagToEntityTagsEntityTypeEntityIdPostResponses];

export type RemoveTagFromEntityTagsEntityTypeEntityIdTagIdDeleteData = {
    body?: never;
    path: {
        entity_type: EntityType;
        /**
         * Entity Id
         */
        entity_id: string;
        /**
         * Tag Id
         */
        tag_id: string;
    };
    query?: never;
    url: '/tags/{entity_type}/{entity_id}/{tag_id}';
};

export type RemoveTagFromEntityTagsEntityTypeEntityIdTagIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RemoveTagFromEntityTagsEntityTypeEntityIdTagIdDeleteError = RemoveTagFromEntityTagsEntityTypeEntityIdTagIdDeleteErrors[keyof RemoveTagFromEntityTagsEntityTypeEntityIdTagIdDeleteErrors];

export type RemoveTagFromEntityTagsEntityTypeEntityIdTagIdDeleteResponses = {
    /**
     * Response Remove Tag From Entity Tags  Entity Type   Entity Id   Tag Id  Delete
     * Successful Response
     */
    200: {
        [key: string]: string;
    };
};

export type RemoveTagFromEntityTagsEntityTypeEntityIdTagIdDeleteResponse = RemoveTagFromEntityTagsEntityTypeEntityIdTagIdDeleteResponses[keyof RemoveTagFromEntityTagsEntityTypeEntityIdTagIdDeleteResponses];

export type ListTasksTasksGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Sort By
         */
        sort_by?: string;
        /**
         * Sort Order
         */
        sort_order?: string;
        /**
         * $Filter
         * OData filter expression
         */
        $filter?: string | null;
    };
    url: '/tasks/';
};

export type ListTasksTasksGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListTasksTasksGetError = ListTasksTasksGetErrors[keyof ListTasksTasksGetErrors];

export type ListTasksTasksGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedTaskDetail;
};

export type ListTasksTasksGetResponse = ListTasksTasksGetResponses[keyof ListTasksTasksGetResponses];

export type CreateTaskTasksPostData = {
    body: TaskCreate;
    path?: never;
    query?: never;
    url: '/tasks/';
};

export type CreateTaskTasksPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateTaskTasksPostError = CreateTaskTasksPostErrors[keyof CreateTaskTasksPostErrors];

export type CreateTaskTasksPostResponses = {
    /**
     * Successful Response
     */
    200: Task;
};

export type CreateTaskTasksPostResponse = CreateTaskTasksPostResponses[keyof CreateTaskTasksPostResponses];

export type DeleteTaskTasksTaskIdDeleteData = {
    body?: never;
    path: {
        /**
         * Task Id
         */
        task_id: string;
    };
    query?: never;
    url: '/tasks/{task_id}';
};

export type DeleteTaskTasksTaskIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteTaskTasksTaskIdDeleteError = DeleteTaskTasksTaskIdDeleteErrors[keyof DeleteTaskTasksTaskIdDeleteErrors];

export type DeleteTaskTasksTaskIdDeleteResponses = {
    /**
     * Response Delete Task Tasks  Task Id  Delete
     * Successful Response
     */
    200: {
        [key: string]: string;
    };
};

export type DeleteTaskTasksTaskIdDeleteResponse = DeleteTaskTasksTaskIdDeleteResponses[keyof DeleteTaskTasksTaskIdDeleteResponses];

export type GetTaskTasksTaskIdGetData = {
    body?: never;
    path: {
        /**
         * Task Id
         */
        task_id: string;
    };
    query?: never;
    url: '/tasks/{task_id}';
};

export type GetTaskTasksTaskIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTaskTasksTaskIdGetError = GetTaskTasksTaskIdGetErrors[keyof GetTaskTasksTaskIdGetErrors];

export type GetTaskTasksTaskIdGetResponses = {
    /**
     * Successful Response
     */
    200: TaskDetail;
};

export type GetTaskTasksTaskIdGetResponse = GetTaskTasksTaskIdGetResponses[keyof GetTaskTasksTaskIdGetResponses];

export type UpdateTaskTasksTaskIdPatchData = {
    body: TaskUpdate;
    path: {
        /**
         * Task Id
         */
        task_id: string;
    };
    query?: never;
    url: '/tasks/{task_id}';
};

export type UpdateTaskTasksTaskIdPatchErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateTaskTasksTaskIdPatchError = UpdateTaskTasksTaskIdPatchErrors[keyof UpdateTaskTasksTaskIdPatchErrors];

export type UpdateTaskTasksTaskIdPatchResponses = {
    /**
     * Successful Response
     */
    200: Task;
};

export type UpdateTaskTasksTaskIdPatchResponse = UpdateTaskTasksTaskIdPatchResponses[keyof UpdateTaskTasksTaskIdPatchResponses];

export type GetTasksByEntityTasksEntityTypeEntityIdGetData = {
    body?: never;
    path: {
        /**
         * Entity Type
         */
        entity_type: string;
        /**
         * Entity Id
         */
        entity_id: string;
    };
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Sort By
         */
        sort_by?: string;
        /**
         * Sort Order
         */
        sort_order?: string;
    };
    url: '/tasks/{entity_type}/{entity_id}';
};

export type GetTasksByEntityTasksEntityTypeEntityIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTasksByEntityTasksEntityTypeEntityIdGetError = GetTasksByEntityTasksEntityTypeEntityIdGetErrors[keyof GetTasksByEntityTasksEntityTypeEntityIdGetErrors];

export type GetTasksByEntityTasksEntityTypeEntityIdGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedTaskDetail;
};

export type GetTasksByEntityTasksEntityTypeEntityIdGetResponse = GetTasksByEntityTasksEntityTypeEntityIdGetResponses[keyof GetTasksByEntityTasksEntityTypeEntityIdGetResponses];

export type ReadTestContextsTestContextsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Test Id
         */
        test_id?: string | null;
    };
    url: '/test-contexts/';
};

export type ReadTestContextsTestContextsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadTestContextsTestContextsGetError = ReadTestContextsTestContextsGetErrors[keyof ReadTestContextsTestContextsGetErrors];

export type ReadTestContextsTestContextsGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedTestContext;
};

export type ReadTestContextsTestContextsGetResponse = ReadTestContextsTestContextsGetResponses[keyof ReadTestContextsTestContextsGetResponses];

export type CreateTestContextTestContextsPostData = {
    body: TestContextCreate;
    path?: never;
    query?: never;
    url: '/test-contexts/';
};

export type CreateTestContextTestContextsPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateTestContextTestContextsPostError = CreateTestContextTestContextsPostErrors[keyof CreateTestContextTestContextsPostErrors];

export type CreateTestContextTestContextsPostResponses = {
    /**
     * Successful Response
     */
    200: TestContext;
};

export type CreateTestContextTestContextsPostResponse = CreateTestContextTestContextsPostResponses[keyof CreateTestContextTestContextsPostResponses];

export type DeleteTestContextTestContextsTestContextIdDeleteData = {
    body?: never;
    path: {
        /**
         * Test Context Id
         */
        test_context_id: string;
    };
    query?: never;
    url: '/test-contexts/{test_context_id}';
};

export type DeleteTestContextTestContextsTestContextIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteTestContextTestContextsTestContextIdDeleteError = DeleteTestContextTestContextsTestContextIdDeleteErrors[keyof DeleteTestContextTestContextsTestContextIdDeleteErrors];

export type DeleteTestContextTestContextsTestContextIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: TestContext;
};

export type DeleteTestContextTestContextsTestContextIdDeleteResponse = DeleteTestContextTestContextsTestContextIdDeleteResponses[keyof DeleteTestContextTestContextsTestContextIdDeleteResponses];

export type ReadTestContextTestContextsTestContextIdGetData = {
    body?: never;
    path: {
        /**
         * Test Context Id
         */
        test_context_id: string;
    };
    query?: never;
    url: '/test-contexts/{test_context_id}';
};

export type ReadTestContextTestContextsTestContextIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadTestContextTestContextsTestContextIdGetError = ReadTestContextTestContextsTestContextIdGetErrors[keyof ReadTestContextTestContextsTestContextIdGetErrors];

export type ReadTestContextTestContextsTestContextIdGetResponses = {
    /**
     * Successful Response
     */
    200: TestContext;
};

export type ReadTestContextTestContextsTestContextIdGetResponse = ReadTestContextTestContextsTestContextIdGetResponses[keyof ReadTestContextTestContextsTestContextIdGetResponses];

export type UpdateTestContextTestContextsTestContextIdPutData = {
    body: TestContextUpdate;
    path: {
        /**
         * Test Context Id
         */
        test_context_id: string;
    };
    query?: never;
    url: '/test-contexts/{test_context_id}';
};

export type UpdateTestContextTestContextsTestContextIdPutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateTestContextTestContextsTestContextIdPutError = UpdateTestContextTestContextsTestContextIdPutErrors[keyof UpdateTestContextTestContextsTestContextIdPutErrors];

export type UpdateTestContextTestContextsTestContextIdPutResponses = {
    /**
     * Successful Response
     */
    200: TestContext;
};

export type UpdateTestContextTestContextsTestContextIdPutResponse = UpdateTestContextTestContextsTestContextIdPutResponses[keyof UpdateTestContextTestContextsTestContextIdPutResponses];

export type ReadTestConfigurationsTestConfigurationsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Sort By
         */
        sort_by?: string;
        /**
         * Sort Order
         */
        sort_order?: string;
        /**
         * $Filter
         * OData filter expression
         */
        $filter?: string | null;
    };
    url: '/test_configurations/';
};

export type ReadTestConfigurationsTestConfigurationsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadTestConfigurationsTestConfigurationsGetError = ReadTestConfigurationsTestConfigurationsGetErrors[keyof ReadTestConfigurationsTestConfigurationsGetErrors];

export type ReadTestConfigurationsTestConfigurationsGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedTestConfigurationDetail;
};

export type ReadTestConfigurationsTestConfigurationsGetResponse = ReadTestConfigurationsTestConfigurationsGetResponses[keyof ReadTestConfigurationsTestConfigurationsGetResponses];

export type CreateTestConfigurationTestConfigurationsPostData = {
    body: TestConfigurationCreate;
    path?: never;
    query?: never;
    url: '/test_configurations/';
};

export type CreateTestConfigurationTestConfigurationsPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateTestConfigurationTestConfigurationsPostError = CreateTestConfigurationTestConfigurationsPostErrors[keyof CreateTestConfigurationTestConfigurationsPostErrors];

export type CreateTestConfigurationTestConfigurationsPostResponses = {
    /**
     * Successful Response
     */
    200: TestConfiguration;
};

export type CreateTestConfigurationTestConfigurationsPostResponse = CreateTestConfigurationTestConfigurationsPostResponses[keyof CreateTestConfigurationTestConfigurationsPostResponses];

export type DeleteTestConfigurationTestConfigurationsTestConfigurationIdDeleteData = {
    body?: never;
    path: {
        /**
         * Test Configuration Id
         */
        test_configuration_id: string;
    };
    query?: never;
    url: '/test_configurations/{test_configuration_id}';
};

export type DeleteTestConfigurationTestConfigurationsTestConfigurationIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteTestConfigurationTestConfigurationsTestConfigurationIdDeleteError = DeleteTestConfigurationTestConfigurationsTestConfigurationIdDeleteErrors[keyof DeleteTestConfigurationTestConfigurationsTestConfigurationIdDeleteErrors];

export type DeleteTestConfigurationTestConfigurationsTestConfigurationIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: TestConfiguration;
};

export type DeleteTestConfigurationTestConfigurationsTestConfigurationIdDeleteResponse = DeleteTestConfigurationTestConfigurationsTestConfigurationIdDeleteResponses[keyof DeleteTestConfigurationTestConfigurationsTestConfigurationIdDeleteResponses];

export type ReadTestConfigurationTestConfigurationsTestConfigurationIdGetData = {
    body?: never;
    path: {
        /**
         * Test Configuration Id
         */
        test_configuration_id: string;
    };
    query?: never;
    url: '/test_configurations/{test_configuration_id}';
};

export type ReadTestConfigurationTestConfigurationsTestConfigurationIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadTestConfigurationTestConfigurationsTestConfigurationIdGetError = ReadTestConfigurationTestConfigurationsTestConfigurationIdGetErrors[keyof ReadTestConfigurationTestConfigurationsTestConfigurationIdGetErrors];

export type ReadTestConfigurationTestConfigurationsTestConfigurationIdGetResponses = {
    /**
     * Successful Response
     */
    200: TestConfigurationDetail;
};

export type ReadTestConfigurationTestConfigurationsTestConfigurationIdGetResponse = ReadTestConfigurationTestConfigurationsTestConfigurationIdGetResponses[keyof ReadTestConfigurationTestConfigurationsTestConfigurationIdGetResponses];

export type UpdateTestConfigurationTestConfigurationsTestConfigurationIdPutData = {
    body: TestConfigurationUpdate;
    path: {
        /**
         * Test Configuration Id
         */
        test_configuration_id: string;
    };
    query?: never;
    url: '/test_configurations/{test_configuration_id}';
};

export type UpdateTestConfigurationTestConfigurationsTestConfigurationIdPutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateTestConfigurationTestConfigurationsTestConfigurationIdPutError = UpdateTestConfigurationTestConfigurationsTestConfigurationIdPutErrors[keyof UpdateTestConfigurationTestConfigurationsTestConfigurationIdPutErrors];

export type UpdateTestConfigurationTestConfigurationsTestConfigurationIdPutResponses = {
    /**
     * Successful Response
     */
    200: TestConfiguration;
};

export type UpdateTestConfigurationTestConfigurationsTestConfigurationIdPutResponse = UpdateTestConfigurationTestConfigurationsTestConfigurationIdPutResponses[keyof UpdateTestConfigurationTestConfigurationsTestConfigurationIdPutResponses];

export type ExecuteTestConfigurationEndpointTestConfigurationsTestConfigurationIdExecutePostData = {
    body?: never;
    path: {
        /**
         * Test Configuration Id
         */
        test_configuration_id: string;
    };
    query?: never;
    url: '/test_configurations/{test_configuration_id}/execute';
};

export type ExecuteTestConfigurationEndpointTestConfigurationsTestConfigurationIdExecutePostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ExecuteTestConfigurationEndpointTestConfigurationsTestConfigurationIdExecutePostError = ExecuteTestConfigurationEndpointTestConfigurationsTestConfigurationIdExecutePostErrors[keyof ExecuteTestConfigurationEndpointTestConfigurationsTestConfigurationIdExecutePostErrors];

export type ExecuteTestConfigurationEndpointTestConfigurationsTestConfigurationIdExecutePostResponses = {
    /**
     * Successful Response
     */
    200: ExecuteTestConfigurationResponse;
};

export type ExecuteTestConfigurationEndpointTestConfigurationsTestConfigurationIdExecutePostResponse = ExecuteTestConfigurationEndpointTestConfigurationsTestConfigurationIdExecutePostResponses[keyof ExecuteTestConfigurationEndpointTestConfigurationsTestConfigurationIdExecutePostResponses];

export type ReadTestResultsTestResultsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Sort By
         */
        sort_by?: string;
        /**
         * Sort Order
         */
        sort_order?: string;
        /**
         * $Filter
         * OData filter expression
         */
        $filter?: string | null;
    };
    url: '/test_results/';
};

export type ReadTestResultsTestResultsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadTestResultsTestResultsGetError = ReadTestResultsTestResultsGetErrors[keyof ReadTestResultsTestResultsGetErrors];

export type ReadTestResultsTestResultsGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedTestResultDetail;
};

export type ReadTestResultsTestResultsGetResponse = ReadTestResultsTestResultsGetResponses[keyof ReadTestResultsTestResultsGetResponses];

export type CreateTestResultTestResultsPostData = {
    body: TestResultCreate;
    path?: never;
    query?: never;
    url: '/test_results/';
};

export type CreateTestResultTestResultsPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateTestResultTestResultsPostError = CreateTestResultTestResultsPostErrors[keyof CreateTestResultTestResultsPostErrors];

export type CreateTestResultTestResultsPostResponses = {
    /**
     * Successful Response
     */
    200: TestResult;
};

export type CreateTestResultTestResultsPostResponse = CreateTestResultTestResultsPostResponses[keyof CreateTestResultTestResultsPostResponses];

export type GenerateTestResultStatsTestResultsStatsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Data mode: 'summary' (lightweight), 'metrics' (individual metrics), 'behavior/category/topic' (dimensional), 'timeline' (trends), 'test_runs' (by run), 'overall' (aggregate), 'all' (complete)
         */
        mode?: TestResultStatsMode;
        /**
         * Top
         * Max items per dimension (e.g., top 10 behaviors)
         */
        top?: number | null;
        /**
         * Months
         * Months of historical data to include (default: 6)
         */
        months?: number | null;
        /**
         * Test Run Id
         * Filter by specific test run UUID (legacy, use test_run_ids for multiple)
         */
        test_run_id?: string | null;
        /**
         * Test Set Ids
         * Filter by test set IDs
         */
        test_set_ids?: Array<string> | null;
        /**
         * Behavior Ids
         * Filter by behavior IDs
         */
        behavior_ids?: Array<string> | null;
        /**
         * Category Ids
         * Filter by category IDs
         */
        category_ids?: Array<string> | null;
        /**
         * Topic Ids
         * Filter by topic IDs
         */
        topic_ids?: Array<string> | null;
        /**
         * Status Ids
         * Filter by test status IDs
         */
        status_ids?: Array<string> | null;
        /**
         * Test Ids
         * Filter by specific test IDs
         */
        test_ids?: Array<string> | null;
        /**
         * Test Type Ids
         * Filter by test type IDs
         */
        test_type_ids?: Array<string> | null;
        /**
         * Test Run Ids
         * Filter by multiple test run IDs
         */
        test_run_ids?: Array<string> | null;
        /**
         * User Ids
         * Filter by test creator user IDs
         */
        user_ids?: Array<string> | null;
        /**
         * Assignee Ids
         * Filter by assignee user IDs
         */
        assignee_ids?: Array<string> | null;
        /**
         * Owner Ids
         * Filter by test owner user IDs
         */
        owner_ids?: Array<string> | null;
        /**
         * Prompt Ids
         * Filter by prompt IDs
         */
        prompt_ids?: Array<string> | null;
        /**
         * Priority Min
         * Minimum priority level (inclusive)
         */
        priority_min?: number | null;
        /**
         * Priority Max
         * Maximum priority level (inclusive)
         */
        priority_max?: number | null;
        /**
         * Tags
         * Filter by tags (tests must have all specified tags)
         */
        tags?: Array<string> | null;
        /**
         * Start Date
         * Start date (ISO format, overrides months parameter)
         */
        start_date?: string | null;
        /**
         * End Date
         * End date (ISO format, overrides months parameter)
         */
        end_date?: string | null;
    };
    url: '/test_results/stats';
};

export type GenerateTestResultStatsTestResultsStatsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GenerateTestResultStatsTestResultsStatsGetError = GenerateTestResultStatsTestResultsStatsGetErrors[keyof GenerateTestResultStatsTestResultsStatsGetErrors];

export type GenerateTestResultStatsTestResultsStatsGetResponses = {
    /**
     * Response Generate Test Result Stats Test Results Stats Get
     * Successful Response
     */
    200: TestResultStatsAll | TestResultStatsSummary | TestResultStatsMetrics | TestResultStatsBehavior | TestResultStatsCategory | TestResultStatsTopic | TestResultStatsOverall | TestResultStatsTimeline | TestResultStatsTestRuns;
};

export type GenerateTestResultStatsTestResultsStatsGetResponse = GenerateTestResultStatsTestResultsStatsGetResponses[keyof GenerateTestResultStatsTestResultsStatsGetResponses];

export type DeleteTestResultTestResultsTestResultIdDeleteData = {
    body?: never;
    path: {
        /**
         * Test Result Id
         */
        test_result_id: string;
    };
    query?: never;
    url: '/test_results/{test_result_id}';
};

export type DeleteTestResultTestResultsTestResultIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteTestResultTestResultsTestResultIdDeleteError = DeleteTestResultTestResultsTestResultIdDeleteErrors[keyof DeleteTestResultTestResultsTestResultIdDeleteErrors];

export type DeleteTestResultTestResultsTestResultIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: TestResult;
};

export type DeleteTestResultTestResultsTestResultIdDeleteResponse = DeleteTestResultTestResultsTestResultIdDeleteResponses[keyof DeleteTestResultTestResultsTestResultIdDeleteResponses];

export type ReadTestResultTestResultsTestResultIdGetData = {
    body?: never;
    path: {
        /**
         * Test Result Id
         */
        test_result_id: string;
    };
    query?: never;
    url: '/test_results/{test_result_id}';
};

export type ReadTestResultTestResultsTestResultIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadTestResultTestResultsTestResultIdGetError = ReadTestResultTestResultsTestResultIdGetErrors[keyof ReadTestResultTestResultsTestResultIdGetErrors];

export type ReadTestResultTestResultsTestResultIdGetResponses = {
    /**
     * Successful Response
     */
    200: TestResultDetail;
};

export type ReadTestResultTestResultsTestResultIdGetResponse = ReadTestResultTestResultsTestResultIdGetResponses[keyof ReadTestResultTestResultsTestResultIdGetResponses];

export type UpdateTestResultTestResultsTestResultIdPutData = {
    body: TestResultUpdate;
    path: {
        /**
         * Test Result Id
         */
        test_result_id: string;
    };
    query?: never;
    url: '/test_results/{test_result_id}';
};

export type UpdateTestResultTestResultsTestResultIdPutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateTestResultTestResultsTestResultIdPutError = UpdateTestResultTestResultsTestResultIdPutErrors[keyof UpdateTestResultTestResultsTestResultIdPutErrors];

export type UpdateTestResultTestResultsTestResultIdPutResponses = {
    /**
     * Successful Response
     */
    200: TestResult;
};

export type UpdateTestResultTestResultsTestResultIdPutResponse = UpdateTestResultTestResultsTestResultIdPutResponses[keyof UpdateTestResultTestResultsTestResultIdPutResponses];

export type ReadTestRunsTestRunsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Sort By
         */
        sort_by?: string;
        /**
         * Sort Order
         */
        sort_order?: string;
        /**
         * $Filter
         * OData filter expression
         */
        $filter?: string | null;
    };
    url: '/test_runs/';
};

export type ReadTestRunsTestRunsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadTestRunsTestRunsGetError = ReadTestRunsTestRunsGetErrors[keyof ReadTestRunsTestRunsGetErrors];

export type ReadTestRunsTestRunsGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedTestRunDetail;
};

export type ReadTestRunsTestRunsGetResponse = ReadTestRunsTestRunsGetResponses[keyof ReadTestRunsTestRunsGetResponses];

export type CreateTestRunTestRunsPostData = {
    body: TestRunCreate;
    path?: never;
    query?: never;
    url: '/test_runs/';
};

export type CreateTestRunTestRunsPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateTestRunTestRunsPostError = CreateTestRunTestRunsPostErrors[keyof CreateTestRunTestRunsPostErrors];

export type CreateTestRunTestRunsPostResponses = {
    /**
     * Successful Response
     */
    200: TestRun;
};

export type CreateTestRunTestRunsPostResponse = CreateTestRunTestRunsPostResponses[keyof CreateTestRunTestRunsPostResponses];

export type GenerateTestRunStatsTestRunsStatsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Data mode: 'summary' (lightweight), 'status' (status distribution), 'results' (result distribution), 'test_sets' (most run test sets), 'executors' (top executors), 'timeline' (trends), 'all' (complete)
         */
        mode?: TestRunStatsMode;
        /**
         * Top
         * Max items per dimension (e.g., top 10 executors)
         */
        top?: number | null;
        /**
         * Months
         * Months of historical data to include (default: 6)
         */
        months?: number | null;
        /**
         * Test Run Ids
         * Filter by specific test run IDs
         */
        test_run_ids?: Array<string> | null;
        /**
         * User Ids
         * Filter by executor user IDs
         */
        user_ids?: Array<string> | null;
        /**
         * Endpoint Ids
         * Filter by endpoint IDs
         */
        endpoint_ids?: Array<string> | null;
        /**
         * Test Set Ids
         * Filter by test set IDs
         */
        test_set_ids?: Array<string> | null;
        /**
         * Status List
         * Filter by test run statuses
         */
        status_list?: Array<string> | null;
        /**
         * Start Date
         * Start date (ISO format, overrides months parameter)
         */
        start_date?: string | null;
        /**
         * End Date
         * End date (ISO format, overrides months parameter)
         */
        end_date?: string | null;
    };
    url: '/test_runs/stats';
};

export type GenerateTestRunStatsTestRunsStatsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GenerateTestRunStatsTestRunsStatsGetError = GenerateTestRunStatsTestRunsStatsGetErrors[keyof GenerateTestRunStatsTestRunsStatsGetErrors];

export type GenerateTestRunStatsTestRunsStatsGetResponses = {
    /**
     * Response Generate Test Run Stats Test Runs Stats Get
     * Successful Response
     */
    200: TestRunStatsAll | TestRunStatsSummary | TestRunStatsStatus | TestRunStatsResults | TestRunStatsTests | TestRunStatsExecutors | TestRunStatsTimeline;
};

export type GenerateTestRunStatsTestRunsStatsGetResponse = GenerateTestRunStatsTestRunsStatsGetResponses[keyof GenerateTestRunStatsTestRunsStatsGetResponses];

export type DeleteTestRunTestRunsTestRunIdDeleteData = {
    body?: never;
    path: {
        /**
         * Test Run Id
         */
        test_run_id: string;
    };
    query?: never;
    url: '/test_runs/{test_run_id}';
};

export type DeleteTestRunTestRunsTestRunIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteTestRunTestRunsTestRunIdDeleteError = DeleteTestRunTestRunsTestRunIdDeleteErrors[keyof DeleteTestRunTestRunsTestRunIdDeleteErrors];

export type DeleteTestRunTestRunsTestRunIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: TestRun;
};

export type DeleteTestRunTestRunsTestRunIdDeleteResponse = DeleteTestRunTestRunsTestRunIdDeleteResponses[keyof DeleteTestRunTestRunsTestRunIdDeleteResponses];

export type ReadTestRunTestRunsTestRunIdGetData = {
    body?: never;
    path: {
        /**
         * Test Run Id
         */
        test_run_id: string;
    };
    query?: never;
    url: '/test_runs/{test_run_id}';
};

export type ReadTestRunTestRunsTestRunIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadTestRunTestRunsTestRunIdGetError = ReadTestRunTestRunsTestRunIdGetErrors[keyof ReadTestRunTestRunsTestRunIdGetErrors];

export type ReadTestRunTestRunsTestRunIdGetResponses = {
    /**
     * Successful Response
     */
    200: TestRunDetail;
};

export type ReadTestRunTestRunsTestRunIdGetResponse = ReadTestRunTestRunsTestRunIdGetResponses[keyof ReadTestRunTestRunsTestRunIdGetResponses];

export type UpdateTestRunTestRunsTestRunIdPutData = {
    body: TestRunUpdate;
    path: {
        /**
         * Test Run Id
         */
        test_run_id: string;
    };
    query?: never;
    url: '/test_runs/{test_run_id}';
};

export type UpdateTestRunTestRunsTestRunIdPutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateTestRunTestRunsTestRunIdPutError = UpdateTestRunTestRunsTestRunIdPutErrors[keyof UpdateTestRunTestRunsTestRunIdPutErrors];

export type UpdateTestRunTestRunsTestRunIdPutResponses = {
    /**
     * Successful Response
     */
    200: TestRun;
};

export type UpdateTestRunTestRunsTestRunIdPutResponse = UpdateTestRunTestRunsTestRunIdPutResponses[keyof UpdateTestRunTestRunsTestRunIdPutResponses];

export type GetTestRunBehaviorsTestRunsTestRunIdBehaviorsGetData = {
    body?: never;
    path: {
        /**
         * Test Run Id
         */
        test_run_id: string;
    };
    query?: never;
    url: '/test_runs/{test_run_id}/behaviors';
};

export type GetTestRunBehaviorsTestRunsTestRunIdBehaviorsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTestRunBehaviorsTestRunsTestRunIdBehaviorsGetError = GetTestRunBehaviorsTestRunsTestRunIdBehaviorsGetErrors[keyof GetTestRunBehaviorsTestRunsTestRunIdBehaviorsGetErrors];

export type GetTestRunBehaviorsTestRunsTestRunIdBehaviorsGetResponses = {
    /**
     * Response Get Test Run Behaviors Test Runs  Test Run Id  Behaviors Get
     * Successful Response
     */
    200: Array<Behavior>;
};

export type GetTestRunBehaviorsTestRunsTestRunIdBehaviorsGetResponse = GetTestRunBehaviorsTestRunsTestRunIdBehaviorsGetResponses[keyof GetTestRunBehaviorsTestRunsTestRunIdBehaviorsGetResponses];

export type DownloadTestRunResultsTestRunsTestRunIdDownloadGetData = {
    body?: never;
    path: {
        /**
         * Test Run Id
         */
        test_run_id: string;
    };
    query?: never;
    url: '/test_runs/{test_run_id}/download';
};

export type DownloadTestRunResultsTestRunsTestRunIdDownloadGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DownloadTestRunResultsTestRunsTestRunIdDownloadGetError = DownloadTestRunResultsTestRunsTestRunIdDownloadGetErrors[keyof DownloadTestRunResultsTestRunsTestRunIdDownloadGetErrors];

export type DownloadTestRunResultsTestRunsTestRunIdDownloadGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GenerateTestSetTestSetsGeneratePostData = {
    body: TestSetGenerationRequest;
    path?: never;
    query?: never;
    url: '/test_sets/generate';
};

export type GenerateTestSetTestSetsGeneratePostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GenerateTestSetTestSetsGeneratePostError = GenerateTestSetTestSetsGeneratePostErrors[keyof GenerateTestSetTestSetsGeneratePostErrors];

export type GenerateTestSetTestSetsGeneratePostResponses = {
    /**
     * Successful Response
     */
    200: TestSetGenerationResponse;
};

export type GenerateTestSetTestSetsGeneratePostResponse = GenerateTestSetTestSetsGeneratePostResponses[keyof GenerateTestSetTestSetsGeneratePostResponses];

export type CreateTestSetBulkTestSetsBulkPostData = {
    body: TestSetBulkCreate;
    path?: never;
    query?: never;
    url: '/test_sets/bulk';
};

export type CreateTestSetBulkTestSetsBulkPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateTestSetBulkTestSetsBulkPostError = CreateTestSetBulkTestSetsBulkPostErrors[keyof CreateTestSetBulkTestSetsBulkPostErrors];

export type CreateTestSetBulkTestSetsBulkPostResponses = {
    /**
     * Successful Response
     */
    200: TestSetBulkResponse;
};

export type CreateTestSetBulkTestSetsBulkPostResponse = CreateTestSetBulkTestSetsBulkPostResponses[keyof CreateTestSetBulkTestSetsBulkPostResponses];

export type ReadTestSetsTestSetsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Sort By
         */
        sort_by?: string;
        /**
         * Sort Order
         */
        sort_order?: string;
        /**
         * $Filter
         * OData filter expression
         */
        $filter?: string | null;
        /**
         * Has Runs
         * Filter test sets by whether they have test runs
         */
        has_runs?: boolean | null;
    };
    url: '/test_sets/';
};

export type ReadTestSetsTestSetsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadTestSetsTestSetsGetError = ReadTestSetsTestSetsGetErrors[keyof ReadTestSetsTestSetsGetErrors];

export type ReadTestSetsTestSetsGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedTestSetDetail;
};

export type ReadTestSetsTestSetsGetResponse = ReadTestSetsTestSetsGetResponses[keyof ReadTestSetsTestSetsGetResponses];

export type CreateTestSetTestSetsPostData = {
    body: TestSetCreate;
    path?: never;
    query?: never;
    url: '/test_sets/';
};

export type CreateTestSetTestSetsPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateTestSetTestSetsPostError = CreateTestSetTestSetsPostErrors[keyof CreateTestSetTestSetsPostErrors];

export type CreateTestSetTestSetsPostResponses = {
    /**
     * Successful Response
     */
    200: TestSet;
};

export type CreateTestSetTestSetsPostResponse = CreateTestSetTestSetsPostResponses[keyof CreateTestSetTestSetsPostResponses];

export type GenerateTestSetStatsTestSetsStatsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Top
         */
        top?: number | null;
        /**
         * Months
         */
        months?: number | null;
        mode?: StatsMode;
    };
    url: '/test_sets/stats';
};

export type GenerateTestSetStatsTestSetsStatsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GenerateTestSetStatsTestSetsStatsGetError = GenerateTestSetStatsTestSetsStatsGetErrors[keyof GenerateTestSetStatsTestSetsStatsGetErrors];

export type GenerateTestSetStatsTestSetsStatsGetResponses = {
    /**
     * Successful Response
     */
    200: EntityStats;
};

export type GenerateTestSetStatsTestSetsStatsGetResponse = GenerateTestSetStatsTestSetsStatsGetResponses[keyof GenerateTestSetStatsTestSetsStatsGetResponses];

export type ReadTestSetTestSetsTestSetIdentifierGetData = {
    body?: never;
    path: {
        /**
         * Test Set Identifier
         */
        test_set_identifier: string;
    };
    query?: never;
    url: '/test_sets/{test_set_identifier}';
};

export type ReadTestSetTestSetsTestSetIdentifierGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadTestSetTestSetsTestSetIdentifierGetError = ReadTestSetTestSetsTestSetIdentifierGetErrors[keyof ReadTestSetTestSetsTestSetIdentifierGetErrors];

export type ReadTestSetTestSetsTestSetIdentifierGetResponses = {
    /**
     * Successful Response
     */
    200: TestSetDetail;
};

export type ReadTestSetTestSetsTestSetIdentifierGetResponse = ReadTestSetTestSetsTestSetIdentifierGetResponses[keyof ReadTestSetTestSetsTestSetIdentifierGetResponses];

export type DeleteTestSetTestSetsTestSetIdDeleteData = {
    body?: never;
    path: {
        /**
         * Test Set Id
         */
        test_set_id: string;
    };
    query?: never;
    url: '/test_sets/{test_set_id}';
};

export type DeleteTestSetTestSetsTestSetIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteTestSetTestSetsTestSetIdDeleteError = DeleteTestSetTestSetsTestSetIdDeleteErrors[keyof DeleteTestSetTestSetsTestSetIdDeleteErrors];

export type DeleteTestSetTestSetsTestSetIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: TestSet;
};

export type DeleteTestSetTestSetsTestSetIdDeleteResponse = DeleteTestSetTestSetsTestSetIdDeleteResponses[keyof DeleteTestSetTestSetsTestSetIdDeleteResponses];

export type UpdateTestSetTestSetsTestSetIdPutData = {
    body: TestSetUpdate;
    path: {
        /**
         * Test Set Id
         */
        test_set_id: string;
    };
    query?: never;
    url: '/test_sets/{test_set_id}';
};

export type UpdateTestSetTestSetsTestSetIdPutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateTestSetTestSetsTestSetIdPutError = UpdateTestSetTestSetsTestSetIdPutErrors[keyof UpdateTestSetTestSetsTestSetIdPutErrors];

export type UpdateTestSetTestSetsTestSetIdPutResponses = {
    /**
     * Successful Response
     */
    200: TestSet;
};

export type UpdateTestSetTestSetsTestSetIdPutResponse = UpdateTestSetTestSetsTestSetIdPutResponses[keyof UpdateTestSetTestSetsTestSetIdPutResponses];

export type DownloadTestSetPromptsTestSetsTestSetIdentifierDownloadGetData = {
    body?: never;
    path: {
        /**
         * Test Set Identifier
         */
        test_set_identifier: string;
    };
    query?: never;
    url: '/test_sets/{test_set_identifier}/download';
};

export type DownloadTestSetPromptsTestSetsTestSetIdentifierDownloadGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DownloadTestSetPromptsTestSetsTestSetIdentifierDownloadGetError = DownloadTestSetPromptsTestSetsTestSetIdentifierDownloadGetErrors[keyof DownloadTestSetPromptsTestSetsTestSetIdentifierDownloadGetErrors];

export type DownloadTestSetPromptsTestSetsTestSetIdentifierDownloadGetResponses = {
    /**
     * CSV export of prompts in the test set
     */
    200: string;
};

export type DownloadTestSetPromptsTestSetsTestSetIdentifierDownloadGetResponse = DownloadTestSetPromptsTestSetsTestSetIdentifierDownloadGetResponses[keyof DownloadTestSetPromptsTestSetsTestSetIdentifierDownloadGetResponses];

export type DownloadTestSetPromptsCsvTestSetsTestSetIdentifierPromptsDownloadGetData = {
    body?: never;
    path: {
        /**
         * Test Set Identifier
         */
        test_set_identifier: string;
    };
    query?: never;
    url: '/test_sets/{test_set_identifier}/prompts/download';
};

export type DownloadTestSetPromptsCsvTestSetsTestSetIdentifierPromptsDownloadGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DownloadTestSetPromptsCsvTestSetsTestSetIdentifierPromptsDownloadGetError = DownloadTestSetPromptsCsvTestSetsTestSetIdentifierPromptsDownloadGetErrors[keyof DownloadTestSetPromptsCsvTestSetsTestSetIdentifierPromptsDownloadGetErrors];

export type DownloadTestSetPromptsCsvTestSetsTestSetIdentifierPromptsDownloadGetResponses = {
    /**
     * CSV export of prompts in the test set
     */
    200: string;
};

export type DownloadTestSetPromptsCsvTestSetsTestSetIdentifierPromptsDownloadGetResponse = DownloadTestSetPromptsCsvTestSetsTestSetIdentifierPromptsDownloadGetResponses[keyof DownloadTestSetPromptsCsvTestSetsTestSetIdentifierPromptsDownloadGetResponses];

export type GetTestSetPromptsTestSetsTestSetIdentifierPromptsGetData = {
    body?: never;
    path: {
        /**
         * Test Set Identifier
         */
        test_set_identifier: string;
    };
    query?: never;
    url: '/test_sets/{test_set_identifier}/prompts';
};

export type GetTestSetPromptsTestSetsTestSetIdentifierPromptsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTestSetPromptsTestSetsTestSetIdentifierPromptsGetError = GetTestSetPromptsTestSetsTestSetIdentifierPromptsGetErrors[keyof GetTestSetPromptsTestSetsTestSetIdentifierPromptsGetErrors];

export type GetTestSetPromptsTestSetsTestSetIdentifierPromptsGetResponses = {
    /**
     * Response Get Test Set Prompts Test Sets  Test Set Identifier  Prompts Get
     * Successful Response
     */
    200: Array<PromptView>;
};

export type GetTestSetPromptsTestSetsTestSetIdentifierPromptsGetResponse = GetTestSetPromptsTestSetsTestSetIdentifierPromptsGetResponses[keyof GetTestSetPromptsTestSetsTestSetIdentifierPromptsGetResponses];

export type GetTestSetTestsTestSetsTestSetIdentifierTestsGetData = {
    body?: never;
    path: {
        /**
         * Test Set Identifier
         */
        test_set_identifier: string;
    };
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Order By
         */
        order_by?: string;
        /**
         * Order
         */
        order?: string;
        /**
         * $Filter
         * OData filter expression
         */
        $filter?: string | null;
    };
    url: '/test_sets/{test_set_identifier}/tests';
};

export type GetTestSetTestsTestSetsTestSetIdentifierTestsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTestSetTestsTestSetsTestSetIdentifierTestsGetError = GetTestSetTestsTestSetsTestSetIdentifierTestsGetErrors[keyof GetTestSetTestsTestSetsTestSetIdentifierTestsGetErrors];

export type GetTestSetTestsTestSetsTestSetIdentifierTestsGetResponses = {
    /**
     * Response Get Test Set Tests Test Sets  Test Set Identifier  Tests Get
     * Successful Response
     */
    200: Array<TestDetail>;
};

export type GetTestSetTestsTestSetsTestSetIdentifierTestsGetResponse = GetTestSetTestsTestSetsTestSetIdentifierTestsGetResponses[keyof GetTestSetTestsTestSetsTestSetIdentifierTestsGetResponses];

export type ExecuteTestSetTestSetsTestSetIdentifierExecuteEndpointIdPostData = {
    /**
     * Test Configuration Attributes
     */
    body?: TestSetExecutionRequest | null;
    path: {
        /**
         * Test Set Identifier
         */
        test_set_identifier: string;
        /**
         * Endpoint Id
         */
        endpoint_id: string;
    };
    query?: never;
    url: '/test_sets/{test_set_identifier}/execute/{endpoint_id}';
};

export type ExecuteTestSetTestSetsTestSetIdentifierExecuteEndpointIdPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ExecuteTestSetTestSetsTestSetIdentifierExecuteEndpointIdPostError = ExecuteTestSetTestSetsTestSetIdentifierExecuteEndpointIdPostErrors[keyof ExecuteTestSetTestSetsTestSetIdentifierExecuteEndpointIdPostErrors];

export type ExecuteTestSetTestSetsTestSetIdentifierExecuteEndpointIdPostResponses = {
    /**
     * Successful Response
     */
    200: TestSetExecutionResponse;
};

export type ExecuteTestSetTestSetsTestSetIdentifierExecuteEndpointIdPostResponse = ExecuteTestSetTestSetsTestSetIdentifierExecuteEndpointIdPostResponses[keyof ExecuteTestSetTestSetsTestSetIdentifierExecuteEndpointIdPostResponses];

export type GenerateTestSetTestStatsTestSetsTestSetIdentifierStatsGetData = {
    body?: never;
    path: {
        /**
         * Test Set Identifier
         */
        test_set_identifier: string;
    };
    query?: {
        /**
         * Top
         */
        top?: number | null;
        /**
         * Months
         */
        months?: number | null;
        mode?: StatsMode;
    };
    url: '/test_sets/{test_set_identifier}/stats';
};

export type GenerateTestSetTestStatsTestSetsTestSetIdentifierStatsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GenerateTestSetTestStatsTestSetsTestSetIdentifierStatsGetError = GenerateTestSetTestStatsTestSetsTestSetIdentifierStatsGetErrors[keyof GenerateTestSetTestStatsTestSetsTestSetIdentifierStatsGetErrors];

export type GenerateTestSetTestStatsTestSetsTestSetIdentifierStatsGetResponses = {
    /**
     * Successful Response
     */
    200: EntityStats;
};

export type GenerateTestSetTestStatsTestSetsTestSetIdentifierStatsGetResponse = GenerateTestSetTestStatsTestSetsTestSetIdentifierStatsGetResponses[keyof GenerateTestSetTestStatsTestSetsTestSetIdentifierStatsGetResponses];

export type AssociateTestsWithTestSetTestSetsTestSetIdAssociatePostData = {
    body: TestSetBulkAssociateRequest;
    path: {
        /**
         * Test Set Id
         */
        test_set_id: string;
    };
    query?: never;
    url: '/test_sets/{test_set_id}/associate';
};

export type AssociateTestsWithTestSetTestSetsTestSetIdAssociatePostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AssociateTestsWithTestSetTestSetsTestSetIdAssociatePostError = AssociateTestsWithTestSetTestSetsTestSetIdAssociatePostErrors[keyof AssociateTestsWithTestSetTestSetsTestSetIdAssociatePostErrors];

export type AssociateTestsWithTestSetTestSetsTestSetIdAssociatePostResponses = {
    /**
     * Successful Response
     */
    200: TestSetBulkAssociateResponse;
};

export type AssociateTestsWithTestSetTestSetsTestSetIdAssociatePostResponse = AssociateTestsWithTestSetTestSetsTestSetIdAssociatePostResponses[keyof AssociateTestsWithTestSetTestSetsTestSetIdAssociatePostResponses];

export type DisassociateTestsFromTestSetTestSetsTestSetIdDisassociatePostData = {
    body: TestSetBulkDisassociateRequest;
    path: {
        /**
         * Test Set Id
         */
        test_set_id: string;
    };
    query?: never;
    url: '/test_sets/{test_set_id}/disassociate';
};

export type DisassociateTestsFromTestSetTestSetsTestSetIdDisassociatePostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DisassociateTestsFromTestSetTestSetsTestSetIdDisassociatePostError = DisassociateTestsFromTestSetTestSetsTestSetIdDisassociatePostErrors[keyof DisassociateTestsFromTestSetTestSetsTestSetIdDisassociatePostErrors];

export type DisassociateTestsFromTestSetTestSetsTestSetIdDisassociatePostResponses = {
    /**
     * Successful Response
     */
    200: TestSetBulkDisassociateResponse;
};

export type DisassociateTestsFromTestSetTestSetsTestSetIdDisassociatePostResponse = DisassociateTestsFromTestSetTestSetsTestSetIdDisassociatePostResponses[keyof DisassociateTestsFromTestSetTestSetsTestSetIdDisassociatePostResponses];

export type ReadTestsTestsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Sort By
         */
        sort_by?: string;
        /**
         * Sort Order
         */
        sort_order?: string;
        /**
         * $Filter
         * OData filter expression
         */
        $filter?: string | null;
    };
    url: '/tests/';
};

export type ReadTestsTestsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadTestsTestsGetError = ReadTestsTestsGetErrors[keyof ReadTestsTestsGetErrors];

export type ReadTestsTestsGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedTestDetail;
};

export type ReadTestsTestsGetResponse = ReadTestsTestsGetResponses[keyof ReadTestsTestsGetResponses];

export type CreateTestTestsPostData = {
    body: TestCreate;
    path?: never;
    query?: never;
    url: '/tests/';
};

export type CreateTestTestsPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateTestTestsPostError = CreateTestTestsPostErrors[keyof CreateTestTestsPostErrors];

export type CreateTestTestsPostResponses = {
    /**
     * Successful Response
     */
    200: RhesisBackendAppSchemasTestTest;
};

export type CreateTestTestsPostResponse = CreateTestTestsPostResponses[keyof CreateTestTestsPostResponses];

export type CreateTestsBulkTestsBulkPostData = {
    body: TestBulkCreateRequest;
    path?: never;
    query?: never;
    url: '/tests/bulk';
};

export type CreateTestsBulkTestsBulkPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateTestsBulkTestsBulkPostError = CreateTestsBulkTestsBulkPostErrors[keyof CreateTestsBulkTestsBulkPostErrors];

export type CreateTestsBulkTestsBulkPostResponses = {
    /**
     * Successful Response
     */
    200: TestBulkCreateResponse;
};

export type CreateTestsBulkTestsBulkPostResponse = CreateTestsBulkTestsBulkPostResponses[keyof CreateTestsBulkTestsBulkPostResponses];

export type GenerateTestStatsTestsStatsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Top
         */
        top?: number | null;
        /**
         * Months
         */
        months?: number | null;
    };
    url: '/tests/stats';
};

export type GenerateTestStatsTestsStatsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GenerateTestStatsTestsStatsGetError = GenerateTestStatsTestsStatsGetErrors[keyof GenerateTestStatsTestsStatsGetErrors];

export type GenerateTestStatsTestsStatsGetResponses = {
    /**
     * Successful Response
     */
    200: EntityStats;
};

export type GenerateTestStatsTestsStatsGetResponse = GenerateTestStatsTestsStatsGetResponses[keyof GenerateTestStatsTestsStatsGetResponses];

export type GetIndividualTestStatisticsTestsTestIdStatsGetData = {
    body?: never;
    path: {
        /**
         * Test Id
         */
        test_id: string;
    };
    query?: {
        /**
         * Recent Runs Limit
         * Number of recent test runs to include
         */
        recent_runs_limit?: number | null;
        /**
         * Months
         * Filter to last N months of data
         */
        months?: number | null;
        /**
         * Start Date
         * Start date (ISO format, overrides months)
         */
        start_date?: string | null;
        /**
         * End Date
         * End date (ISO format, overrides months)
         */
        end_date?: string | null;
    };
    url: '/tests/{test_id}/stats';
};

export type GetIndividualTestStatisticsTestsTestIdStatsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetIndividualTestStatisticsTestsTestIdStatsGetError = GetIndividualTestStatisticsTestsTestIdStatsGetErrors[keyof GetIndividualTestStatisticsTestsTestIdStatsGetErrors];

export type GetIndividualTestStatisticsTestsTestIdStatsGetResponses = {
    /**
     * Successful Response
     */
    200: TestStats;
};

export type GetIndividualTestStatisticsTestsTestIdStatsGetResponse = GetIndividualTestStatisticsTestsTestIdStatsGetResponses[keyof GetIndividualTestStatisticsTestsTestIdStatsGetResponses];

export type DeleteTestTestsTestIdDeleteData = {
    body?: never;
    path: {
        /**
         * Test Id
         */
        test_id: string;
    };
    query?: never;
    url: '/tests/{test_id}';
};

export type DeleteTestTestsTestIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteTestTestsTestIdDeleteError = DeleteTestTestsTestIdDeleteErrors[keyof DeleteTestTestsTestIdDeleteErrors];

export type DeleteTestTestsTestIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: RhesisBackendAppSchemasTestTest;
};

export type DeleteTestTestsTestIdDeleteResponse = DeleteTestTestsTestIdDeleteResponses[keyof DeleteTestTestsTestIdDeleteResponses];

export type ReadTestTestsTestIdGetData = {
    body?: never;
    path: {
        /**
         * Test Id
         */
        test_id: string;
    };
    query?: never;
    url: '/tests/{test_id}';
};

export type ReadTestTestsTestIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadTestTestsTestIdGetError = ReadTestTestsTestIdGetErrors[keyof ReadTestTestsTestIdGetErrors];

export type ReadTestTestsTestIdGetResponses = {
    /**
     * Successful Response
     */
    200: TestDetail;
};

export type ReadTestTestsTestIdGetResponse = ReadTestTestsTestIdGetResponses[keyof ReadTestTestsTestIdGetResponses];

export type UpdateTestTestsTestIdPutData = {
    body: TestUpdate;
    path: {
        /**
         * Test Id
         */
        test_id: string;
    };
    query?: never;
    url: '/tests/{test_id}';
};

export type UpdateTestTestsTestIdPutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateTestTestsTestIdPutError = UpdateTestTestsTestIdPutErrors[keyof UpdateTestTestsTestIdPutErrors];

export type UpdateTestTestsTestIdPutResponses = {
    /**
     * Successful Response
     */
    200: RhesisBackendAppSchemasTestTest;
};

export type UpdateTestTestsTestIdPutResponse = UpdateTestTestsTestIdPutResponses[keyof UpdateTestTestsTestIdPutResponses];

export type ReadTokensTokensGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Sort By
         */
        sort_by?: string;
        /**
         * Sort Order
         */
        sort_order?: string;
        /**
         * $Filter
         * OData filter expression
         */
        $filter?: string | null;
    };
    url: '/tokens/';
};

export type ReadTokensTokensGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadTokensTokensGetError = ReadTokensTokensGetErrors[keyof ReadTokensTokensGetErrors];

export type ReadTokensTokensGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedTokenRead;
};

export type ReadTokensTokensGetResponse = ReadTokensTokensGetResponses[keyof ReadTokensTokensGetResponses];

export type CreateTokenTokensPostData = {
    body: TokenCreateBody;
    path?: never;
    query?: never;
    url: '/tokens/';
};

export type CreateTokenTokensPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateTokenTokensPostError = CreateTokenTokensPostErrors[keyof CreateTokenTokensPostErrors];

export type CreateTokenTokensPostResponses = {
    /**
     * Successful Response
     */
    200: TokenCreateResponse;
};

export type CreateTokenTokensPostResponse = CreateTokenTokensPostResponses[keyof CreateTokenTokensPostResponses];

export type DeleteTokenTokensTokenIdDeleteData = {
    body?: never;
    path: {
        /**
         * Token Id
         */
        token_id: string;
    };
    query?: never;
    url: '/tokens/{token_id}';
};

export type DeleteTokenTokensTokenIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteTokenTokensTokenIdDeleteError = DeleteTokenTokensTokenIdDeleteErrors[keyof DeleteTokenTokensTokenIdDeleteErrors];

export type DeleteTokenTokensTokenIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: TokenRead;
};

export type DeleteTokenTokensTokenIdDeleteResponse = DeleteTokenTokensTokenIdDeleteResponses[keyof DeleteTokenTokensTokenIdDeleteResponses];

export type ReadTokenTokensTokenIdGetData = {
    body?: never;
    path: {
        /**
         * Token Id
         */
        token_id: string;
    };
    query?: never;
    url: '/tokens/{token_id}';
};

export type ReadTokenTokensTokenIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadTokenTokensTokenIdGetError = ReadTokenTokensTokenIdGetErrors[keyof ReadTokenTokensTokenIdGetErrors];

export type ReadTokenTokensTokenIdGetResponses = {
    /**
     * Successful Response
     */
    200: TokenRead;
};

export type ReadTokenTokensTokenIdGetResponse = ReadTokenTokensTokenIdGetResponses[keyof ReadTokenTokensTokenIdGetResponses];

export type UpdateTokenTokensTokenIdPutData = {
    body: TokenUpdate;
    path: {
        /**
         * Token Id
         */
        token_id: string;
    };
    query?: never;
    url: '/tokens/{token_id}';
};

export type UpdateTokenTokensTokenIdPutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateTokenTokensTokenIdPutError = UpdateTokenTokensTokenIdPutErrors[keyof UpdateTokenTokensTokenIdPutErrors];

export type UpdateTokenTokensTokenIdPutResponses = {
    /**
     * Successful Response
     */
    200: TokenRead;
};

export type UpdateTokenTokensTokenIdPutResponse = UpdateTokenTokensTokenIdPutResponses[keyof UpdateTokenTokensTokenIdPutResponses];

export type RefreshTokenTokensTokenIdRefreshPostData = {
    body: TokenRefreshBody;
    path: {
        /**
         * Token Id
         */
        token_id: string;
    };
    query?: never;
    url: '/tokens/{token_id}/refresh';
};

export type RefreshTokenTokensTokenIdRefreshPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RefreshTokenTokensTokenIdRefreshPostError = RefreshTokenTokensTokenIdRefreshPostErrors[keyof RefreshTokenTokensTokenIdRefreshPostErrors];

export type RefreshTokenTokensTokenIdRefreshPostResponses = {
    /**
     * Successful Response
     */
    200: TokenCreateResponse;
};

export type RefreshTokenTokensTokenIdRefreshPostResponse = RefreshTokenTokensTokenIdRefreshPostResponses[keyof RefreshTokenTokensTokenIdRefreshPostResponses];

export type ReadTopicsTopicsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Sort By
         */
        sort_by?: string;
        /**
         * Sort Order
         */
        sort_order?: string;
        /**
         * $Filter
         * OData filter expression
         */
        $filter?: string | null;
        /**
         * Entity Type
         * Filter topics by entity type
         */
        entity_type?: string | null;
    };
    url: '/topics/';
};

export type ReadTopicsTopicsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadTopicsTopicsGetError = ReadTopicsTopicsGetErrors[keyof ReadTopicsTopicsGetErrors];

export type ReadTopicsTopicsGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedTopicDetail;
};

export type ReadTopicsTopicsGetResponse = ReadTopicsTopicsGetResponses[keyof ReadTopicsTopicsGetResponses];

export type CreateTopicTopicsPostData = {
    body: TopicCreate;
    path?: never;
    query?: never;
    url: '/topics/';
};

export type CreateTopicTopicsPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateTopicTopicsPostError = CreateTopicTopicsPostErrors[keyof CreateTopicTopicsPostErrors];

export type CreateTopicTopicsPostResponses = {
    /**
     * Successful Response
     */
    200: Topic;
};

export type CreateTopicTopicsPostResponse = CreateTopicTopicsPostResponses[keyof CreateTopicTopicsPostResponses];

export type DeleteTopicTopicsTopicIdDeleteData = {
    body?: never;
    path: {
        /**
         * Topic Id
         */
        topic_id: string;
    };
    query?: never;
    url: '/topics/{topic_id}';
};

export type DeleteTopicTopicsTopicIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteTopicTopicsTopicIdDeleteError = DeleteTopicTopicsTopicIdDeleteErrors[keyof DeleteTopicTopicsTopicIdDeleteErrors];

export type DeleteTopicTopicsTopicIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: Topic;
};

export type DeleteTopicTopicsTopicIdDeleteResponse = DeleteTopicTopicsTopicIdDeleteResponses[keyof DeleteTopicTopicsTopicIdDeleteResponses];

export type ReadTopicTopicsTopicIdGetData = {
    body?: never;
    path: {
        /**
         * Topic Id
         */
        topic_id: string;
    };
    query?: never;
    url: '/topics/{topic_id}';
};

export type ReadTopicTopicsTopicIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadTopicTopicsTopicIdGetError = ReadTopicTopicsTopicIdGetErrors[keyof ReadTopicTopicsTopicIdGetErrors];

export type ReadTopicTopicsTopicIdGetResponses = {
    /**
     * Successful Response
     */
    200: Topic;
};

export type ReadTopicTopicsTopicIdGetResponse = ReadTopicTopicsTopicIdGetResponses[keyof ReadTopicTopicsTopicIdGetResponses];

export type UpdateTopicTopicsTopicIdPutData = {
    body: TopicUpdate;
    path: {
        /**
         * Topic Id
         */
        topic_id: string;
    };
    query?: never;
    url: '/topics/{topic_id}';
};

export type UpdateTopicTopicsTopicIdPutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateTopicTopicsTopicIdPutError = UpdateTopicTopicsTopicIdPutErrors[keyof UpdateTopicTopicsTopicIdPutErrors];

export type UpdateTopicTopicsTopicIdPutResponses = {
    /**
     * Successful Response
     */
    200: Topic;
};

export type UpdateTopicTopicsTopicIdPutResponse = UpdateTopicTopicsTopicIdPutResponses[keyof UpdateTopicTopicsTopicIdPutResponses];

export type ReadTypeLookupsTypeLookupsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Sort By
         */
        sort_by?: string;
        /**
         * Sort Order
         */
        sort_order?: string;
        /**
         * $Filter
         * OData filter expression
         */
        $filter?: string | null;
    };
    url: '/type_lookups/';
};

export type ReadTypeLookupsTypeLookupsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadTypeLookupsTypeLookupsGetError = ReadTypeLookupsTypeLookupsGetErrors[keyof ReadTypeLookupsTypeLookupsGetErrors];

export type ReadTypeLookupsTypeLookupsGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedTypeLookup;
};

export type ReadTypeLookupsTypeLookupsGetResponse = ReadTypeLookupsTypeLookupsGetResponses[keyof ReadTypeLookupsTypeLookupsGetResponses];

export type CreateTypeLookupTypeLookupsPostData = {
    body: TypeLookupCreate;
    path?: never;
    query?: never;
    url: '/type_lookups/';
};

export type CreateTypeLookupTypeLookupsPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateTypeLookupTypeLookupsPostError = CreateTypeLookupTypeLookupsPostErrors[keyof CreateTypeLookupTypeLookupsPostErrors];

export type CreateTypeLookupTypeLookupsPostResponses = {
    /**
     * Successful Response
     */
    200: TypeLookup;
};

export type CreateTypeLookupTypeLookupsPostResponse = CreateTypeLookupTypeLookupsPostResponses[keyof CreateTypeLookupTypeLookupsPostResponses];

export type DeleteTypeLookupTypeLookupsTypeLookupIdDeleteData = {
    body?: never;
    path: {
        /**
         * Type Lookup Id
         */
        type_lookup_id: string;
    };
    query?: never;
    url: '/type_lookups/{type_lookup_id}';
};

export type DeleteTypeLookupTypeLookupsTypeLookupIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteTypeLookupTypeLookupsTypeLookupIdDeleteError = DeleteTypeLookupTypeLookupsTypeLookupIdDeleteErrors[keyof DeleteTypeLookupTypeLookupsTypeLookupIdDeleteErrors];

export type DeleteTypeLookupTypeLookupsTypeLookupIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: TypeLookup;
};

export type DeleteTypeLookupTypeLookupsTypeLookupIdDeleteResponse = DeleteTypeLookupTypeLookupsTypeLookupIdDeleteResponses[keyof DeleteTypeLookupTypeLookupsTypeLookupIdDeleteResponses];

export type ReadTypeLookupTypeLookupsTypeLookupIdGetData = {
    body?: never;
    path: {
        /**
         * Type Lookup Id
         */
        type_lookup_id: string;
    };
    query?: never;
    url: '/type_lookups/{type_lookup_id}';
};

export type ReadTypeLookupTypeLookupsTypeLookupIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadTypeLookupTypeLookupsTypeLookupIdGetError = ReadTypeLookupTypeLookupsTypeLookupIdGetErrors[keyof ReadTypeLookupTypeLookupsTypeLookupIdGetErrors];

export type ReadTypeLookupTypeLookupsTypeLookupIdGetResponses = {
    /**
     * Successful Response
     */
    200: TypeLookup;
};

export type ReadTypeLookupTypeLookupsTypeLookupIdGetResponse = ReadTypeLookupTypeLookupsTypeLookupIdGetResponses[keyof ReadTypeLookupTypeLookupsTypeLookupIdGetResponses];

export type UpdateTypeLookupTypeLookupsTypeLookupIdPutData = {
    body: TypeLookupUpdate;
    path: {
        /**
         * Type Lookup Id
         */
        type_lookup_id: string;
    };
    query?: never;
    url: '/type_lookups/{type_lookup_id}';
};

export type UpdateTypeLookupTypeLookupsTypeLookupIdPutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateTypeLookupTypeLookupsTypeLookupIdPutError = UpdateTypeLookupTypeLookupsTypeLookupIdPutErrors[keyof UpdateTypeLookupTypeLookupsTypeLookupIdPutErrors];

export type UpdateTypeLookupTypeLookupsTypeLookupIdPutResponses = {
    /**
     * Successful Response
     */
    200: TypeLookup;
};

export type UpdateTypeLookupTypeLookupsTypeLookupIdPutResponse = UpdateTypeLookupTypeLookupsTypeLookupIdPutResponses[keyof UpdateTypeLookupTypeLookupsTypeLookupIdPutResponses];

export type ReadUseCasesUseCasesGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Sort By
         */
        sort_by?: string;
        /**
         * Sort Order
         */
        sort_order?: string;
        /**
         * $Filter
         * OData filter expression
         */
        $filter?: string | null;
    };
    url: '/use_cases/';
};

export type ReadUseCasesUseCasesGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadUseCasesUseCasesGetError = ReadUseCasesUseCasesGetErrors[keyof ReadUseCasesUseCasesGetErrors];

export type ReadUseCasesUseCasesGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedUseCase;
};

export type ReadUseCasesUseCasesGetResponse = ReadUseCasesUseCasesGetResponses[keyof ReadUseCasesUseCasesGetResponses];

export type CreateUseCaseUseCasesPostData = {
    body: UseCaseCreate;
    path?: never;
    query?: never;
    url: '/use_cases/';
};

export type CreateUseCaseUseCasesPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateUseCaseUseCasesPostError = CreateUseCaseUseCasesPostErrors[keyof CreateUseCaseUseCasesPostErrors];

export type CreateUseCaseUseCasesPostResponses = {
    /**
     * Successful Response
     */
    200: UseCase;
};

export type CreateUseCaseUseCasesPostResponse = CreateUseCaseUseCasesPostResponses[keyof CreateUseCaseUseCasesPostResponses];

export type DeleteUseCaseUseCasesUseCaseIdDeleteData = {
    body?: never;
    path: {
        /**
         * Use Case Id
         */
        use_case_id: string;
    };
    query?: never;
    url: '/use_cases/{use_case_id}';
};

export type DeleteUseCaseUseCasesUseCaseIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteUseCaseUseCasesUseCaseIdDeleteError = DeleteUseCaseUseCasesUseCaseIdDeleteErrors[keyof DeleteUseCaseUseCasesUseCaseIdDeleteErrors];

export type DeleteUseCaseUseCasesUseCaseIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: UseCase;
};

export type DeleteUseCaseUseCasesUseCaseIdDeleteResponse = DeleteUseCaseUseCasesUseCaseIdDeleteResponses[keyof DeleteUseCaseUseCasesUseCaseIdDeleteResponses];

export type ReadUseCaseUseCasesUseCaseIdGetData = {
    body?: never;
    path: {
        /**
         * Use Case Id
         */
        use_case_id: string;
    };
    query?: never;
    url: '/use_cases/{use_case_id}';
};

export type ReadUseCaseUseCasesUseCaseIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadUseCaseUseCasesUseCaseIdGetError = ReadUseCaseUseCasesUseCaseIdGetErrors[keyof ReadUseCaseUseCasesUseCaseIdGetErrors];

export type ReadUseCaseUseCasesUseCaseIdGetResponses = {
    /**
     * Successful Response
     */
    200: UseCase;
};

export type ReadUseCaseUseCasesUseCaseIdGetResponse = ReadUseCaseUseCasesUseCaseIdGetResponses[keyof ReadUseCaseUseCasesUseCaseIdGetResponses];

export type UpdateUseCaseUseCasesUseCaseIdPutData = {
    body: UseCaseUpdate;
    path: {
        /**
         * Use Case Id
         */
        use_case_id: string;
    };
    query?: never;
    url: '/use_cases/{use_case_id}';
};

export type UpdateUseCaseUseCasesUseCaseIdPutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateUseCaseUseCasesUseCaseIdPutError = UpdateUseCaseUseCasesUseCaseIdPutErrors[keyof UpdateUseCaseUseCasesUseCaseIdPutErrors];

export type UpdateUseCaseUseCasesUseCaseIdPutResponses = {
    /**
     * Successful Response
     */
    200: UseCase;
};

export type UpdateUseCaseUseCasesUseCaseIdPutResponse = UpdateUseCaseUseCasesUseCaseIdPutResponses[keyof UpdateUseCaseUseCasesUseCaseIdPutResponses];

export type ReadUsersUsersGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Sort By
         */
        sort_by?: string;
        /**
         * Sort Order
         */
        sort_order?: string;
        /**
         * $Filter
         * OData filter expression
         */
        $filter?: string | null;
    };
    url: '/users/';
};

export type ReadUsersUsersGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadUsersUsersGetError = ReadUsersUsersGetErrors[keyof ReadUsersUsersGetErrors];

export type ReadUsersUsersGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedUser;
};

export type ReadUsersUsersGetResponse = ReadUsersUsersGetResponses[keyof ReadUsersUsersGetResponses];

export type CreateUserUsersPostData = {
    body: UserCreate;
    path?: never;
    query?: never;
    url: '/users/';
};

export type CreateUserUsersPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateUserUsersPostError = CreateUserUsersPostErrors[keyof CreateUserUsersPostErrors];

export type CreateUserUsersPostResponses = {
    /**
     * Successful Response
     */
    200: User;
};

export type CreateUserUsersPostResponse = CreateUserUsersPostResponses[keyof CreateUserUsersPostResponses];

export type DeleteUserUsersUserIdDeleteData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: string;
    };
    query?: never;
    url: '/users/{user_id}';
};

export type DeleteUserUsersUserIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteUserUsersUserIdDeleteError = DeleteUserUsersUserIdDeleteErrors[keyof DeleteUserUsersUserIdDeleteErrors];

export type DeleteUserUsersUserIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: User;
};

export type DeleteUserUsersUserIdDeleteResponse = DeleteUserUsersUserIdDeleteResponses[keyof DeleteUserUsersUserIdDeleteResponses];

export type ReadUserUsersUserIdGetData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: string;
    };
    query?: never;
    url: '/users/{user_id}';
};

export type ReadUserUsersUserIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadUserUsersUserIdGetError = ReadUserUsersUserIdGetErrors[keyof ReadUserUsersUserIdGetErrors];

export type ReadUserUsersUserIdGetResponses = {
    /**
     * Successful Response
     */
    200: User;
};

export type ReadUserUsersUserIdGetResponse = ReadUserUsersUserIdGetResponses[keyof ReadUserUsersUserIdGetResponses];

export type UpdateUserUsersUserIdPutData = {
    body: UserUpdate;
    path: {
        /**
         * User Id
         */
        user_id: string;
    };
    query?: never;
    url: '/users/{user_id}';
};

export type UpdateUserUsersUserIdPutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateUserUsersUserIdPutError = UpdateUserUsersUserIdPutErrors[keyof UpdateUserUsersUserIdPutErrors];

export type UpdateUserUsersUserIdPutResponses = {
    /**
     * Successful Response
     */
    200: UserUpdateResponse;
};

export type UpdateUserUsersUserIdPutResponse = UpdateUserUsersUserIdPutResponses[keyof UpdateUserUsersUserIdPutResponses];

export type LeaveOrganizationUsersLeaveOrganizationPatchData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/leave-organization';
};

export type LeaveOrganizationUsersLeaveOrganizationPatchErrors = {
    /**
     * Not found
     */
    404: unknown;
};

export type LeaveOrganizationUsersLeaveOrganizationPatchResponses = {
    /**
     * Successful Response
     */
    200: User;
};

export type LeaveOrganizationUsersLeaveOrganizationPatchResponse = LeaveOrganizationUsersLeaveOrganizationPatchResponses[keyof LeaveOrganizationUsersLeaveOrganizationPatchResponses];

export type RootGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type RootGetResponses = {
    /**
     * Successful Response
     */
    200: RootResponse;
};

export type RootGetResponse = RootGetResponses[keyof RootGetResponses];
